
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  0800e888  0800e888  0001e888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f89c  0800f89c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a4  0800f8a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800f8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00005204  20000208  20000208  00020208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000540c  2000540c  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dd55  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d9e  00000000  00000000  0003dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab0  00000000  00000000  00041d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014eb  00000000  00000000  00043820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000587b  00000000  00000000  00044d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f15a  00000000  00000000  0004a586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc979  00000000  00000000  000696e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008304  00000000  00000000  0014605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0014e360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e86c 	.word	0x0800e86c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800e86c 	.word	0x0800e86c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f002 fc9e 	bl	8003828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f87c 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fb74 	bl	80015dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ef4:	f000 f904 	bl	8001100 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ef8:	f000 f9a0 	bl	800123c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000efc:	f000 f9f2 	bl	80012e4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f00:	f000 fa98 	bl	8001434 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 fb40 	bl	8001588 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f08:	f000 f8cc 	bl	80010a4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f0c:	f000 fa3e 	bl	800138c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f10:	f00a fd5a 	bl	800b9c8 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8000f14:	2203      	movs	r2, #3
 8000f16:	2100      	movs	r1, #0
 8000f18:	481e      	ldr	r0, [pc, #120]	; (8000f94 <main+0xb0>)
 8000f1a:	f00a fb50 	bl	800b5be <ICM20948_init>

  // for debug
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
  // for real task
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8000f1e:	2205      	movs	r2, #5
 8000f20:	491d      	ldr	r1, [pc, #116]	; (8000f98 <main+0xb4>)
 8000f22:	481e      	ldr	r0, [pc, #120]	; (8000f9c <main+0xb8>)
 8000f24:	f006 fdad 	bl	8007a82 <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f28:	f007 fd78 	bl	8008a1c <osKernelInitialize>
  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <main+0xbc>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <main+0xc0>)
 8000f32:	f007 fdbd 	bl	8008ab0 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <main+0xc4>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
//  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);

  /* creation of rpiTask */
  rpiTaskHandle = osThreadNew(StartRpiTask, NULL, &rpiTask_attributes);
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <main+0xc8>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <main+0xcc>)
 8000f42:	f007 fdb5 	bl	8008ab0 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <main+0xd0>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* creation of gyroTask */
  gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <main+0xd4>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	481a      	ldr	r0, [pc, #104]	; (8000fbc <main+0xd8>)
 8000f52:	f007 fdad 	bl	8008ab0 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <main+0xdc>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* creation of bulleyesTask */
//  bulleyesTaskHandle = osThreadNew(StartBulleyesTask, NULL, &bulleyesTask_attributes);

  /* creation of encoderRightTas */
  encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <main+0xe0>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <main+0xe4>)
 8000f62:	f007 fda5 	bl	8008ab0 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <main+0xe8>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* creation of encoderLeftTask */
  encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <main+0xec>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <main+0xf0>)
 8000f72:	f007 fd9d 	bl	8008ab0 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <main+0xf4>)
 8000f7a:	6013      	str	r3, [r2, #0]

  /* creation of showTask */
  showTaskHandle = osThreadNew(show, NULL, &showTask_attributes);
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <main+0xf8>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0xfc>)
 8000f82:	f007 fd95 	bl	8008ab0 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <main+0x100>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f8c:	f007 fd6a 	bl	8008a64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0xac>
 8000f92:	bf00      	nop
 8000f94:	20000224 	.word	0x20000224
 8000f98:	2000043c 	.word	0x2000043c
 8000f9c:	200003e0 	.word	0x200003e0
 8000fa0:	0800e9d8 	.word	0x0800e9d8
 8000fa4:	08002699 	.word	0x08002699
 8000fa8:	20000424 	.word	0x20000424
 8000fac:	0800e9fc 	.word	0x0800e9fc
 8000fb0:	0800293d 	.word	0x0800293d
 8000fb4:	20000428 	.word	0x20000428
 8000fb8:	0800ea20 	.word	0x0800ea20
 8000fbc:	08002ce1 	.word	0x08002ce1
 8000fc0:	2000042c 	.word	0x2000042c
 8000fc4:	0800ea44 	.word	0x0800ea44
 8000fc8:	08002eb1 	.word	0x08002eb1
 8000fcc:	20000430 	.word	0x20000430
 8000fd0:	0800ea68 	.word	0x0800ea68
 8000fd4:	08002f39 	.word	0x08002f39
 8000fd8:	20000434 	.word	0x20000434
 8000fdc:	0800ea8c 	.word	0x0800ea8c
 8000fe0:	08002fc1 	.word	0x08002fc1
 8000fe4:	20000438 	.word	0x20000438

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	; 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00b faeb 	bl	800c5d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <SystemClock_Config+0xb4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <SystemClock_Config+0xb4>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <SystemClock_Config+0xb4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <SystemClock_Config+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <SystemClock_Config+0xb8>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <SystemClock_Config+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fc31 	bl	80058c0 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001064:	f002 f816 	bl	8003094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fe94 	bl	8005db0 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800108e:	f002 f801 	bl	8003094 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f002 ff91 	bl	8004008 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f001 ffd2 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000224 	.word	0x20000224
 80010f8:	40005400 	.word	0x40005400
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b096      	sub	sp, #88	; 0x58
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00b fa4a 	bl	800c5d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <MX_TIM1_Init+0x134>)
 8001140:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <MX_TIM1_Init+0x138>)
 8001142:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <MX_TIM1_Init+0x134>)
 8001146:	22a0      	movs	r2, #160	; 0xa0
 8001148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <MX_TIM1_Init+0x134>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_TIM1_Init+0x134>)
 8001152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001156:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <MX_TIM1_Init+0x134>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_TIM1_Init+0x134>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001164:	4b33      	ldr	r3, [pc, #204]	; (8001234 <MX_TIM1_Init+0x134>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800116a:	4832      	ldr	r0, [pc, #200]	; (8001234 <MX_TIM1_Init+0x134>)
 800116c:	f005 f800 	bl	8006170 <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001176:	f001 ff8d 	bl	8003094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001184:	4619      	mov	r1, r3
 8001186:	482b      	ldr	r0, [pc, #172]	; (8001234 <MX_TIM1_Init+0x134>)
 8001188:	f005 fd4c 	bl	8006c24 <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001192:	f001 ff7f 	bl	8003094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001196:	4827      	ldr	r0, [pc, #156]	; (8001234 <MX_TIM1_Init+0x134>)
 8001198:	f005 f839 	bl	800620e <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011a2:	f001 ff77 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b2:	4619      	mov	r1, r3
 80011b4:	481f      	ldr	r0, [pc, #124]	; (8001234 <MX_TIM1_Init+0x134>)
 80011b6:	f006 faa3 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011c0:	f001 ff68 	bl	8003094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	220c      	movs	r2, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_TIM1_Init+0x134>)
 80011e6:	f005 fc5b 	bl	8006aa0 <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80011f0:	f001 ff50 	bl	8003094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM1_Init+0x134>)
 8001218:	f006 faee 	bl	80077f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001222:	f001 ff37 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM1_Init+0x134>)
 8001228:	f002 f916 	bl	8003458 <HAL_TIM_MspPostInit>

}
 800122c:	bf00      	nop
 800122e:	3758      	adds	r7, #88	; 0x58
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000278 	.word	0x20000278
 8001238:	40010000 	.word	0x40010000

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00b f9c1 	bl	800c5d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_TIM2_Init+0xa4>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_TIM2_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM2_Init+0xa4>)
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM2_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM2_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001280:	2303      	movs	r3, #3
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001290:	230a      	movs	r3, #10
 8001292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001298:	2301      	movs	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012a0:	230a      	movs	r3, #10
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM2_Init+0xa4>)
 80012ac:	f005 f91f 	bl	80064ee <HAL_TIM_Encoder_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012b6:	f001 feed 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM2_Init+0xa4>)
 80012c8:	f006 fa1a 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012d2:	f001 fedf 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002c0 	.word	0x200002c0

080012e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00b f96d 	bl	800c5d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_TIM3_Init+0xa4>)
 8001304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM3_Init+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001326:	2303      	movs	r3, #3
 8001328:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800133e:	2301      	movs	r3, #1
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001346:	230a      	movs	r3, #10
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_TIM3_Init+0xa0>)
 8001352:	f005 f8cc 	bl	80064ee <HAL_TIM_Encoder_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800135c:	f001 fe9a 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM3_Init+0xa0>)
 800136e:	f006 f9c7 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001378:	f001 fe8c 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000308 	.word	0x20000308
 8001388:	40000400 	.word	0x40000400

0800138c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_TIM4_Init+0xa0>)
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM4_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM4_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM4_Init+0xa0>)
 80013bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM4_Init+0xa0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_TIM4_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <MX_TIM4_Init+0xa0>)
 80013d0:	f005 f83e 	bl	8006450 <HAL_TIM_IC_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013da:	f001 fe5b 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	480f      	ldr	r0, [pc, #60]	; (800142c <MX_TIM4_Init+0xa0>)
 80013ee:	f006 f987 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80013f8:	f001 fe4c 	bl	8003094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001400:	2301      	movs	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM4_Init+0xa0>)
 8001414:	f005 faa7 	bl	8006966 <HAL_TIM_IC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800141e:	f001 fe39 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000350 	.word	0x20000350
 8001430:	40000800 	.word	0x40000800

08001434 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2220      	movs	r2, #32
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00b f8b0 	bl	800c5d2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001474:	4a43      	ldr	r2, [pc, #268]	; (8001584 <MX_TIM8_Init+0x150>)
 8001476:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <MX_TIM8_Init+0x14c>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001486:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800148a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <MX_TIM8_Init+0x14c>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_TIM8_Init+0x14c>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800149e:	4838      	ldr	r0, [pc, #224]	; (8001580 <MX_TIM8_Init+0x14c>)
 80014a0:	f004 fe66 	bl	8006170 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014aa:	f001 fdf3 	bl	8003094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014b8:	4619      	mov	r1, r3
 80014ba:	4831      	ldr	r0, [pc, #196]	; (8001580 <MX_TIM8_Init+0x14c>)
 80014bc:	f005 fbb2 	bl	8006c24 <HAL_TIM_ConfigClockSource>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014c6:	f001 fde5 	bl	8003094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014ca:	482d      	ldr	r0, [pc, #180]	; (8001580 <MX_TIM8_Init+0x14c>)
 80014cc:	f004 fe9f 	bl	800620e <HAL_TIM_PWM_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014d6:	f001 fddd 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e6:	4619      	mov	r1, r3
 80014e8:	4825      	ldr	r0, [pc, #148]	; (8001580 <MX_TIM8_Init+0x14c>)
 80014ea:	f006 f909 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014f4:	f001 fdce 	bl	8003094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f8:	2360      	movs	r3, #96	; 0x60
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	; (8001580 <MX_TIM8_Init+0x14c>)
 800151e:	f005 fabf 	bl	8006aa0 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001528:	f001 fdb4 	bl	8003094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2204      	movs	r2, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4812      	ldr	r0, [pc, #72]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001536:	f005 fab3 	bl	8006aa0 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001540:	f001 fda8 	bl	8003094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_TIM8_Init+0x14c>)
 8001568:	f006 f946 	bl	80077f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001572:	f001 fd8f 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3758      	adds	r7, #88	; 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000398 	.word	0x20000398
 8001584:	40010400 	.word	0x40010400

08001588 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART3_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART3_UART_Init+0x4c>)
 80015c0:	f006 f980 	bl	80078c4 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f001 fd63 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200003e0 	.word	0x200003e0
 80015d8:	40004800 	.word	0x40004800

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <MX_GPIO_Init+0x188>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <MX_GPIO_Init+0x188>)
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b58      	ldr	r3, [pc, #352]	; (8001764 <MX_GPIO_Init+0x188>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <MX_GPIO_Init+0x188>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a53      	ldr	r2, [pc, #332]	; (8001764 <MX_GPIO_Init+0x188>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b51      	ldr	r3, [pc, #324]	; (8001764 <MX_GPIO_Init+0x188>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <MX_GPIO_Init+0x188>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <MX_GPIO_Init+0x188>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <MX_GPIO_Init+0x188>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b46      	ldr	r3, [pc, #280]	; (8001764 <MX_GPIO_Init+0x188>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <MX_GPIO_Init+0x188>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b43      	ldr	r3, [pc, #268]	; (8001764 <MX_GPIO_Init+0x188>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <MX_GPIO_Init+0x188>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a3e      	ldr	r2, [pc, #248]	; (8001764 <MX_GPIO_Init+0x188>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <MX_GPIO_Init+0x188>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <MX_GPIO_Init+0x188>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a37      	ldr	r2, [pc, #220]	; (8001764 <MX_GPIO_Init+0x188>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <MX_GPIO_Init+0x188>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_GPIO_Init+0x18c>)
 80016a2:	f002 fc97 	bl	8003fd4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	213c      	movs	r1, #60	; 0x3c
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <MX_GPIO_Init+0x190>)
 80016ac:	f002 fc92 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b6:	482e      	ldr	r0, [pc, #184]	; (8001770 <MX_GPIO_Init+0x194>)
 80016b8:	f002 fc8c 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	482c      	ldr	r0, [pc, #176]	; (8001774 <MX_GPIO_Init+0x198>)
 80016c4:	f002 fc86 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016c8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016cc:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4821      	ldr	r0, [pc, #132]	; (8001768 <MX_GPIO_Init+0x18c>)
 80016e2:	f002 fadb 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80016e6:	233c      	movs	r3, #60	; 0x3c
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <MX_GPIO_Init+0x190>)
 80016fe:	f002 facd 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4815      	ldr	r0, [pc, #84]	; (8001770 <MX_GPIO_Init+0x194>)
 800171c:	f002 fabe 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <MX_GPIO_Init+0x198>)
 8001738:	f002 fab0 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_GPIO_Init+0x198>)
 8001756:	f002 faa1 	bl	8003c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	; 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40021000 	.word	0x40021000
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020c00 	.word	0x40020c00

08001778 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	// for debug
	//HAL_UART_Receive_IT (&huart3, aRxBuffer, 1);
	// for real task
	HAL_UART_Receive_IT (&huart3, aRxBuffer, 5);
 8001780:	2205      	movs	r2, #5
 8001782:	4904      	ldr	r1, [pc, #16]	; (8001794 <HAL_UART_RxCpltCallback+0x1c>)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <HAL_UART_RxCpltCallback+0x20>)
 8001786:	f006 f97c 	bl	8007a82 <HAL_UART_Receive_IT>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000043c 	.word	0x2000043c
 8001798:	200003e0 	.word	0x200003e0
 800179c:	00000000 	.word	0x00000000

080017a0 <HAL_TIM_IC_CaptureCallback>:
 __HAL_TIM_SET_COUNTER(&htim4, 0);
 while (__HAL_TIM_GET_COUNTER (&htim4) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7f1b      	ldrb	r3, [r3, #28]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f040 808a 	bne.w	80018c6 <HAL_TIM_IC_CaptureCallback+0x126>
 {
  if (Is_First_Captured == 0)
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d11b      	bne.n	80017f2 <HAL_TIM_IC_CaptureCallback+0x52>
  {
   IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017ba:	2100      	movs	r1, #0
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f005 faf9 	bl	8006db4 <HAL_TIM_ReadCapturedValue>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017c8:	601a      	str	r2, [r3, #0]
   Is_First_Captured = 1;
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020a 	bic.w	r2, r2, #10
 80017de:	621a      	str	r2, [r3, #32]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0202 	orr.w	r2, r2, #2
 80017ee:	621a      	str	r2, [r3, #32]

   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
  }
 }
}
 80017f0:	e069      	b.n	80018c6 <HAL_TIM_IC_CaptureCallback+0x126>
  else if (Is_First_Captured == 1)
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d165      	bne.n	80018c6 <HAL_TIM_IC_CaptureCallback+0x126>
   IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 fad9 	bl	8006db4 <HAL_TIM_ReadCapturedValue>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001808:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_COUNTER(htim,0);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
   if (IC_Val2 > IC_Val1)
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	dd0d      	ble.n	800183a <HAL_TIM_IC_CaptureCallback+0x9a>
    Difference = IC_Val2 - IC_Val1;
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe7b 	bl	8000524 <__aeabi_i2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	492c      	ldr	r1, [pc, #176]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
 8001838:	e015      	b.n	8001866 <HAL_TIM_IC_CaptureCallback+0xc6>
   else if (IC_Val1 > IC_Val2)
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	dd0f      	ble.n	8001866 <HAL_TIM_IC_CaptureCallback+0xc6>
    Difference = (65535 - IC_Val1) + IC_Val2;
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800184e:	33ff      	adds	r3, #255	; 0xff
 8001850:	4a23      	ldr	r2, [pc, #140]	; (80018e0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4413      	add	r3, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe64 	bl	8000524 <__aeabi_i2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4920      	ldr	r1, [pc, #128]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001862:	e9c1 2300 	strd	r2, r3, [r1]
   uDistance = Difference * .0343/2;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001868:	e9d3 0100 	ldrd	r0, r1, [r3]
 800186c:	a318      	add	r3, pc, #96	; (adr r3, 80018d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fec1 	bl	80005f8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001886:	f7fe ffe1 	bl	800084c <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001890:	e9c1 2300 	strd	r2, r3, [r1]
   Is_First_Captured = 0;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020a 	bic.w	r2, r2, #10
 80018a8:	621a      	str	r2, [r3, #32]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a12      	ldr	r2, [r2, #32]
 80018b4:	621a      	str	r2, [r3, #32]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_TIM_IC_CaptureCallback+0x14c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0202 	bic.w	r2, r2, #2
 80018c4:	60da      	str	r2, [r3, #12]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	04816f00 	.word	0x04816f00
 80018d4:	3fa18fc5 	.word	0x3fa18fc5
 80018d8:	200004b0 	.word	0x200004b0
 80018dc:	200004b4 	.word	0x200004b4
 80018e0:	200004b8 	.word	0x200004b8
 80018e4:	200004c0 	.word	0x200004c0
 80018e8:	200004c8 	.word	0x200004c8
 80018ec:	20000350 	.word	0x20000350

080018f0 <moveCarStraight>:
        }
    }
}

void moveCarStraight(double distance)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0b00 	vstr	d0, [r7]
	distance = distance*75;
 80018fa:	a32d      	add	r3, pc, #180	; (adr r3, 80019b0 <moveCarStraight+0xc0>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2300 	strd	r2, r3, [r7]
//	pwmVal_servo = 124;
//	osDelay(100);
	pwmVal_servo = 146;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <moveCarStraight+0xa0>)
 8001912:	2292      	movs	r2, #146	; 0x92
 8001914:	801a      	strh	r2, [r3, #0]
//	osDelay(500);
	osDelay(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f007 f95c 	bl	8008bd4 <osDelay>
	e_brake = 0;
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <moveCarStraight+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <moveCarStraight+0xa8>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <moveCarStraight+0xac>)
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <moveCarStraight+0xb0>)
 800192c:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <moveCarStraight+0xb4>)
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <moveCarStraight+0xb0>)
 8001932:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <moveCarStraight+0xb8>)
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <moveCarStraight+0xb0>)
 8001938:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <moveCarStraight+0xbc>)
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <moveCarStraight+0xb0>)
 800193e:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <moveCarStraight+0xb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fded 	bl	8000524 <__aeabi_i2d>
 800194a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800194e:	f7fe fc9d 	bl	800028c <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f8fd 	bl	8000b58 <__aeabi_d2iz>
 800195e:	4603      	mov	r3, r0
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <moveCarStraight+0xb8>)
 8001962:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <moveCarStraight+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fddb 	bl	8000524 <__aeabi_i2d>
 800196e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001972:	f7fe fc8b 	bl	800028c <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f8eb 	bl	8000b58 <__aeabi_d2iz>
 8001982:	4603      	mov	r3, r0
 8001984:	4a09      	ldr	r2, [pc, #36]	; (80019ac <moveCarStraight+0xbc>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000464 	.word	0x20000464
 8001998:	20000460 	.word	0x20000460
 800199c:	20000468 	.word	0x20000468
 80019a0:	000124f8 	.word	0x000124f8
 80019a4:	2000046c 	.word	0x2000046c
 80019a8:	20000470 	.word	0x20000470
 80019ac:	20000474 	.word	0x20000474
 80019b0:	00000000 	.word	0x00000000
 80019b4:	4052c000 	.word	0x4052c000

080019b8 <moveCarRight>:
//	osDelay(300);
	osDelay(10);
}

void moveCarRight(double angle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	ed87 0b00 	vstr	d0, [r7]
//	pwmVal_servo = 230;
	pwmVal_servo = 225;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <moveCarRight+0x44>)
 80019c4:	22e1      	movs	r2, #225	; 0xe1
 80019c6:	801a      	strh	r2, [r3, #0]
//	osDelay(500);
	osDelay(50);
 80019c8:	2032      	movs	r0, #50	; 0x32
 80019ca:	f007 f903 	bl	8008bd4 <osDelay>
	e_brake = 0;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <moveCarRight+0x48>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <moveCarRight+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <moveCarRight+0x50>)
 80019dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019e4:	f7fe fc50 	bl	8000288 <__aeabi_dsub>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4906      	ldr	r1, [pc, #24]	; (8001a08 <moveCarRight+0x50>)
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
//	if(target_angle<=0)
//		target_angle = 0;
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000464 	.word	0x20000464
 8001a04:	20000460 	.word	0x20000460
 8001a08:	20000478 	.word	0x20000478

08001a0c <moveCarLeft>:

void moveCarLeft(double angle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = 98;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <moveCarLeft+0x44>)
 8001a18:	2262      	movs	r2, #98	; 0x62
 8001a1a:	801a      	strh	r2, [r3, #0]
//	osDelay(500);
	osDelay(50);
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f007 f8d9 	bl	8008bd4 <osDelay>
	e_brake = 0;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <moveCarLeft+0x48>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <moveCarLeft+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <moveCarLeft+0x50>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a38:	f7fe fc28 	bl	800028c <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <moveCarLeft+0x50>)
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000464 	.word	0x20000464
 8001a58:	20000460 	.word	0x20000460
 8001a5c:	20000478 	.word	0x20000478

08001a60 <moveCarSlideRight>:

void moveCarSlideRight(int forward){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	int sign;
	if(forward == 1){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <moveCarSlideRight+0x14>
		sign = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e002      	b.n	8001a7a <moveCarSlideRight+0x1a>
	}else{
		sign = -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	60fb      	str	r3, [r7, #12]
	}
	e_brake = 0;
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <moveCarSlideRight+0x138>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <moveCarSlideRight+0x13c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	moveCarStraight(2*sign);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd4a 	bl	8000524 <__aeabi_i2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	ec43 2b10 	vmov	d0, r2, r3
 8001a98:	f7ff ff2a 	bl	80018f0 <moveCarStraight>
//	moveCarStraight(0);
	while(finishCheck());
 8001a9c:	bf00      	nop
 8001a9e:	f000 fbfb 	bl	8002298 <finishCheck>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1fa      	bne.n	8001a9e <moveCarSlideRight+0x3e>
	osDelay(500);
 8001aa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aac:	f007 f892 	bl	8008bd4 <osDelay>
//	osDelay(50);
	times_acceptable=0;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <moveCarSlideRight+0x13c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
	moveCarRight(29*sign);
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd2e 	bl	8000524 <__aeabi_i2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	ec43 2b10 	vmov	d0, r2, r3
 8001ad0:	f7ff ff72 	bl	80019b8 <moveCarRight>
	while(finishCheck());
 8001ad4:	bf00      	nop
 8001ad6:	f000 fbdf 	bl	8002298 <finishCheck>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1fa      	bne.n	8001ad6 <moveCarSlideRight+0x76>
	osDelay(500);
 8001ae0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae4:	f007 f876 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <moveCarSlideRight+0x13c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10e      	bne.n	8001b12 <moveCarSlideRight+0xb2>
		moveCarLeft(28*sign);
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	ec43 2b10 	vmov	d0, r2, r3
 8001b0c:	f7ff ff7e 	bl	8001a0c <moveCarLeft>
 8001b10:	e00c      	b.n	8001b2c <moveCarSlideRight+0xcc>
	else
		moveCarLeft(31*sign);
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd02 	bl	8000524 <__aeabi_i2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b10 	vmov	d0, r2, r3
 8001b28:	f7ff ff70 	bl	8001a0c <moveCarLeft>
	while(finishCheck());
 8001b2c:	bf00      	nop
 8001b2e:	f000 fbb3 	bl	8002298 <finishCheck>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1fa      	bne.n	8001b2e <moveCarSlideRight+0xce>
//	osDelay(500);
	osDelay(50);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f007 f84b 	bl	8008bd4 <osDelay>
	pwmVal_servo = 120; //143
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <moveCarSlideRight+0x140>)
 8001b40:	2278      	movs	r2, #120	; 0x78
 8001b42:	801a      	strh	r2, [r3, #0]
	osDelay(500);
 8001b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b48:	f007 f844 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <moveCarSlideRight+0x13c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d109      	bne.n	8001b6c <moveCarSlideRight+0x10c>
		moveCarStraight(1*sign);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7fe fce3 	bl	8000524 <__aeabi_i2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ec43 2b10 	vmov	d0, r2, r3
 8001b66:	f7ff fec3 	bl	80018f0 <moveCarStraight>
 8001b6a:	e003      	b.n	8001b74 <moveCarSlideRight+0x114>
	else
		moveCarStraight(0);
 8001b6c:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001b90 <moveCarSlideRight+0x130>
 8001b70:	f7ff febe 	bl	80018f0 <moveCarStraight>
//	moveCarStraight();
	while(finishCheck());
 8001b74:	bf00      	nop
 8001b76:	f000 fb8f 	bl	8002298 <finishCheck>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1fa      	bne.n	8001b76 <moveCarSlideRight+0x116>
	osDelay(50);
 8001b80:	2032      	movs	r0, #50	; 0x32
 8001b82:	f007 f827 	bl	8008bd4 <osDelay>
//		times_acceptable=0;
//		moveCarStraight(10*sign);
//		while(finishCheck());
//		osDelay(500);
//	}
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
	...
 8001b98:	20000464 	.word	0x20000464
 8001b9c:	20000460 	.word	0x20000460
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <moveCarSlideLeft>:

void moveCarSlideLeft(int forward){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	int sign;
	if(forward == 1){
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <moveCarSlideLeft+0x14>
		sign = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e002      	b.n	8001bbe <moveCarSlideLeft+0x1a>
	}else{
		sign = -1;
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	60fb      	str	r3, [r7, #12]
	}
	e_brake = 0;
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <moveCarSlideLeft+0x158>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001bc4:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <moveCarSlideLeft+0x15c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	moveCarStraight(2*sign);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fca8 	bl	8000524 <__aeabi_i2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f7ff fe88 	bl	80018f0 <moveCarStraight>
	while(finishCheck());
 8001be0:	bf00      	nop
 8001be2:	f000 fb59 	bl	8002298 <finishCheck>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1fa      	bne.n	8001be2 <moveCarSlideLeft+0x3e>
	osDelay(50);
 8001bec:	2032      	movs	r0, #50	; 0x32
 8001bee:	f006 fff1 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <moveCarSlideLeft+0x15c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10d      	bne.n	8001c1a <moveCarSlideLeft+0x76>
		moveCarLeft(26*sign);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	221a      	movs	r2, #26
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	ec43 2b10 	vmov	d0, r2, r3
 8001c14:	f7ff fefa 	bl	8001a0c <moveCarLeft>
 8001c18:	e00d      	b.n	8001c36 <moveCarSlideLeft+0x92>
	else
		moveCarLeft(28*sign);
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc7d 	bl	8000524 <__aeabi_i2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ec43 2b10 	vmov	d0, r2, r3
 8001c32:	f7ff feeb 	bl	8001a0c <moveCarLeft>
	while(finishCheck());
 8001c36:	bf00      	nop
 8001c38:	f000 fb2e 	bl	8002298 <finishCheck>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1fa      	bne.n	8001c38 <moveCarSlideLeft+0x94>
	osDelay(50);
 8001c42:	2032      	movs	r0, #50	; 0x32
 8001c44:	f006 ffc6 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <moveCarSlideLeft+0x15c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10d      	bne.n	8001c70 <moveCarSlideLeft+0xcc>
		moveCarRight(33*sign);
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4613      	mov	r3, r2
 8001c58:	015b      	lsls	r3, r3, #5
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc61 	bl	8000524 <__aeabi_i2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	ec43 2b10 	vmov	d0, r2, r3
 8001c6a:	f7ff fea5 	bl	80019b8 <moveCarRight>
 8001c6e:	e00d      	b.n	8001c8c <moveCarSlideLeft+0xe8>
	else
		moveCarRight(28*sign);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc52 	bl	8000524 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	ec43 2b10 	vmov	d0, r2, r3
 8001c88:	f7ff fe96 	bl	80019b8 <moveCarRight>
	while(finishCheck());
 8001c8c:	bf00      	nop
 8001c8e:	f000 fb03 	bl	8002298 <finishCheck>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1fa      	bne.n	8001c8e <moveCarSlideLeft+0xea>
	osDelay(50);
 8001c98:	2032      	movs	r0, #50	; 0x32
 8001c9a:	f006 ff9b 	bl	8008bd4 <osDelay>
	pwmVal_servo = 120; //143
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <moveCarSlideLeft+0x160>)
 8001ca0:	2278      	movs	r2, #120	; 0x78
 8001ca2:	801a      	strh	r2, [r3, #0]
	osDelay(500);
 8001ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca8:	f006 ff94 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <moveCarSlideLeft+0x15c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d109      	bne.n	8001ccc <moveCarSlideLeft+0x128>
		moveCarStraight(1*sign);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7fe fc33 	bl	8000524 <__aeabi_i2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ec43 2b10 	vmov	d0, r2, r3
 8001cc6:	f7ff fe13 	bl	80018f0 <moveCarStraight>
 8001cca:	e00c      	b.n	8001ce6 <moveCarSlideLeft+0x142>
	else
		moveCarStraight(3*sign);
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc25 	bl	8000524 <__aeabi_i2d>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b10 	vmov	d0, r2, r3
 8001ce2:	f7ff fe05 	bl	80018f0 <moveCarStraight>
	while(finishCheck());
 8001ce6:	bf00      	nop
 8001ce8:	f000 fad6 	bl	8002298 <finishCheck>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1fa      	bne.n	8001ce8 <moveCarSlideLeft+0x144>
//		times_acceptable=0;
//		moveCarStraight(10*sign);
//		while(finishCheck());
//		osDelay(500);
//	}
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000464 	.word	0x20000464
 8001d00:	20000460 	.word	0x20000460
 8001d04:	20000000 	.word	0x20000000

08001d08 <moveCarRight90>:

void moveCarRight90(double angle, int dir)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d12:	6078      	str	r0, [r7, #4]
	e_brake = 0;
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <moveCarRight90+0x138>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
	if(angle<0){
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d2a:	f7fe fed7 	bl	8000adc <__aeabi_dcmplt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <moveCarRight90+0x32>
		sign=-1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	617b      	str	r3, [r7, #20]
	}
	pwmVal_servo = 146; //146
 8001d3a:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <moveCarRight90+0x13c>)
 8001d3c:	2292      	movs	r2, #146	; 0x92
 8001d3e:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <moveCarRight90+0x140>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
	if(dir>0)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	dd04      	ble.n	8001d56 <moveCarRight90+0x4e>
//		moveCarStraight(10);
		moveCarStraight(0);
 8001d4c:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001e20 <moveCarRight90+0x118>
 8001d50:	f7ff fdce 	bl	80018f0 <moveCarStraight>
 8001d54:	e003      	b.n	8001d5e <moveCarRight90+0x56>
	else
		moveCarStraight(3);///
 8001d56:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001e28 <moveCarRight90+0x120>
 8001d5a:	f7ff fdc9 	bl	80018f0 <moveCarStraight>
	while(finishCheck());
 8001d5e:	bf00      	nop
 8001d60:	f000 fa9a 	bl	8002298 <finishCheck>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1fa      	bne.n	8001d60 <moveCarRight90+0x58>
	osDelay(500);
 8001d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6e:	f006 ff31 	bl	8008bd4 <osDelay>
//	osDelay(50);
	times_acceptable=0;
 8001d72:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <moveCarRight90+0x140>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
	if(sign==1)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d111      	bne.n	8001da2 <moveCarRight90+0x9a>
		moveCarRight(angle-0.5);
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <moveCarRight90+0x144>)
 8001d84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d88:	f7fe fa7e 	bl	8000288 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	ec43 2b17 	vmov	d7, r2, r3
 8001d94:	eeb0 0a47 	vmov.f32	s0, s14
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	f7ff fe0c 	bl	80019b8 <moveCarRight>
 8001da0:	e003      	b.n	8001daa <moveCarRight90+0xa2>
	else
		moveCarRight(angle);
 8001da2:	ed97 0b02 	vldr	d0, [r7, #8]
 8001da6:	f7ff fe07 	bl	80019b8 <moveCarRight>
	while(finishCheck());
 8001daa:	bf00      	nop
 8001dac:	f000 fa74 	bl	8002298 <finishCheck>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1fa      	bne.n	8001dac <moveCarRight90+0xa4>
	osDelay(50);
 8001db6:	2032      	movs	r0, #50	; 0x32
 8001db8:	f006 ff0c 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <moveCarRight90+0x140>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
	if(dir>0)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	dd12      	ble.n	8001dee <moveCarRight90+0xe6>
	{
		pwmVal_servo = 110; //143
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <moveCarRight90+0x13c>)
 8001dca:	226e      	movs	r2, #110	; 0x6e
 8001dcc:	801a      	strh	r2, [r3, #0]
		osDelay(1000);
 8001dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd2:	f006 feff 	bl	8008bd4 <osDelay>
		pwmVal_servo = 148;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <moveCarRight90+0x13c>)
 8001dd8:	2294      	movs	r2, #148	; 0x94
 8001dda:	801a      	strh	r2, [r3, #0]
		osDelay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f006 fef8 	bl	8008bd4 <osDelay>
		moveCarStraight(-2);
 8001de4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001e30 <moveCarRight90+0x128>
 8001de8:	f7ff fd82 	bl	80018f0 <moveCarStraight>
 8001dec:	e00a      	b.n	8001e04 <moveCarRight90+0xfc>
	}
	else
	{
		pwmVal_servo = 120; //143
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <moveCarRight90+0x13c>)
 8001df0:	2278      	movs	r2, #120	; 0x78
 8001df2:	801a      	strh	r2, [r3, #0]
		osDelay(1000);
 8001df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001df8:	f006 feec 	bl	8008bd4 <osDelay>
		moveCarStraight(-7);
 8001dfc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001e38 <moveCarRight90+0x130>
 8001e00:	f7ff fd76 	bl	80018f0 <moveCarStraight>
	}
	while(finishCheck());
 8001e04:	bf00      	nop
 8001e06:	f000 fa47 	bl	8002298 <finishCheck>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1fa      	bne.n	8001e06 <moveCarRight90+0xfe>
//	osDelay(500);
	osDelay(500);
 8001e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e14:	f006 fede 	bl	8008bd4 <osDelay>
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
	...
 8001e2c:	40080000 	.word	0x40080000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	c0000000 	.word	0xc0000000
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	c01c0000 	.word	0xc01c0000
 8001e40:	20000464 	.word	0x20000464
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000460 	.word	0x20000460
 8001e4c:	3fe00000 	.word	0x3fe00000

08001e50 <moveCarLeft90>:

void moveCarLeft90(double angle, int dir)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e5a:	6078      	str	r0, [r7, #4]
	e_brake = 0;
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <moveCarLeft90+0xe8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
	if(angle<0){
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e72:	f7fe fe33 	bl	8000adc <__aeabi_dcmplt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <moveCarLeft90+0x32>
		sign=-1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	617b      	str	r3, [r7, #20]
	}
	pwmVal_servo = 146; //146
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <moveCarLeft90+0xec>)
 8001e84:	2292      	movs	r2, #146	; 0x92
 8001e86:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <moveCarLeft90+0xf0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
	if(dir>0)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dd04      	ble.n	8001e9e <moveCarLeft90+0x4e>
		moveCarStraight(1);
 8001e94:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001f18 <moveCarLeft90+0xc8>
 8001e98:	f7ff fd2a 	bl	80018f0 <moveCarStraight>
 8001e9c:	e003      	b.n	8001ea6 <moveCarLeft90+0x56>
	else
		moveCarStraight(2);
 8001e9e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001f20 <moveCarLeft90+0xd0>
 8001ea2:	f7ff fd25 	bl	80018f0 <moveCarStraight>
	while(finishCheck());
 8001ea6:	bf00      	nop
 8001ea8:	f000 f9f6 	bl	8002298 <finishCheck>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1fa      	bne.n	8001ea8 <moveCarLeft90+0x58>
	osDelay(500);
 8001eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb6:	f006 fe8d 	bl	8008bd4 <osDelay>
//	osDelay(50);
	times_acceptable=0;
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <moveCarLeft90+0xf0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
	moveCarLeft(angle);
 8001ec0:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ec4:	f7ff fda2 	bl	8001a0c <moveCarLeft>
	while(finishCheck());
 8001ec8:	bf00      	nop
 8001eca:	f000 f9e5 	bl	8002298 <finishCheck>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1fa      	bne.n	8001eca <moveCarLeft90+0x7a>
	osDelay(50);
 8001ed4:	2032      	movs	r0, #50	; 0x32
 8001ed6:	f006 fe7d 	bl	8008bd4 <osDelay>
	times_acceptable=0;
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <moveCarLeft90+0xf0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
	if(dir>0)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	dd04      	ble.n	8001ef0 <moveCarLeft90+0xa0>
	{
//		pwmVal_servo = 120; //143
//		osDelay(1000);

		moveCarStraight(-2);
 8001ee6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001f28 <moveCarLeft90+0xd8>
 8001eea:	f7ff fd01 	bl	80018f0 <moveCarStraight>
 8001eee:	e003      	b.n	8001ef8 <moveCarLeft90+0xa8>
	}
	else
	{
//		pwmVal_servo = 120; //143
//		osDelay(1000);
		moveCarStraight(-4);
 8001ef0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001f30 <moveCarLeft90+0xe0>
 8001ef4:	f7ff fcfc 	bl	80018f0 <moveCarStraight>
	}
	while(finishCheck());
 8001ef8:	bf00      	nop
 8001efa:	f000 f9cd 	bl	8002298 <finishCheck>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1fa      	bne.n	8001efa <moveCarLeft90+0xaa>
	osDelay(500);
 8001f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f08:	f006 fe64 	bl	8008bd4 <osDelay>
//	osDelay(50);
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	3ff00000 	.word	0x3ff00000
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40000000 	.word	0x40000000
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	c0000000 	.word	0xc0000000
 8001f30:	00000000 	.word	0x00000000
 8001f34:	c0100000 	.word	0xc0100000
 8001f38:	20000464 	.word	0x20000464
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000460 	.word	0x20000460

08001f44 <PIDConfigReset>:
	  break;
	}
  }
}

void PIDConfigReset(PIDConfig * cfg) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <PID_SPEED_1>:

void PID_SPEED_1(PIDConfig *cfg, int error, int correction, int8_t dir)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	70fb      	strb	r3, [r7, #3]
	correction = (cfg)->Kp * error + (cfg)->Ki * (cfg)->ekSum + (cfg)->Kd * (error - (cfg)->ek1);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fb4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc4:	ee17 3a90 	vmov	r3, s15
 8001fc8:	607b      	str	r3, [r7, #4]
	(cfg)->ek1 = error;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edc3 7a03 	vstr	s15, [r3, #12]
	(cfg)->ekSum += error;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	edc3 7a04 	vstr	s15, [r3, #16]
	uint8_t hello [20] = "Hello World!\0";
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <PID_SPEED_1+0x118>)
 8001ff6:	f107 0414 	add.w	r4, r7, #20
 8001ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffc:	c407      	stmia	r4!, {r0, r1, r2}
 8001ffe:	8023      	strh	r3, [r4, #0]
 8002000:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	809a      	strh	r2, [r3, #4]
	sprintf(hello, "Corr: %d\0", (int)correction);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	491c      	ldr	r1, [pc, #112]	; (8002084 <PID_SPEED_1+0x11c>)
 8002012:	4618      	mov	r0, r3
 8002014:	f00a fa7a 	bl	800c50c <siprintf>
	OLED_ShowString(10, 30, hello);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	461a      	mov	r2, r3
 800201e:	211e      	movs	r1, #30
 8002020:	200a      	movs	r0, #10
 8002022:	f009 fc9f 	bl	800b964 <OLED_ShowString>
	correction = correction > 700 ? 700 : (correction < -700 ? -700 : correction);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800202c:	dc05      	bgt.n	800203a <PID_SPEED_1+0xd2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <PID_SPEED_1+0x120>)
 8002032:	4293      	cmp	r3, r2
 8002034:	bfb8      	it	lt
 8002036:	4613      	movlt	r3, r2
 8002038:	e001      	b.n	800203e <PID_SPEED_1+0xd6>
 800203a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800203e:	607b      	str	r3, [r7, #4]
//	correction = correction > 400 ? 400 : (correction < -400 ? -400 : correction);
//	correction = correction > 400 ? 800 : (correction < -400 ? -0 : abs(correction*8));
	pwmVal_L = (3000 + correction*dir);
 8002040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	b29b      	uxth	r3, r3
 800204a:	fb12 f303 	smulbb	r3, r2, r3
 800204e:	b29b      	uxth	r3, r3
 8002050:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <PID_SPEED_1+0x124>)
 8002058:	801a      	strh	r2, [r3, #0]
	pwmVal_R = (3000 - correction*dir);
 800205a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	b29b      	uxth	r3, r3
 8002064:	fb12 f303 	smulbb	r3, r2, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800206e:	3308      	adds	r3, #8
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <PID_SPEED_1+0x128>)
 8002074:	801a      	strh	r2, [r3, #0]
//	pwmVal_L = 2000;
//	pwmVal_R = 2000;
}
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	; 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	0800e948 	.word	0x0800e948
 8002084:	0800e93c 	.word	0x0800e93c
 8002088:	fffffd44 	.word	0xfffffd44
 800208c:	2000045e 	.word	0x2000045e
 8002090:	2000045c 	.word	0x2000045c

08002094 <PID_SPEED_3>:
	newDutyL = 2300 + correction*dir;
	newDutyR = 2300 - correction*dir;
}

void PID_SPEED_3(PIDConfig *cfg, int error, int correction, int8_t dir)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	70fb      	strb	r3, [r7, #3]
	correction = (cfg)->Kp * error + (cfg)->Ki * (cfg)->ekSum + (cfg)->Kd * (error - (cfg)->ek1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	edd3 7a04 	vldr	s15, [r3, #16]
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80020e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f0:	ee17 3a90 	vmov	r3, s15
 80020f4:	607b      	str	r3, [r7, #4]
	(cfg)->ek1 = error;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edc3 7a03 	vstr	s15, [r3, #12]
	(cfg)->ekSum += error;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	ed93 7a04 	vldr	s14, [r3, #16]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edc3 7a04 	vstr	s15, [r3, #16]
	correction = correction > 700 ? 700 : (correction < -700 ? -700 : correction);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002126:	dc05      	bgt.n	8002134 <PID_SPEED_3+0xa0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <PID_SPEED_3+0xe8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bfb8      	it	lt
 8002130:	4613      	movlt	r3, r2
 8002132:	e001      	b.n	8002138 <PID_SPEED_3+0xa4>
 8002134:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002138:	607b      	str	r3, [r7, #4]
//	correction = correction > 400 ? 400 : (correction < -400 ? -400 : correction);
	newDutyL = 1000 + correction*dir;
 800213a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b29b      	uxth	r3, r3
 8002144:	fb12 f303 	smulbb	r3, r2, r3
 8002148:	b29b      	uxth	r3, r3
 800214a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <PID_SPEED_3+0xec>)
 8002152:	801a      	strh	r2, [r3, #0]
	newDutyR = 1000 - correction*dir;
 8002154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	fb12 f303 	smulbb	r3, r2, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <PID_SPEED_3+0xf0>)
 800216c:	801a      	strh	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	fffffd44 	.word	0xfffffd44
 8002180:	200004a0 	.word	0x200004a0
 8002184:	200004a2 	.word	0x200004a2

08002188 <PID_Angle>:
//		return 0;
//	}
}

int PID_Angle(double errord, int right)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002192:	6078      	str	r0, [r7, #4]
	int error = (int)(errord*10);
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <PID_Angle+0x104>)
 800219a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219e:	f7fe fa2b 	bl	80005f8 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fcd5 	bl	8000b58 <__aeabi_d2iz>
 80021ae:	4603      	mov	r3, r0
 80021b0:	617b      	str	r3, [r7, #20]
	if(right){//rightMotor
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d018      	beq.n	80021ea <PID_Angle+0x62>
		if(error>0){//go forward
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	dd0a      	ble.n	80021d4 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80021be:	2201      	movs	r2, #1
 80021c0:	2110      	movs	r1, #16
 80021c2:	4833      	ldr	r0, [pc, #204]	; (8002290 <PID_Angle+0x108>)
 80021c4:	f001 ff06 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4830      	ldr	r0, [pc, #192]	; (8002290 <PID_Angle+0x108>)
 80021ce:	f001 ff01 	bl	8003fd4 <HAL_GPIO_WritePin>
 80021d2:	e022      	b.n	800221a <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 80021d4:	2200      	movs	r2, #0
 80021d6:	2110      	movs	r1, #16
 80021d8:	482d      	ldr	r0, [pc, #180]	; (8002290 <PID_Angle+0x108>)
 80021da:	f001 fefb 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	2120      	movs	r1, #32
 80021e2:	482b      	ldr	r0, [pc, #172]	; (8002290 <PID_Angle+0x108>)
 80021e4:	f001 fef6 	bl	8003fd4 <HAL_GPIO_WritePin>
 80021e8:	e017      	b.n	800221a <PID_Angle+0x92>
		}
	}else{//leftMotor
		if(error<0){//go forward
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da0a      	bge.n	8002206 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 80021f0:	2201      	movs	r2, #1
 80021f2:	2108      	movs	r1, #8
 80021f4:	4826      	ldr	r0, [pc, #152]	; (8002290 <PID_Angle+0x108>)
 80021f6:	f001 feed 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2104      	movs	r1, #4
 80021fe:	4824      	ldr	r0, [pc, #144]	; (8002290 <PID_Angle+0x108>)
 8002200:	f001 fee8 	bl	8003fd4 <HAL_GPIO_WritePin>
 8002204:	e009      	b.n	800221a <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8002206:	2200      	movs	r2, #0
 8002208:	2108      	movs	r1, #8
 800220a:	4821      	ldr	r0, [pc, #132]	; (8002290 <PID_Angle+0x108>)
 800220c:	f001 fee2 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	2104      	movs	r1, #4
 8002214:	481e      	ldr	r0, [pc, #120]	; (8002290 <PID_Angle+0x108>)
 8002216:	f001 fedd 	bl	8003fd4 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	bfb8      	it	lt
 8002220:	425b      	neglt	r3, r3
 8002222:	617b      	str	r3, [r7, #20]
	if(error > 300){
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800222a:	dd02      	ble.n	8002232 <PID_Angle+0xaa>
		return 3000;
 800222c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002230:	e028      	b.n	8002284 <PID_Angle+0xfc>
	}else if(error > 200){
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2bc8      	cmp	r3, #200	; 0xc8
 8002236:	dd02      	ble.n	800223e <PID_Angle+0xb6>
		return 2000;
 8002238:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800223c:	e022      	b.n	8002284 <PID_Angle+0xfc>
	}else if(error > 150){
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b96      	cmp	r3, #150	; 0x96
 8002242:	dd02      	ble.n	800224a <PID_Angle+0xc2>
		return 1600;
 8002244:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002248:	e01c      	b.n	8002284 <PID_Angle+0xfc>
	}else if(error > 100){
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	dd02      	ble.n	8002256 <PID_Angle+0xce>
		return 1400;
 8002250:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002254:	e016      	b.n	8002284 <PID_Angle+0xfc>
	}else if(error >10){
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b0a      	cmp	r3, #10
 800225a:	dd02      	ble.n	8002262 <PID_Angle+0xda>
		return 1000;
 800225c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002260:	e010      	b.n	8002284 <PID_Angle+0xfc>
	}else if(error >=2){
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	dd07      	ble.n	8002278 <PID_Angle+0xf0>
		times_acceptable++;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <PID_Angle+0x10c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <PID_Angle+0x10c>)
 8002270:	6013      	str	r3, [r2, #0]
		return 600;
 8002272:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002276:	e005      	b.n	8002284 <PID_Angle+0xfc>
	}else{
		times_acceptable++;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <PID_Angle+0x10c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <PID_Angle+0x10c>)
 8002280:	6013      	str	r3, [r2, #0]
		return 0;
 8002282:	2300      	movs	r3, #0
	}
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40240000 	.word	0x40240000
 8002290:	40020000 	.word	0x40020000
 8002294:	20000460 	.word	0x20000460

08002298 <finishCheck>:

int finishCheck(){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	if (times_acceptable > 20){
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <finishCheck+0x48>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b14      	cmp	r3, #20
 80022a2:	dd19      	ble.n	80022d8 <finishCheck+0x40>
		e_brake = 1;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <finishCheck+0x4c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <finishCheck+0x50>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	801a      	strh	r2, [r3, #0]
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <finishCheck+0x50>)
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <finishCheck+0x54>)
 80022b6:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <finishCheck+0x58>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <finishCheck+0x5c>)
 80022be:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <finishCheck+0x60>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <finishCheck+0x64>)
 80022c6:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <finishCheck+0x48>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
//	    osDelay(300);
		osDelay(50);
 80022ce:	2032      	movs	r0, #50	; 0x32
 80022d0:	f006 fc80 	bl	8008bd4 <osDelay>
		return 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <finishCheck+0x42>
	}
	return 1;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000460 	.word	0x20000460
 80022e4:	20000464 	.word	0x20000464
 80022e8:	2000045c 	.word	0x2000045c
 80022ec:	2000045e 	.word	0x2000045e
 80022f0:	2000046c 	.word	0x2000046c
 80022f4:	20000474 	.word	0x20000474
 80022f8:	20000468 	.word	0x20000468
 80022fc:	20000470 	.word	0x20000470

08002300 <readByte>:


void readByte(uint8_t addr, uint8_t* data){
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af02      	add	r7, sp, #8
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <readByte+0x4c>)
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress<<1, gyroBuffer, 1, 10);
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <readByte+0x50>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	b299      	uxth	r1, r3
 800231c:	230a      	movs	r3, #10
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <readByte+0x4c>)
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <readByte+0x54>)
 8002326:	f001 ffb3 	bl	8004290 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress<<1, data, 2, 20);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <readByte+0x50>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	b299      	uxth	r1, r3
 8002334:	2314      	movs	r3, #20
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2302      	movs	r3, #2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <readByte+0x54>)
 800233e:	f002 f8a5 	bl	800448c <HAL_I2C_Master_Receive>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000488 	.word	0x20000488
 8002350:	20000002 	.word	0x20000002
 8002354:	20000224 	.word	0x20000224

08002358 <readPID>:

void readPID(){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,ICM20948__I2C_SLAVE_ADDRESS_1 << 1, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, I2C_MEMADD_SIZE_8BIT, readGyroZData, 2, 0xFFFF);
 800235e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	2302      	movs	r3, #2
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <readPID+0x3c>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2301      	movs	r3, #1
 800236e:	2237      	movs	r2, #55	; 0x37
 8002370:	21d0      	movs	r1, #208	; 0xd0
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <readPID+0x40>)
 8002374:	f002 fbaa 	bl	8004acc <HAL_I2C_Mem_Read>
	gyroZ = readGyroZData[0] << 8 | readGyroZData[1];
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <readPID+0x3c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <readPID+0x3c>)
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21a      	sxth	r2, r3
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <readPID+0x44>)
 800238c:	801a      	strh	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200004a4 	.word	0x200004a4
 8002398:	20000224 	.word	0x20000224
 800239c:	200004a6 	.word	0x200004a6

080023a0 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	4603      	mov	r3, r0
 80023a8:	460a      	mov	r2, r1
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <writeByte+0x3c>)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <writeByte+0x3c>)
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <writeByte+0x40>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b299      	uxth	r1, r3
 80023c6:	2314      	movs	r3, #20
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2302      	movs	r3, #2
 80023cc:	4a03      	ldr	r2, [pc, #12]	; (80023dc <writeByte+0x3c>)
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <writeByte+0x44>)
 80023d0:	f001 ff5e 	bl	8004290 <HAL_I2C_Master_Transmit>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000488 	.word	0x20000488
 80023e0:	20000002 	.word	0x20000002
 80023e4:	20000224 	.word	0x20000224

080023e8 <setDirection>:

void setDirection(int error, int right)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
	if(right){//rightMotor
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d018      	beq.n	800242a <setDirection+0x42>
		if(error>0){//go forward
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	dd0a      	ble.n	8002414 <setDirection+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80023fe:	2201      	movs	r2, #1
 8002400:	2110      	movs	r1, #16
 8002402:	4818      	ldr	r0, [pc, #96]	; (8002464 <setDirection+0x7c>)
 8002404:	f001 fde6 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	2120      	movs	r1, #32
 800240c:	4815      	ldr	r0, [pc, #84]	; (8002464 <setDirection+0x7c>)
 800240e:	f001 fde1 	bl	8003fd4 <HAL_GPIO_WritePin>
		}else{//go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
		}
	}
}
 8002412:	e022      	b.n	800245a <setDirection+0x72>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002414:	2200      	movs	r2, #0
 8002416:	2110      	movs	r1, #16
 8002418:	4812      	ldr	r0, [pc, #72]	; (8002464 <setDirection+0x7c>)
 800241a:	f001 fddb 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800241e:	2201      	movs	r2, #1
 8002420:	2120      	movs	r1, #32
 8002422:	4810      	ldr	r0, [pc, #64]	; (8002464 <setDirection+0x7c>)
 8002424:	f001 fdd6 	bl	8003fd4 <HAL_GPIO_WritePin>
}
 8002428:	e017      	b.n	800245a <setDirection+0x72>
		if(error>0){//go forward
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	dd0a      	ble.n	8002446 <setDirection+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8002430:	2201      	movs	r2, #1
 8002432:	2108      	movs	r1, #8
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <setDirection+0x7c>)
 8002436:	f001 fdcd 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	2104      	movs	r1, #4
 800243e:	4809      	ldr	r0, [pc, #36]	; (8002464 <setDirection+0x7c>)
 8002440:	f001 fdc8 	bl	8003fd4 <HAL_GPIO_WritePin>
}
 8002444:	e009      	b.n	800245a <setDirection+0x72>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8002446:	2200      	movs	r2, #0
 8002448:	2108      	movs	r1, #8
 800244a:	4806      	ldr	r0, [pc, #24]	; (8002464 <setDirection+0x7c>)
 800244c:	f001 fdc2 	bl	8003fd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2104      	movs	r1, #4
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <setDirection+0x7c>)
 8002456:	f001 fdbd 	bl	8003fd4 <HAL_GPIO_WritePin>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40020000 	.word	0x40020000

08002468 <StraightLineMove>:

void StraightLineMove(int error1, int error2) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	error1 = abs(error1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	bfb8      	it	lt
 8002478:	425b      	neglt	r3, r3
 800247a:	607b      	str	r3, [r7, #4]
	error2 = abs(error2);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	bfb8      	it	lt
 8002482:	425b      	neglt	r3, r3
 8002484:	603b      	str	r3, [r7, #0]
	int error = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
	if(error1 <= error2)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	dc02      	bgt.n	8002498 <StraightLineMove+0x30>
		error = error1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e001      	b.n	800249c <StraightLineMove+0x34>
	else
		error = error2;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	60fb      	str	r3, [r7, #12]
	if(error > 500){
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024a2:	dd37      	ble.n	8002514 <StraightLineMove+0xac>
		angleNow = 0; gyroZ = 0; // reset angle for PID
 80024a4:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <StraightLineMove+0x174>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <StraightLineMove+0x178>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pid_1);
 80024b2:	484c      	ldr	r0, [pc, #304]	; (80025e4 <StraightLineMove+0x17c>)
 80024b4:	f7ff fd46 	bl	8001f44 <PIDConfigReset>
		readPID(); // polling
 80024b8:	f7ff ff4e 	bl	8002358 <readPID>
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <StraightLineMove+0x180>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d101      	bne.n	80024ce <StraightLineMove+0x66>
 80024ca:	2201      	movs	r2, #1
 80024cc:	e001      	b.n	80024d2 <StraightLineMove+0x6a>
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <StraightLineMove+0x184>)
 80024d4:	701a      	strb	r2, [r3, #0]
//		angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
//		angleNow += ((gyroZ >= -50 && gyroZ <= 0) ? 0 : gyroZ);
		angleNow += gyroZ;
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <StraightLineMove+0x178>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <StraightLineMove+0x174>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <StraightLineMove+0x174>)
 80024f0:	edc3 7a00 	vstr	s15, [r3]

		PID_SPEED_1(&pid_1, angleNow, correction, dir);
 80024f4:	4b39      	ldr	r3, [pc, #228]	; (80025dc <StraightLineMove+0x174>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <StraightLineMove+0x188>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <StraightLineMove+0x184>)
 8002504:	f993 3000 	ldrsb.w	r3, [r3]
 8002508:	ee17 1a90 	vmov	r1, s15
 800250c:	4835      	ldr	r0, [pc, #212]	; (80025e4 <StraightLineMove+0x17c>)
 800250e:	f7ff fd2b 	bl	8001f68 <PID_SPEED_1>
//	angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
//
//	PID_SPEED(&pidC, angleNow, correction, dir, newDutyL, newDutyR);
//	pwmVal_R = newDutyL;
//	pwmVal_R = newDutyR;
}
 8002512:	e05e      	b.n	80025d2 <StraightLineMove+0x16a>
	else if(error>=50){
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b31      	cmp	r3, #49	; 0x31
 8002518:	dd3f      	ble.n	800259a <StraightLineMove+0x132>
		angleNow = 0; gyroZ = 0; // reset angle for PID
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <StraightLineMove+0x174>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <StraightLineMove+0x178>)
 8002524:	2200      	movs	r2, #0
 8002526:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pid_3);
 8002528:	4832      	ldr	r0, [pc, #200]	; (80025f4 <StraightLineMove+0x18c>)
 800252a:	f7ff fd0b 	bl	8001f44 <PIDConfigReset>
		readPID(); // polling
 800252e:	f7ff ff13 	bl	8002358 <readPID>
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <StraightLineMove+0x180>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b10      	cmp	r3, #16
 800253e:	d101      	bne.n	8002544 <StraightLineMove+0xdc>
 8002540:	2201      	movs	r2, #1
 8002542:	e001      	b.n	8002548 <StraightLineMove+0xe0>
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <StraightLineMove+0x184>)
 800254a:	701a      	strb	r2, [r3, #0]
		angleNow += gyroZ;
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <StraightLineMove+0x178>)
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <StraightLineMove+0x174>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <StraightLineMove+0x174>)
 8002566:	edc3 7a00 	vstr	s15, [r3]
		PID_SPEED_3(&pid_3, angleNow, correction, dir);
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <StraightLineMove+0x174>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <StraightLineMove+0x188>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <StraightLineMove+0x184>)
 800257a:	f993 3000 	ldrsb.w	r3, [r3]
 800257e:	ee17 1a90 	vmov	r1, s15
 8002582:	481c      	ldr	r0, [pc, #112]	; (80025f4 <StraightLineMove+0x18c>)
 8002584:	f7ff fd86 	bl	8002094 <PID_SPEED_3>
		pwmVal_L = newDutyL;
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <StraightLineMove+0x190>)
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <StraightLineMove+0x194>)
 800258e:	801a      	strh	r2, [r3, #0]
		pwmVal_R = newDutyR;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <StraightLineMove+0x198>)
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <StraightLineMove+0x19c>)
 8002596:	801a      	strh	r2, [r3, #0]
}
 8002598:	e01b      	b.n	80025d2 <StraightLineMove+0x16a>
	else if(error>=1){
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	dd0c      	ble.n	80025ba <StraightLineMove+0x152>
		times_acceptable++;
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <StraightLineMove+0x1a0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <StraightLineMove+0x1a0>)
 80025a8:	6013      	str	r3, [r2, #0]
		pwmVal_R = pwmVal_L = 0;
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <StraightLineMove+0x194>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <StraightLineMove+0x194>)
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <StraightLineMove+0x19c>)
 80025b6:	801a      	strh	r2, [r3, #0]
}
 80025b8:	e00b      	b.n	80025d2 <StraightLineMove+0x16a>
		pwmVal_R = pwmVal_L = 0;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <StraightLineMove+0x194>)
 80025bc:	2200      	movs	r2, #0
 80025be:	801a      	strh	r2, [r3, #0]
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <StraightLineMove+0x194>)
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <StraightLineMove+0x19c>)
 80025c6:	801a      	strh	r2, [r3, #0]
		times_acceptable++;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <StraightLineMove+0x1a0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <StraightLineMove+0x1a0>)
 80025d0:	6013      	str	r3, [r2, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200004a8 	.word	0x200004a8
 80025e0:	200004a6 	.word	0x200004a6
 80025e4:	20000004 	.word	0x20000004
 80025e8:	200002c0 	.word	0x200002c0
 80025ec:	20000003 	.word	0x20000003
 80025f0:	2000049c 	.word	0x2000049c
 80025f4:	20000018 	.word	0x20000018
 80025f8:	200004a0 	.word	0x200004a0
 80025fc:	2000045e 	.word	0x2000045e
 8002600:	200004a2 	.word	0x200004a2
 8002604:	2000045c 	.word	0x2000045c
 8002608:	20000460 	.word	0x20000460

0800260c <gyroInit>:

void gyroInit(){
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8002610:	2100      	movs	r1, #0
 8002612:	2006      	movs	r0, #6
 8002614:	f7ff fec4 	bl	80023a0 <writeByte>
	osDelay(10);
 8002618:	200a      	movs	r0, #10
 800261a:	f006 fadb 	bl	8008bd4 <osDelay>
	writeByte(0x03, 0x80);
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	2003      	movs	r0, #3
 8002622:	f7ff febd 	bl	80023a0 <writeByte>
	osDelay(10);
 8002626:	200a      	movs	r0, #10
 8002628:	f006 fad4 	bl	8008bd4 <osDelay>
	writeByte(0x07, 0x07);
 800262c:	2107      	movs	r1, #7
 800262e:	2007      	movs	r0, #7
 8002630:	f7ff feb6 	bl	80023a0 <writeByte>
	osDelay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f006 facd 	bl	8008bd4 <osDelay>
	writeByte(0x06, 0x01);
 800263a:	2101      	movs	r1, #1
 800263c:	2006      	movs	r0, #6
 800263e:	f7ff feaf 	bl	80023a0 <writeByte>
	osDelay(10);
 8002642:	200a      	movs	r0, #10
 8002644:	f006 fac6 	bl	8008bd4 <osDelay>
	writeByte(0x7F, 0x20);
 8002648:	2120      	movs	r1, #32
 800264a:	207f      	movs	r0, #127	; 0x7f
 800264c:	f7ff fea8 	bl	80023a0 <writeByte>
	osDelay(10);
 8002650:	200a      	movs	r0, #10
 8002652:	f006 fabf 	bl	8008bd4 <osDelay>
	writeByte(0x01, 0x2F);
 8002656:	212f      	movs	r1, #47	; 0x2f
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff fea1 	bl	80023a0 <writeByte>
	osDelay(10);
 800265e:	200a      	movs	r0, #10
 8002660:	f006 fab8 	bl	8008bd4 <osDelay>
	writeByte(0x0, 0x00);
 8002664:	2100      	movs	r1, #0
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fe9a 	bl	80023a0 <writeByte>
	osDelay(10);
 800266c:	200a      	movs	r0, #10
 800266e:	f006 fab1 	bl	8008bd4 <osDelay>
	writeByte(0x7F, 0x00);
 8002672:	2100      	movs	r1, #0
 8002674:	207f      	movs	r0, #127	; 0x7f
 8002676:	f7ff fe93 	bl	80023a0 <writeByte>
	osDelay(10);
 800267a:	200a      	movs	r0, #10
 800267c:	f006 faaa 	bl	8008bd4 <osDelay>
	writeByte(0x07, 0x00);
 8002680:	2100      	movs	r1, #0
 8002682:	2007      	movs	r0, #7
 8002684:	f7ff fe8c 	bl	80023a0 <writeByte>
	osDelay(10);
 8002688:	200a      	movs	r0, #10
 800268a:	f006 faa3 	bl	8008bd4 <osDelay>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	0000      	movs	r0, r0
 8002694:	0000      	movs	r0, r0
	...

08002698 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 80026a0:	4b97      	ldr	r3, [pc, #604]	; (8002900 <StartMotorTask+0x268>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 80026a6:	4b97      	ldr	r3, [pc, #604]	; (8002904 <StartMotorTask+0x26c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]
	int straightCorrection=0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80026b0:	2100      	movs	r1, #0
 80026b2:	4895      	ldr	r0, [pc, #596]	; (8002908 <StartMotorTask+0x270>)
 80026b4:	f003 fe04 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80026b8:	2104      	movs	r1, #4
 80026ba:	4893      	ldr	r0, [pc, #588]	; (8002908 <StartMotorTask+0x270>)
 80026bc:	f003 fe00 	bl	80062c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80026c0:	210c      	movs	r1, #12
 80026c2:	4892      	ldr	r0, [pc, #584]	; (800290c <StartMotorTask+0x274>)
 80026c4:	f003 fdfc 	bl	80062c0 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 146; //Centre
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <StartMotorTask+0x274>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2292      	movs	r2, #146	; 0x92
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80026d0:	2201      	movs	r2, #1
 80026d2:	2110      	movs	r1, #16
 80026d4:	488e      	ldr	r0, [pc, #568]	; (8002910 <StartMotorTask+0x278>)
 80026d6:	f001 fc7d 	bl	8003fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	2120      	movs	r1, #32
 80026de:	488c      	ldr	r0, [pc, #560]	; (8002910 <StartMotorTask+0x278>)
 80026e0:	f001 fc78 	bl	8003fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 80026e4:	2201      	movs	r2, #1
 80026e6:	2108      	movs	r1, #8
 80026e8:	4889      	ldr	r0, [pc, #548]	; (8002910 <StartMotorTask+0x278>)
 80026ea:	f001 fc73 	bl	8003fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2104      	movs	r1, #4
 80026f2:	4887      	ldr	r0, [pc, #540]	; (8002910 <StartMotorTask+0x278>)
 80026f4:	f001 fc6e 	bl	8003fd4 <HAL_GPIO_WritePin>
//	osDelay(1000);
	osDelay(50);
 80026f8:	2032      	movs	r0, #50	; 0x32
 80026fa:	f006 fa6b 	bl	8008bd4 <osDelay>


  /* Infinite loop */
  for(;;)
  {
		htim1.Instance->CCR4 = pwmVal_servo;
 80026fe:	4b85      	ldr	r3, [pc, #532]	; (8002914 <StartMotorTask+0x27c>)
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <StartMotorTask+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
		double error_angle = target_angle - total_angle;
 8002708:	4b83      	ldr	r3, [pc, #524]	; (8002918 <StartMotorTask+0x280>)
 800270a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270e:	4b83      	ldr	r3, [pc, #524]	; (800291c <StartMotorTask+0x284>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd fdb8 	bl	8000288 <__aeabi_dsub>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		if(aRxBuffer[0] = ' '){
//			pwmVal_L = pwmVal_R = 0;
//
//		}else
			if (pwmVal_servo < 127){ //106 //TURN LEFT
 8002720:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <StartMotorTask+0x27c>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	2b7e      	cmp	r3, #126	; 0x7e
 8002726:	d84c      	bhi.n	80027c2 <StartMotorTask+0x12a>
//			pwmVal_R = PID_Angle(error_angle, 1)*1.072;  //right is master
			pwmVal_R = PID_Angle(error_angle, 1)*1.5;
 8002728:	2001      	movs	r0, #1
 800272a:	ed97 0b02 	vldr	d0, [r7, #8]
 800272e:	f7ff fd2b 	bl	8002188 <PID_Angle>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fef5 	bl	8000524 <__aeabi_i2d>
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <StartMotorTask+0x288>)
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fa2c 	bl	8000ba8 <__aeabi_d2uiz>
 8002750:	4603      	mov	r3, r0
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <StartMotorTask+0x268>)
 8002756:	801a      	strh	r2, [r3, #0]
//			pwmVal_L = pwmVal_R*(0.59); //left is slave
			pwmVal_L = pwmVal_R*(0.3);
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <StartMotorTask+0x268>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fee1 	bl	8000524 <__aeabi_i2d>
 8002762:	a365      	add	r3, pc, #404	; (adr r3, 80028f8 <StartMotorTask+0x260>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd ff46 	bl	80005f8 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe fa18 	bl	8000ba8 <__aeabi_d2uiz>
 8002778:	4603      	mov	r3, r0
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b61      	ldr	r3, [pc, #388]	; (8002904 <StartMotorTask+0x26c>)
 800277e:	801a      	strh	r2, [r3, #0]

			if(error_angle>0){
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800278c:	f7fe f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <StartMotorTask+0x114>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8002796:	2201      	movs	r2, #1
 8002798:	2108      	movs	r1, #8
 800279a:	485d      	ldr	r0, [pc, #372]	; (8002910 <StartMotorTask+0x278>)
 800279c:	f001 fc1a 	bl	8003fd4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2104      	movs	r1, #4
 80027a4:	485a      	ldr	r0, [pc, #360]	; (8002910 <StartMotorTask+0x278>)
 80027a6:	f001 fc15 	bl	8003fd4 <HAL_GPIO_WritePin>
 80027aa:	e07a      	b.n	80028a2 <StartMotorTask+0x20a>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 80027ac:	2200      	movs	r2, #0
 80027ae:	2108      	movs	r1, #8
 80027b0:	4857      	ldr	r0, [pc, #348]	; (8002910 <StartMotorTask+0x278>)
 80027b2:	f001 fc0f 	bl	8003fd4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	2104      	movs	r1, #4
 80027ba:	4855      	ldr	r0, [pc, #340]	; (8002910 <StartMotorTask+0x278>)
 80027bc:	f001 fc0a 	bl	8003fd4 <HAL_GPIO_WritePin>
 80027c0:	e06f      	b.n	80028a2 <StartMotorTask+0x20a>
			}
		}

		else if (pwmVal_servo > 189){ //230 //TURN RIGHT
 80027c2:	4b54      	ldr	r3, [pc, #336]	; (8002914 <StartMotorTask+0x27c>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	2bbd      	cmp	r3, #189	; 0xbd
 80027c8:	d94c      	bls.n	8002864 <StartMotorTask+0x1cc>
//			pwmVal_L = PID_Angle(error_angle, 0);
			pwmVal_L = PID_Angle(error_angle, 0)*1.5;
 80027ca:	2000      	movs	r0, #0
 80027cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80027d0:	f7ff fcda 	bl	8002188 <PID_Angle>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fea4 	bl	8000524 <__aeabi_i2d>
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <StartMotorTask+0x288>)
 80027e2:	f7fd ff09 	bl	80005f8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <StartMotorTask+0x26c>)
 80027f8:	801a      	strh	r2, [r3, #0]
//			pwmVal_R = pwmVal_L*(0.59); //right is slave
			pwmVal_R = pwmVal_L*(0.3); //right is slave
 80027fa:	4b42      	ldr	r3, [pc, #264]	; (8002904 <StartMotorTask+0x26c>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe90 	bl	8000524 <__aeabi_i2d>
 8002804:	a33c      	add	r3, pc, #240	; (adr r3, 80028f8 <StartMotorTask+0x260>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fd fef5 	bl	80005f8 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9c7 	bl	8000ba8 <__aeabi_d2uiz>
 800281a:	4603      	mov	r3, r0
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <StartMotorTask+0x268>)
 8002820:	801a      	strh	r2, [r3, #0]

			if(error_angle<0){
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800282e:	f7fe f955 	bl	8000adc <__aeabi_dcmplt>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <StartMotorTask+0x1b6>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002838:	2201      	movs	r2, #1
 800283a:	2110      	movs	r1, #16
 800283c:	4834      	ldr	r0, [pc, #208]	; (8002910 <StartMotorTask+0x278>)
 800283e:	f001 fbc9 	bl	8003fd4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2120      	movs	r1, #32
 8002846:	4832      	ldr	r0, [pc, #200]	; (8002910 <StartMotorTask+0x278>)
 8002848:	f001 fbc4 	bl	8003fd4 <HAL_GPIO_WritePin>
 800284c:	e029      	b.n	80028a2 <StartMotorTask+0x20a>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 800284e:	2200      	movs	r2, #0
 8002850:	2110      	movs	r1, #16
 8002852:	482f      	ldr	r0, [pc, #188]	; (8002910 <StartMotorTask+0x278>)
 8002854:	f001 fbbe 	bl	8003fd4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	2120      	movs	r1, #32
 800285c:	482c      	ldr	r0, [pc, #176]	; (8002910 <StartMotorTask+0x278>)
 800285e:	f001 fbb9 	bl	8003fd4 <HAL_GPIO_WritePin>
 8002862:	e01e      	b.n	80028a2 <StartMotorTask+0x20a>
//						}
//			}
//			//line correction equation is pwmVal = (19*error)/5 + 146

			// PID motor test
			setDirection(leftTarget - leftEncoderVal, 1);
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <StartMotorTask+0x28c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <StartMotorTask+0x290>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2101      	movs	r1, #1
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fdb9 	bl	80023e8 <setDirection>
			setDirection(rightTarget - rightEncoderVal, 0);
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <StartMotorTask+0x294>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <StartMotorTask+0x298>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fdb0 	bl	80023e8 <setDirection>
			StraightLineMove(leftTarget - leftEncoderVal, rightTarget - rightEncoderVal);
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <StartMotorTask+0x28c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <StartMotorTask+0x290>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1ad0      	subs	r0, r2, r3
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <StartMotorTask+0x294>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <StartMotorTask+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	4619      	mov	r1, r3
 800289e:	f7ff fde3 	bl	8002468 <StraightLineMove>
		}

		if(e_brake){
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <StartMotorTask+0x29c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <StartMotorTask+0x230>
			pwmVal_L = pwmVal_R = 0;
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <StartMotorTask+0x268>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <StartMotorTask+0x268>)
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <StartMotorTask+0x26c>)
 80028b6:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <StartMotorTask+0x290>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <StartMotorTask+0x28c>)
 80028be:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <StartMotorTask+0x298>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <StartMotorTask+0x294>)
 80028c6:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <StartMotorTask+0x26c>)
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <StartMotorTask+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <StartMotorTask+0x268>)
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <StartMotorTask+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f006 f979 	bl	8008bd4 <osDelay>

		if (times_acceptable>1000){
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <StartMotorTask+0x2a0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ea:	f77f af08 	ble.w	80026fe <StartMotorTask+0x66>
			times_acceptable=1001;
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <StartMotorTask+0x2a0>)
 80028f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80028f4:	601a      	str	r2, [r3, #0]
  {
 80028f6:	e702      	b.n	80026fe <StartMotorTask+0x66>
 80028f8:	33333333 	.word	0x33333333
 80028fc:	3fd33333 	.word	0x3fd33333
 8002900:	2000045c 	.word	0x2000045c
 8002904:	2000045e 	.word	0x2000045e
 8002908:	20000398 	.word	0x20000398
 800290c:	20000278 	.word	0x20000278
 8002910:	40020000 	.word	0x40020000
 8002914:	20000000 	.word	0x20000000
 8002918:	20000478 	.word	0x20000478
 800291c:	20000480 	.word	0x20000480
 8002920:	3ff80000 	.word	0x3ff80000
 8002924:	20000474 	.word	0x20000474
 8002928:	2000046c 	.word	0x2000046c
 800292c:	20000470 	.word	0x20000470
 8002930:	20000468 	.word	0x20000468
 8002934:	20000464 	.word	0x20000464
 8002938:	20000460 	.word	0x20000460

0800293c <StartRpiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRpiTask */
void StartRpiTask(void *argument)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b08d      	sub	sp, #52	; 0x34
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
////			resp = 'B';
//			osDelay(10);
//		}
//	}

	char ch = 'A';
 8002944:	2341      	movs	r3, #65	; 0x41
 8002946:	77fb      	strb	r3, [r7, #31]
	char old = ')';
 8002948:	2329      	movs	r3, #41	; 0x29
 800294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int Ryan_sign_fuckmylife = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
	  aRxBuffer[0] = '-';
 8002952:	4bb9      	ldr	r3, [pc, #740]	; (8002c38 <StartRpiTask+0x2fc>)
 8002954:	222d      	movs	r2, #45	; 0x2d
 8002956:	701a      	strb	r2, [r3, #0]
	  aRxBuffer[1] = 'W';
 8002958:	4bb7      	ldr	r3, [pc, #732]	; (8002c38 <StartRpiTask+0x2fc>)
 800295a:	2257      	movs	r2, #87	; 0x57
 800295c:	705a      	strb	r2, [r3, #1]
	  aRxBuffer[2] = 'A';
 800295e:	4bb6      	ldr	r3, [pc, #728]	; (8002c38 <StartRpiTask+0x2fc>)
 8002960:	2241      	movs	r2, #65	; 0x41
 8002962:	709a      	strb	r2, [r3, #2]
	  aRxBuffer[3] = 'I';
 8002964:	4bb4      	ldr	r3, [pc, #720]	; (8002c38 <StartRpiTask+0x2fc>)
 8002966:	2249      	movs	r2, #73	; 0x49
 8002968:	70da      	strb	r2, [r3, #3]
	  aRxBuffer[4] = 'T';
 800296a:	4bb3      	ldr	r3, [pc, #716]	; (8002c38 <StartRpiTask+0x2fc>)
 800296c:	2254      	movs	r2, #84	; 0x54
 800296e:	711a      	strb	r2, [r3, #4]

	  const char *strings[] = {"SF000", "LF090", "LF090", "SF050" };
 8002970:	4bb2      	ldr	r3, [pc, #712]	; (8002c3c <StartRpiTask+0x300>)
 8002972:	f107 040c 	add.w	r4, r7, #12
 8002976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  size_t numStrings = sizeof(strings) / sizeof(strings[0]);
 800297c:	2304      	movs	r3, #4
 800297e:	623b      	str	r3, [r7, #32]
//	  for(;;)
	  for (size_t i = 0; i < numStrings; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	e199      	b.n	8002cba <StartRpiTask+0x37e>
	{
	  	aRxBuffer[0] = strings[i][0];
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3330      	adds	r3, #48	; 0x30
 800298c:	443b      	add	r3, r7
 800298e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	4ba8      	ldr	r3, [pc, #672]	; (8002c38 <StartRpiTask+0x2fc>)
 8002996:	701a      	strb	r2, [r3, #0]
	  aRxBuffer[1] = strings[i][1];
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3330      	adds	r3, #48	; 0x30
 800299e:	443b      	add	r3, r7
 80029a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029a4:	3301      	adds	r3, #1
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4ba3      	ldr	r3, [pc, #652]	; (8002c38 <StartRpiTask+0x2fc>)
 80029aa:	705a      	strb	r2, [r3, #1]
	  aRxBuffer[2] = strings[i][2];
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3330      	adds	r3, #48	; 0x30
 80029b2:	443b      	add	r3, r7
 80029b4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029b8:	3302      	adds	r3, #2
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	4b9e      	ldr	r3, [pc, #632]	; (8002c38 <StartRpiTask+0x2fc>)
 80029be:	709a      	strb	r2, [r3, #2]
	  aRxBuffer[3] = strings[i][3];
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3330      	adds	r3, #48	; 0x30
 80029c6:	443b      	add	r3, r7
 80029c8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029cc:	3303      	adds	r3, #3
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <StartRpiTask+0x2fc>)
 80029d2:	70da      	strb	r2, [r3, #3]
	  aRxBuffer[4] = strings[i][4];
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3330      	adds	r3, #48	; 0x30
 80029da:	443b      	add	r3, r7
 80029dc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029e0:	3304      	adds	r3, #4
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	4b94      	ldr	r3, [pc, #592]	; (8002c38 <StartRpiTask+0x2fc>)
 80029e6:	711a      	strb	r2, [r3, #4]

	  magnitude = 0;
 80029e8:	4b95      	ldr	r3, [pc, #596]	; (8002c40 <StartRpiTask+0x304>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
	  key = aRxBuffer[0];
 80029ee:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <StartRpiTask+0x2fc>)
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	4b94      	ldr	r3, [pc, #592]	; (8002c44 <StartRpiTask+0x308>)
 80029f4:	701a      	strb	r2, [r3, #0]
	  direction = aRxBuffer[1];
 80029f6:	4b90      	ldr	r3, [pc, #576]	; (8002c38 <StartRpiTask+0x2fc>)
 80029f8:	785a      	ldrb	r2, [r3, #1]
 80029fa:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <StartRpiTask+0x30c>)
 80029fc:	701a      	strb	r2, [r3, #0]
	  magnitude = ((int)(aRxBuffer[2])-48)*100 + ((int)(aRxBuffer[3])-48)*10 + ((int)(aRxBuffer[4])-48);
 80029fe:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <StartRpiTask+0x2fc>)
 8002a00:	789b      	ldrb	r3, [r3, #2]
 8002a02:	3b30      	subs	r3, #48	; 0x30
 8002a04:	2264      	movs	r2, #100	; 0x64
 8002a06:	fb02 f103 	mul.w	r1, r2, r3
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <StartRpiTask+0x2fc>)
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	18ca      	adds	r2, r1, r3
 8002a1c:	4b86      	ldr	r3, [pc, #536]	; (8002c38 <StartRpiTask+0x2fc>)
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	3b30      	subs	r3, #48	; 0x30
 8002a22:	4413      	add	r3, r2
 8002a24:	4a86      	ldr	r2, [pc, #536]	; (8002c40 <StartRpiTask+0x304>)
 8002a26:	6013      	str	r3, [r2, #0]
	  Ryan_sign_fuckmylife = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if(direction == 'B' || direction == 'b'){
 8002a2c:	4b86      	ldr	r3, [pc, #536]	; (8002c48 <StartRpiTask+0x30c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b42      	cmp	r3, #66	; 0x42
 8002a32:	d003      	beq.n	8002a3c <StartRpiTask+0x100>
 8002a34:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <StartRpiTask+0x30c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b62      	cmp	r3, #98	; 0x62
 8002a3a:	d107      	bne.n	8002a4c <StartRpiTask+0x110>
		  magnitude *= -1;
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <StartRpiTask+0x304>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	425b      	negs	r3, r3
 8002a42:	4a7f      	ldr	r2, [pc, #508]	; (8002c40 <StartRpiTask+0x304>)
 8002a44:	6013      	str	r3, [r2, #0]
		  Ryan_sign_fuckmylife = -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
//		old_Buff[3] = aRxBuffer[3];
//		old_Buff[4] = aRxBuffer[4];
//
//		}

		 osDelay(2000);
 8002a4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a50:	f006 f8c0 	bl	8008bd4 <osDelay>
//	  	  osDelay(2000);
		  switch (key){
 8002a54:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <StartRpiTask+0x308>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3b44      	subs	r3, #68	; 0x44
 8002a5a:	2b0f      	cmp	r3, #15
 8002a5c:	f200 8113 	bhi.w	8002c86 <StartRpiTask+0x34a>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <StartRpiTask+0x12c>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002c87 	.word	0x08002c87
 8002a6c:	08002c87 	.word	0x08002c87
 8002a70:	08002c87 	.word	0x08002c87
 8002a74:	08002c87 	.word	0x08002c87
 8002a78:	08002c87 	.word	0x08002c87
 8002a7c:	08002c87 	.word	0x08002c87
 8002a80:	08002bb1 	.word	0x08002bb1
 8002a84:	08002bf5 	.word	0x08002bf5
 8002a88:	08002b57 	.word	0x08002b57
 8002a8c:	08002c87 	.word	0x08002c87
 8002a90:	08002c87 	.word	0x08002c87
 8002a94:	08002c87 	.word	0x08002c87
 8002a98:	08002c55 	.word	0x08002c55
 8002a9c:	08002c87 	.word	0x08002c87
 8002aa0:	08002afd 	.word	0x08002afd
 8002aa4:	08002aa9 	.word	0x08002aa9
			  case 'D':
				  break;
			  case 'S':
				  times_acceptable=0;
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <StartRpiTask+0x310>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
//				  moveCarStraightOverall(magnitude);
				  moveCarStraight(magnitude);
 8002aae:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <StartRpiTask+0x304>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fd36 	bl	8000524 <__aeabi_i2d>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	ec43 2b10 	vmov	d0, r2, r3
 8002ac0:	f7fe ff16 	bl	80018f0 <moveCarStraight>
				  while(finishCheck());
 8002ac4:	bf00      	nop
 8002ac6:	f7ff fbe7 	bl	8002298 <finishCheck>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1fa      	bne.n	8002ac6 <StartRpiTask+0x18a>
				  flagDone=1;
 8002ad0:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <StartRpiTask+0x314>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002ad6:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <StartRpiTask+0x2fc>)
 8002ad8:	2244      	movs	r2, #68	; 0x44
 8002ada:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002adc:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <StartRpiTask+0x2fc>)
 8002ade:	224f      	movs	r2, #79	; 0x4f
 8002ae0:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002ae2:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <StartRpiTask+0x2fc>)
 8002ae4:	224e      	movs	r2, #78	; 0x4e
 8002ae6:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <StartRpiTask+0x2fc>)
 8002aea:	2245      	movs	r2, #69	; 0x45
 8002aec:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002aee:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <StartRpiTask+0x2fc>)
 8002af0:	2221      	movs	r2, #33	; 0x21
 8002af2:	711a      	strb	r2, [r3, #4]
//				  cntS++;

//				  osDelay(100);
				  osDelay(50);
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	f006 f86d 	bl	8008bd4 <osDelay>

				  break;
 8002afa:	e0c5      	b.n	8002c88 <StartRpiTask+0x34c>
			  case 'R':
				  times_acceptable=0;
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <StartRpiTask+0x310>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
				  moveCarRight90(89*Ryan_sign_fuckmylife, Ryan_sign_fuckmylife);
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2259      	movs	r2, #89	; 0x59
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd0a 	bl	8000524 <__aeabi_i2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b16:	ec43 2b10 	vmov	d0, r2, r3
 8002b1a:	f7ff f8f5 	bl	8001d08 <moveCarRight90>
				  while(finishCheck());
 8002b1e:	bf00      	nop
 8002b20:	f7ff fbba 	bl	8002298 <finishCheck>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1fa      	bne.n	8002b20 <StartRpiTask+0x1e4>
				  flagDone=1;
 8002b2a:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <StartRpiTask+0x314>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b32:	2244      	movs	r2, #68	; 0x44
 8002b34:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b38:	224f      	movs	r2, #79	; 0x4f
 8002b3a:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b3e:	224e      	movs	r2, #78	; 0x4e
 8002b40:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b44:	2245      	movs	r2, #69	; 0x45
 8002b46:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b4a:	2221      	movs	r2, #33	; 0x21
 8002b4c:	711a      	strb	r2, [r3, #4]
//				  osDelay(100);
				  osDelay(50);
 8002b4e:	2032      	movs	r0, #50	; 0x32
 8002b50:	f006 f840 	bl	8008bd4 <osDelay>

				  break;
 8002b54:	e098      	b.n	8002c88 <StartRpiTask+0x34c>
			  case 'L':
				  times_acceptable=0;
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <StartRpiTask+0x310>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
				  moveCarLeft90(89*Ryan_sign_fuckmylife, Ryan_sign_fuckmylife);
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2259      	movs	r2, #89	; 0x59
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcdd 	bl	8000524 <__aeabi_i2d>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b70:	ec43 2b10 	vmov	d0, r2, r3
 8002b74:	f7ff f96c 	bl	8001e50 <moveCarLeft90>
				  while(finishCheck());
 8002b78:	bf00      	nop
 8002b7a:	f7ff fb8d 	bl	8002298 <finishCheck>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1fa      	bne.n	8002b7a <StartRpiTask+0x23e>
				  flagDone=1;
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <StartRpiTask+0x314>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b8c:	2244      	movs	r2, #68	; 0x44
 8002b8e:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b92:	224f      	movs	r2, #79	; 0x4f
 8002b94:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b98:	224e      	movs	r2, #78	; 0x4e
 8002b9a:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <StartRpiTask+0x2fc>)
 8002b9e:	2245      	movs	r2, #69	; 0x45
 8002ba0:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <StartRpiTask+0x2fc>)
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	711a      	strb	r2, [r3, #4]
//				  osDelay(100);
				  osDelay(50);
 8002ba8:	2032      	movs	r0, #50	; 0x32
 8002baa:	f006 f813 	bl	8008bd4 <osDelay>

				  break;
 8002bae:	e06b      	b.n	8002c88 <StartRpiTask+0x34c>
			  case 'J':
				  times_acceptable=0;
 8002bb0:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <StartRpiTask+0x310>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
				  moveCarSlideRight(Ryan_sign_fuckmylife);
 8002bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bb8:	f7fe ff52 	bl	8001a60 <moveCarSlideRight>
				  while(finishCheck());
 8002bbc:	bf00      	nop
 8002bbe:	f7ff fb6b 	bl	8002298 <finishCheck>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1fa      	bne.n	8002bbe <StartRpiTask+0x282>
				  flagDone=1;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <StartRpiTask+0x314>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <StartRpiTask+0x2fc>)
 8002bd0:	2244      	movs	r2, #68	; 0x44
 8002bd2:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <StartRpiTask+0x2fc>)
 8002bd6:	224f      	movs	r2, #79	; 0x4f
 8002bd8:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <StartRpiTask+0x2fc>)
 8002bdc:	224e      	movs	r2, #78	; 0x4e
 8002bde:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <StartRpiTask+0x2fc>)
 8002be2:	2245      	movs	r2, #69	; 0x45
 8002be4:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <StartRpiTask+0x2fc>)
 8002be8:	2221      	movs	r2, #33	; 0x21
 8002bea:	711a      	strb	r2, [r3, #4]
//				  osDelay(100);
				  osDelay(50);
 8002bec:	2032      	movs	r0, #50	; 0x32
 8002bee:	f005 fff1 	bl	8008bd4 <osDelay>

				  break;
 8002bf2:	e049      	b.n	8002c88 <StartRpiTask+0x34c>
			  case 'K':
				  times_acceptable=0;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <StartRpiTask+0x310>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
				  moveCarSlideLeft(Ryan_sign_fuckmylife);
 8002bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bfc:	f7fe ffd2 	bl	8001ba4 <moveCarSlideLeft>
				  while(finishCheck());
 8002c00:	bf00      	nop
 8002c02:	f7ff fb49 	bl	8002298 <finishCheck>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1fa      	bne.n	8002c02 <StartRpiTask+0x2c6>
				  flagDone=1;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <StartRpiTask+0x314>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <StartRpiTask+0x2fc>)
 8002c14:	2244      	movs	r2, #68	; 0x44
 8002c16:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <StartRpiTask+0x2fc>)
 8002c1a:	224f      	movs	r2, #79	; 0x4f
 8002c1c:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <StartRpiTask+0x2fc>)
 8002c20:	224e      	movs	r2, #78	; 0x4e
 8002c22:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <StartRpiTask+0x2fc>)
 8002c26:	2245      	movs	r2, #69	; 0x45
 8002c28:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <StartRpiTask+0x2fc>)
 8002c2c:	2221      	movs	r2, #33	; 0x21
 8002c2e:	711a      	strb	r2, [r3, #4]
//				  osDelay(100);
				  osDelay(50);
 8002c30:	2032      	movs	r0, #50	; 0x32
 8002c32:	f005 ffcf 	bl	8008bd4 <osDelay>

				  break;
 8002c36:	e027      	b.n	8002c88 <StartRpiTask+0x34c>
 8002c38:	2000043c 	.word	0x2000043c
 8002c3c:	0800e984 	.word	0x0800e984
 8002c40:	20000458 	.word	0x20000458
 8002c44:	20000454 	.word	0x20000454
 8002c48:	20000455 	.word	0x20000455
 8002c4c:	20000460 	.word	0x20000460
 8002c50:	20000450 	.word	0x20000450
		  	  case 'P':
//		  		  buzzerBeep();
		  		  flagDone=1;
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <StartRpiTask+0x394>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
		  		  times_acceptable=0;
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <StartRpiTask+0x398>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c62:	2244      	movs	r2, #68	; 0x44
 8002c64:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c68:	224f      	movs	r2, #79	; 0x4f
 8002c6a:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c6e:	224e      	movs	r2, #78	; 0x4e
 8002c70:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c74:	2245      	movs	r2, #69	; 0x45
 8002c76:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c7a:	2221      	movs	r2, #33	; 0x21
 8002c7c:	711a      	strb	r2, [r3, #4]
//				  osDelay(100);
				  osDelay(50);
 8002c7e:	2032      	movs	r0, #50	; 0x32
 8002c80:	f005 ffa8 	bl	8008bd4 <osDelay>
				  break;
 8002c84:	e000      	b.n	8002c88 <StartRpiTask+0x34c>
			  default:
				  break;
 8002c86:	bf00      	nop
		  }
		  old = aRxBuffer[0];
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <StartRpiTask+0x39c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

//
//
//	  // send ack back to rpi and ready for next instruction
		if(flagDone==1){
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <StartRpiTask+0x394>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10d      	bne.n	8002cb4 <StartRpiTask+0x378>
			osDelay(100);
 8002c98:	2064      	movs	r0, #100	; 0x64
 8002c9a:	f005 ff9b 	bl	8008bd4 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1,0xFFFF);
 8002c9e:	f107 011f 	add.w	r1, r7, #31
 8002ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <StartRpiTask+0x3a0>)
 8002caa:	f004 fe58 	bl	800795e <HAL_UART_Transmit>
			flagDone = 0;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <StartRpiTask+0x394>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
	  for (size_t i = 0; i < numStrings; i++)
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	f4ff ae61 	bcc.w	8002986 <StartRpiTask+0x4a>
		}
//		osDelay(1);
//
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3734      	adds	r7, #52	; 0x34
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000450 	.word	0x20000450
 8002cd4:	20000460 	.word	0x20000460
 8002cd8:	2000043c 	.word	0x2000043c
 8002cdc:	200003e0 	.word	0x200003e0

08002ce0 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
	gyroInit();
 8002ce8:	f7ff fc90 	bl	800260c <gyroInit>
	uint8_t val[2] = {0,0};
 8002cec:	2300      	movs	r3, #0
 8002cee:	813b      	strh	r3, [r7, #8]

//	int16_t angular_speed = 0;

	uint32_t tick = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash= 0;
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i=0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
	while(i<100){
 8002d10:	e058      	b.n	8002dc4 <StartGyroTask+0xe4>
		osDelay(50);
 8002d12:	2032      	movs	r0, #50	; 0x32
 8002d14:	f005 ff5e 	bl	8008bd4 <osDelay>
		readByte(0x37, val);
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2037      	movs	r0, #55	; 0x37
 8002d20:	f7ff faee 	bl	8002300 <readByte>

		//test read GyroZ
//		readPID();

		angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
 8002d24:	7a3b      	ldrb	r3, [r7, #8]
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	7a7b      	ldrb	r3, [r7, #9]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002d3a:	801a      	strh	r2, [r3, #0]
		angular_speed = (val[0] << 8) | val[1];
 8002d3c:	7a3b      	ldrb	r3, [r7, #8]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	7a7b      	ldrb	r3, [r7, #9]
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	4b57      	ldr	r3, [pc, #348]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002d4c:	801a      	strh	r2, [r3, #0]
		trash +=(double)((double)angular_speed)*((HAL_GetTick() - tick)/16400.0);
 8002d4e:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbe5 	bl	8000524 <__aeabi_i2d>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	460d      	mov	r5, r1
 8002d5e:	f000 fdc9 	bl	80038f4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fbcb 	bl	8000504 <__aeabi_ui2d>
 8002d6e:	a34c      	add	r3, pc, #304	; (adr r3, 8002ea0 <StartGyroTask+0x1c0>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd fd6a 	bl	800084c <__aeabi_ddiv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd fc3a 	bl	80005f8 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d8c:	f7fd fa7e 	bl	800028c <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002d98:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbc0 	bl	8000524 <__aeabi_i2d>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dac:	f7fd fa6e 	bl	800028c <__adddf3>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002db8:	f000 fd9c 	bl	80038f4 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
	while(i<100){
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b63      	cmp	r3, #99	; 0x63
 8002dc8:	dda3      	ble.n	8002d12 <StartGyroTask+0x32>
	}
	offset = offset/i;
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7fd fbaa 	bl	8000524 <__aeabi_i2d>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dd8:	f7fd fd38 	bl	800084c <__aeabi_ddiv>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
//	LEDShow();

  /* Infinite loop */
  for(;;)
  {
		osDelay(50);
 8002de4:	2032      	movs	r0, #50	; 0x32
 8002de6:	f005 fef5 	bl	8008bd4 <osDelay>
		readByte(0x37, val);
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	4619      	mov	r1, r3
 8002df0:	2037      	movs	r0, #55	; 0x37
 8002df2:	f7ff fa85 	bl	8002300 <readByte>

		// test read GyroZ
		readPID();
 8002df6:	f7ff faaf 	bl	8002358 <readPID>

		angular_speed = (val[0] << 8) | val[1];
 8002dfa:	7a3b      	ldrb	r3, [r7, #8]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	7a7b      	ldrb	r3, [r7, #9]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002e0a:	801a      	strh	r2, [r3, #0]
		angular_speed = ((int16_t)((int8_t)val[0]))*256 +  (uint16_t)val[1];
 8002e0c:	7a3b      	ldrb	r3, [r7, #8]
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	7a7b      	ldrb	r3, [r7, #9]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002e22:	801a      	strh	r2, [r3, #0]
		total_angle +=(double)((double)angular_speed - offset)*((HAL_GetTick() - tick)/16400.0);
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb7a 	bl	8000524 <__aeabi_i2d>
 8002e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e34:	f7fd fa28 	bl	8000288 <__aeabi_dsub>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	f000 fd58 	bl	80038f4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fb5a 	bl	8000504 <__aeabi_ui2d>
 8002e50:	a313      	add	r3, pc, #76	; (adr r3, 8002ea0 <StartGyroTask+0x1c0>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fcf9 	bl	800084c <__aeabi_ddiv>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fbc9 	bl	80005f8 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <StartGyroTask+0x1cc>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fa0a 	bl	800028c <__adddf3>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	490b      	ldr	r1, [pc, #44]	; (8002eac <StartGyroTask+0x1cc>)
 8002e7e:	e9c1 2300 	strd	r2, r3, [r1]
//		total_angle +=(double)((double)angular_speed + 5)*((HAL_GetTick() - tick)/16400.0);
		i -= angular_speed;
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <StartGyroTask+0x1c8>)
 8002e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002e90:	f000 fd30 	bl	80038f4 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
		osDelay(50);
 8002e9c:	e7a2      	b.n	8002de4 <StartGyroTask+0x104>
 8002e9e:	bf00      	nop
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40d00400 	.word	0x40d00400
 8002ea8:	200004ac 	.word	0x200004ac
 8002eac:	20000480 	.word	0x20000480

08002eb0 <StartEncoderRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderRightTask */
void StartEncoderRightTask(void *argument)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRightTask */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002eb8:	213c      	movs	r1, #60	; 0x3c
 8002eba:	481d      	ldr	r0, [pc, #116]	; (8002f30 <StartEncoderRightTask+0x80>)
 8002ebc:	f003 fbbd 	bl	800663a <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002ec4:	f000 fd16 	bl	80038f4 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002eca:	f000 fd13 	bl	80038f4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b0a      	cmp	r3, #10
 8002ed6:	d9f8      	bls.n	8002eca <StartEncoderRightTask+0x1a>
		{
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <StartEncoderRightTask+0x80>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	60bb      	str	r3, [r7, #8]
			if(cnt1 > 32000){
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ee6:	dd06      	ble.n	8002ef6 <StartEncoderRightTask+0x46>
				dirR = 1;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e004      	b.n	8002f00 <StartEncoderRightTask+0x50>
			} else {
				dirR = -1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	613b      	str	r3, [r7, #16]

			}

			if(dirR == 1){
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <StartEncoderRightTask+0x64>
				rightEncoderVal -= diff;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <StartEncoderRightTask+0x84>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <StartEncoderRightTask+0x84>)
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e005      	b.n	8002f20 <StartEncoderRightTask+0x70>
			} else {
				rightEncoderVal += diff;
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <StartEncoderRightTask+0x84>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <StartEncoderRightTask+0x84>)
 8002f1e:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <StartEncoderRightTask+0x80>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002f28:	f000 fce4 	bl	80038f4 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8002f2e:	e7cc      	b.n	8002eca <StartEncoderRightTask+0x1a>
 8002f30:	20000308 	.word	0x20000308
 8002f34:	20000468 	.word	0x20000468

08002f38 <StartEncoderLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderLeftTask */
void StartEncoderLeftTask(void *argument)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLeftTask */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002f40:	213c      	movs	r1, #60	; 0x3c
 8002f42:	481d      	ldr	r0, [pc, #116]	; (8002fb8 <StartEncoderLeftTask+0x80>)
 8002f44:	f003 fb79 	bl	800663a <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002f4c:	f000 fcd2 	bl	80038f4 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002f52:	f000 fccf 	bl	80038f4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b0a      	cmp	r3, #10
 8002f5e:	d9f8      	bls.n	8002f52 <StartEncoderLeftTask+0x1a>
		{
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <StartEncoderLeftTask+0x80>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	60bb      	str	r3, [r7, #8]

			if(cnt2 > 32000){
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002f6e:	dd06      	ble.n	8002f7e <StartEncoderLeftTask+0x46>
				dirL = 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e004      	b.n	8002f88 <StartEncoderLeftTask+0x50>
			} else {
				dirL = -1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	613b      	str	r3, [r7, #16]
			}
			if(dirL == 1){
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <StartEncoderLeftTask+0x64>
				leftEncoderVal += diff;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <StartEncoderLeftTask+0x84>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <StartEncoderLeftTask+0x84>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e005      	b.n	8002fa8 <StartEncoderLeftTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <StartEncoderLeftTask+0x84>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <StartEncoderLeftTask+0x84>)
 8002fa6:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <StartEncoderLeftTask+0x80>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002fb0:	f000 fca0 	bl	80038f4 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8002fb6:	e7cc      	b.n	8002f52 <StartEncoderLeftTask+0x1a>
 8002fb8:	200002c0 	.word	0x200002c0
 8002fbc:	2000046c 	.word	0x2000046c

08002fc0 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	uint8_t hello [20] = "Hello World!\0";
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <show+0xb0>)
 8002fca:	f107 040c 	add.w	r4, r7, #12
 8002fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd0:	c407      	stmia	r4!, {r0, r1, r2}
 8002fd2:	8023      	strh	r3, [r4, #0]
 8002fd4:	f107 031a 	add.w	r3, r7, #26
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	sprintf(hello, "buffer: %s\0", aRxBuffer);
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <show+0xb4>)
 8002fe4:	4924      	ldr	r1, [pc, #144]	; (8003078 <show+0xb8>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f009 fa90 	bl	800c50c <siprintf>
	OLED_ShowString(10, 10, hello);
 8002fec:	f107 030c 	add.w	r3, r7, #12
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	210a      	movs	r1, #10
 8002ff4:	200a      	movs	r0, #10
 8002ff6:	f008 fcb5 	bl	800b964 <OLED_ShowString>
	sprintf(hello, "timeA: %d\0", times_acceptable);
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <show+0xbc>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	491f      	ldr	r1, [pc, #124]	; (8003080 <show+0xc0>)
 8003004:	4618      	mov	r0, r3
 8003006:	f009 fa81 	bl	800c50c <siprintf>
	OLED_ShowString(10, 20, hello);
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	461a      	mov	r2, r3
 8003010:	2114      	movs	r1, #20
 8003012:	200a      	movs	r0, #10
 8003014:	f008 fca6 	bl	800b964 <OLED_ShowString>
//	sprintf(hello, "corr: %d\0", correction);
//	OLED_ShowString(10, 30, hello);
	sprintf(hello, "gyroZ: %d\0", (int)gyroZ);
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <show+0xc4>)
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	461a      	mov	r2, r3
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	4918      	ldr	r1, [pc, #96]	; (8003088 <show+0xc8>)
 8003026:	4618      	mov	r0, r3
 8003028:	f009 fa70 	bl	800c50c <siprintf>
	OLED_ShowString(10, 40, hello);
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	461a      	mov	r2, r3
 8003032:	2128      	movs	r1, #40	; 0x28
 8003034:	200a      	movs	r0, #10
 8003036:	f008 fc95 	bl	800b964 <OLED_ShowString>
	sprintf(hello, "a2: %d\0", (int)target_angle);
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <show+0xcc>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fd88 	bl	8000b58 <__aeabi_d2iz>
 8003048:	4602      	mov	r2, r0
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	4910      	ldr	r1, [pc, #64]	; (8003090 <show+0xd0>)
 8003050:	4618      	mov	r0, r3
 8003052:	f009 fa5b 	bl	800c50c <siprintf>
	OLED_ShowString(10, 50, hello);
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	461a      	mov	r2, r3
 800305c:	2132      	movs	r1, #50	; 0x32
 800305e:	200a      	movs	r0, #10
 8003060:	f008 fc80 	bl	800b964 <OLED_ShowString>
	OLED_Refresh_Gram();
 8003064:	f008 fb0a 	bl	800b67c <OLED_Refresh_Gram>
    osDelay(1);
 8003068:	2001      	movs	r0, #1
 800306a:	f005 fdb3 	bl	8008bd4 <osDelay>
	sprintf(hello, "buffer: %s\0", aRxBuffer);
 800306e:	e7b6      	b.n	8002fde <show+0x1e>
 8003070:	0800e948 	.word	0x0800e948
 8003074:	2000043c 	.word	0x2000043c
 8003078:	0800e994 	.word	0x0800e994
 800307c:	20000460 	.word	0x20000460
 8003080:	0800e9a0 	.word	0x0800e9a0
 8003084:	200004a6 	.word	0x200004a6
 8003088:	0800e9ac 	.word	0x0800e9ac
 800308c:	20000478 	.word	0x20000478
 8003090:	0800e9b8 	.word	0x0800e9b8

08003094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800309c:	e7fe      	b.n	800309c <Error_Handler+0x8>
	...

080030a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_MspInit+0x64>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a15      	ldr	r2, [pc, #84]	; (8003104 <HAL_MspInit+0x64>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_MspInit+0x64>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_MspInit+0x64>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_MspInit+0x64>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_MspInit+0x64>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	210f      	movs	r1, #15
 80030e2:	f06f 0001 	mvn.w	r0, #1
 80030e6:	f000 fd10 	bl	8003b0a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2105      	movs	r1, #5
 80030ee:	2005      	movs	r0, #5
 80030f0:	f000 fd0b 	bl	8003b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030f4:	2005      	movs	r0, #5
 80030f6:	f000 fd24 	bl	8003b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_I2C_MspInit+0x84>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d12c      	bne.n	8003184 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_I2C_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_I2C_MspInit+0x88>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_I2C_MspInit+0x88>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003146:	f44f 7340 	mov.w	r3, #768	; 0x300
 800314a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800314c:	2312      	movs	r3, #18
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003158:	2304      	movs	r3, #4
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	480c      	ldr	r0, [pc, #48]	; (8003194 <HAL_I2C_MspInit+0x8c>)
 8003164:	f000 fd9a 	bl	8003c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_I2C_MspInit+0x88>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_I2C_MspInit+0x88>)
 8003172:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_I2C_MspInit+0x88>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40005400 	.word	0x40005400
 8003190:	40023800 	.word	0x40023800
 8003194:	40020400 	.word	0x40020400

08003198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_TIM_Base_MspInit+0xdc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11e      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4a2d      	ldr	r2, [pc, #180]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2105      	movs	r1, #5
 80031da:	2018      	movs	r0, #24
 80031dc:	f000 fc95 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80031e0:	2018      	movs	r0, #24
 80031e2:	f000 fcae 	bl	8003b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2105      	movs	r1, #5
 80031ea:	2019      	movs	r0, #25
 80031ec:	f000 fc8d 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031f0:	2019      	movs	r0, #25
 80031f2:	f000 fca6 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031f6:	e038      	b.n	800326a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_TIM_Base_MspInit+0xe4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d133      	bne.n	800326a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_TIM_Base_MspInit+0xe0>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800323a:	23c0      	movs	r3, #192	; 0xc0
 800323c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800324a:	2303      	movs	r3, #3
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <HAL_TIM_Base_MspInit+0xe8>)
 8003256:	f000 fd21 	bl	8003c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	2105      	movs	r1, #5
 800325e:	202d      	movs	r0, #45	; 0x2d
 8003260:	f000 fc53 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003264:	202d      	movs	r0, #45	; 0x2d
 8003266:	f000 fc6c 	bl	8003b42 <HAL_NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40023800 	.word	0x40023800
 800327c:	40010400 	.word	0x40010400
 8003280:	40020800 	.word	0x40020800

08003284 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d14b      	bne.n	800333e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a3e      	ldr	r2, [pc, #248]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a37      	ldr	r2, [pc, #220]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800330c:	2301      	movs	r3, #1
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	4825      	ldr	r0, [pc, #148]	; (80033ac <HAL_TIM_Encoder_MspInit+0x128>)
 8003318:	f000 fcc0 	bl	8003c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 800331c:	2308      	movs	r3, #8
 800331e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800332c:	2301      	movs	r3, #1
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	4619      	mov	r1, r3
 8003336:	481e      	ldr	r0, [pc, #120]	; (80033b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003338:	f000 fcb0 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800333c:	e030      	b.n	80033a0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d12b      	bne.n	80033a0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	6413      	str	r3, [r2, #64]	; 0x40
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003390:	2302      	movs	r3, #2
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	4619      	mov	r1, r3
 800339a:	4804      	ldr	r0, [pc, #16]	; (80033ac <HAL_TIM_Encoder_MspInit+0x128>)
 800339c:	f000 fc7e 	bl	8003c9c <HAL_GPIO_Init>
}
 80033a0:	bf00      	nop
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40000400 	.word	0x40000400

080033b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_TIM_IC_MspInit+0x94>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d134      	bne.n	8003444 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_TIM_IC_MspInit+0x98>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8003412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003424:	2302      	movs	r3, #2
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	4809      	ldr	r0, [pc, #36]	; (8003454 <HAL_TIM_IC_MspInit+0x9c>)
 8003430:	f000 fc34 	bl	8003c9c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2105      	movs	r1, #5
 8003438:	201e      	movs	r0, #30
 800343a:	f000 fb66 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800343e:	201e      	movs	r0, #30
 8003440:	f000 fb7f 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003444:	bf00      	nop
 8003446:	3728      	adds	r7, #40	; 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40000800 	.word	0x40000800
 8003450:	40023800 	.word	0x40023800
 8003454:	40020c00 	.word	0x40020c00

08003458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_TIM_MspPostInit+0x68>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d11e      	bne.n	80034b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_TIM_MspPostInit+0x6c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <HAL_TIM_MspPostInit+0x6c>)
 8003484:	f043 0310 	orr.w	r3, r3, #16
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_TIM_MspPostInit+0x6c>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800349a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	4619      	mov	r1, r3
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <HAL_TIM_MspPostInit+0x70>)
 80034b4:	f000 fbf2 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034b8:	bf00      	nop
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_UART_MspInit+0x94>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d134      	bne.n	8003558 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_UART_MspInit+0x98>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_UART_MspInit+0x98>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_UART_MspInit+0x98>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_UART_MspInit+0x98>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_UART_MspInit+0x98>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_UART_MspInit+0x98>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003526:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003538:	2307      	movs	r3, #7
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <HAL_UART_MspInit+0x9c>)
 8003544:	f000 fbaa 	bl	8003c9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003548:	2200      	movs	r2, #0
 800354a:	2105      	movs	r1, #5
 800354c:	2027      	movs	r0, #39	; 0x27
 800354e:	f000 fadc 	bl	8003b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003552:	2027      	movs	r0, #39	; 0x27
 8003554:	f000 faf5 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003558:	bf00      	nop
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40004800 	.word	0x40004800
 8003564:	40023800 	.word	0x40023800
 8003568:	40020800 	.word	0x40020800

0800356c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <NMI_Handler+0x4>

08003572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003576:	e7fe      	b.n	8003576 <HardFault_Handler+0x4>

08003578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800357c:	e7fe      	b.n	800357c <MemManage_Handler+0x4>

0800357e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003582:	e7fe      	b.n	8003582 <BusFault_Handler+0x4>

08003584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003588:	e7fe      	b.n	8003588 <UsageFault_Handler+0x4>

0800358a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800359c:	f000 f996 	bl	80038cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80035a0:	f006 ff50 	bl	800a444 <xTaskGetSchedulerState>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80035aa:	f007 fd35 	bl	800b018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80035c6:	f003 f8c6 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000278 	.word	0x20000278

080035d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80035da:	f003 f8bc 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000278 	.word	0x20000278

080035e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <TIM4_IRQHandler+0x10>)
 80035ee:	f003 f8b2 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000350 	.word	0x20000350

080035fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <USART3_IRQHandler+0x10>)
 8003602:	f004 fa6f 	bl	8007ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200003e0 	.word	0x200003e0

08003610 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003616:	f003 f89e 	bl	8006756 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000398 	.word	0x20000398

08003624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return 1;
 8003628:	2301      	movs	r3, #1
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_kill>:

int _kill(int pid, int sig)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800363e:	f009 f871 	bl	800c724 <__errno>
 8003642:	4603      	mov	r3, r0
 8003644:	2216      	movs	r2, #22
 8003646:	601a      	str	r2, [r3, #0]
  return -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_exit>:

void _exit (int status)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800365c:	f04f 31ff 	mov.w	r1, #4294967295
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffe7 	bl	8003634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003666:	e7fe      	b.n	8003666 <_exit+0x12>

08003668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e00a      	b.n	8003690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800367a:	f3af 8000 	nop.w
 800367e:	4601      	mov	r1, r0
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	60ba      	str	r2, [r7, #8]
 8003686:	b2ca      	uxtb	r2, r1
 8003688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3301      	adds	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	dbf0      	blt.n	800367a <_read+0x12>
  }

  return len;
 8003698:	687b      	ldr	r3, [r7, #4]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e009      	b.n	80036c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	60ba      	str	r2, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3301      	adds	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	dbf1      	blt.n	80036b4 <_write+0x12>
  }
  return len;
 80036d0:	687b      	ldr	r3, [r7, #4]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_close>:

int _close(int file)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003702:	605a      	str	r2, [r3, #4]
  return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <_isatty>:

int _isatty(int file)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <_sbrk+0x5c>)
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <_sbrk+0x60>)
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <_sbrk+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <_sbrk+0x64>)
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <_sbrk+0x68>)
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d207      	bcs.n	8003784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003774:	f008 ffd6 	bl	800c724 <__errno>
 8003778:	4603      	mov	r3, r0
 800377a:	220c      	movs	r2, #12
 800377c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e009      	b.n	8003798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <_sbrk+0x64>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <_sbrk+0x64>)
 8003794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20020000 	.word	0x20020000
 80037a4:	00000400 	.word	0x00000400
 80037a8:	200004d0 	.word	0x200004d0
 80037ac:	20005410 	.word	0x20005410

080037b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <SystemInit+0x20>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <SystemInit+0x20>)
 80037bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800380c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037d8:	480d      	ldr	r0, [pc, #52]	; (8003810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037da:	490e      	ldr	r1, [pc, #56]	; (8003814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037dc:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037e0:	e002      	b.n	80037e8 <LoopCopyDataInit>

080037e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037e6:	3304      	adds	r3, #4

080037e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037ec:	d3f9      	bcc.n	80037e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037f0:	4c0b      	ldr	r4, [pc, #44]	; (8003820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037f4:	e001      	b.n	80037fa <LoopFillZerobss>

080037f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f8:	3204      	adds	r2, #4

080037fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037fc:	d3fb      	bcc.n	80037f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037fe:	f7ff ffd7 	bl	80037b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003802:	f008 ff95 	bl	800c730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003806:	f7fd fb6d 	bl	8000ee4 <main>
  bx  lr    
 800380a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800380c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003814:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003818:	0800f8ac 	.word	0x0800f8ac
  ldr r2, =_sbss
 800381c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003820:	2000540c 	.word	0x2000540c

08003824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003824:	e7fe      	b.n	8003824 <ADC_IRQHandler>
	...

08003828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_Init+0x40>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <HAL_Init+0x40>)
 8003832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_Init+0x40>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_Init+0x40>)
 800383e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_Init+0x40>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <HAL_Init+0x40>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003850:	2003      	movs	r0, #3
 8003852:	f000 f94f 	bl	8003af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003856:	200f      	movs	r0, #15
 8003858:	f000 f808 	bl	800386c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800385c:	f7ff fc20 	bl	80030a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00

0800386c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_InitTick+0x54>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_InitTick+0x58>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003882:	fbb3 f3f1 	udiv	r3, r3, r1
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f967 	bl	8003b5e <HAL_SYSTICK_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00e      	b.n	80038b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d80a      	bhi.n	80038b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a0:	2200      	movs	r2, #0
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f000 f92f 	bl	8003b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038ac:	4a06      	ldr	r2, [pc, #24]	; (80038c8 <HAL_InitTick+0x5c>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	2000002c 	.word	0x2000002c
 80038c4:	20000034 	.word	0x20000034
 80038c8:	20000030 	.word	0x20000030

080038cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_IncTick+0x20>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_IncTick+0x24>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <HAL_IncTick+0x24>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000034 	.word	0x20000034
 80038f0:	200004d4 	.word	0x200004d4

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_GetTick+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	200004d4 	.word	0x200004d4

0800390c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff ffee 	bl	80038f4 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d005      	beq.n	8003932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_Delay+0x44>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003932:	bf00      	nop
 8003934:	f7ff ffde 	bl	80038f4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d8f7      	bhi.n	8003934 <HAL_Delay+0x28>
  {
  }
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000034 	.word	0x20000034

08003954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800397c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	; (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	; (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	4313      	orrs	r3, r2
         );
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	; 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac0:	d301      	bcc.n	8003ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <SysTick_Config+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ace:	210f      	movs	r1, #15
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f7ff ff8e 	bl	80039f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <SysTick_Config+0x40>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <SysTick_Config+0x40>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff29 	bl	8003954 <__NVIC_SetPriorityGrouping>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1c:	f7ff ff3e 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff8e 	bl	8003a48 <NVIC_EncodePriority>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff5d 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff31 	bl	80039b8 <__NVIC_EnableIRQ>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffa2 	bl	8003ab0 <SysTick_Config>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff feb6 	bl	80038f4 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d008      	beq.n	8003ba8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e052      	b.n	8003c4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0216 	bic.w	r2, r2, #22
 8003bb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <HAL_DMA_Abort+0x62>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0208 	bic.w	r2, r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf8:	e013      	b.n	8003c22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bfa:	f7ff fe7b 	bl	80038f4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d90c      	bls.n	8003c22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e015      	b.n	8003c4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e4      	bne.n	8003bfa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	223f      	movs	r2, #63	; 0x3f
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e00c      	b.n	8003c8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2205      	movs	r2, #5
 8003c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e16b      	b.n	8003f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 815a 	bne.w	8003f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d130      	bne.n	8003d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d017      	beq.n	8003d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d123      	bne.n	8003de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80b4 	beq.w	8003f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b60      	ldr	r3, [pc, #384]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a5f      	ldr	r2, [pc, #380]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_GPIO_Init+0x30c>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_GPIO_Init+0x310>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_GPIO_Init+0x314>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <HAL_GPIO_Init+0x226>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	; (8003fb4 <HAL_GPIO_Init+0x318>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d025      	beq.n	8003ebe <HAL_GPIO_Init+0x222>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	; (8003fb8 <HAL_GPIO_Init+0x31c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <HAL_GPIO_Init+0x21e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <HAL_GPIO_Init+0x320>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_GPIO_Init+0x21a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4e      	ldr	r2, [pc, #312]	; (8003fc0 <HAL_GPIO_Init+0x324>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0x216>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4d      	ldr	r2, [pc, #308]	; (8003fc4 <HAL_GPIO_Init+0x328>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_GPIO_Init+0x212>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4c      	ldr	r2, [pc, #304]	; (8003fc8 <HAL_GPIO_Init+0x32c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <HAL_GPIO_Init+0x20e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4b      	ldr	r2, [pc, #300]	; (8003fcc <HAL_GPIO_Init+0x330>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_GPIO_Init+0x20a>
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	e00e      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	e00c      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eaa:	2306      	movs	r3, #6
 8003eac:	e00a      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x228>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed4:	4935      	ldr	r1, [pc, #212]	; (8003fac <HAL_GPIO_Init+0x310>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f06:	4a32      	ldr	r2, [pc, #200]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f30:	4a27      	ldr	r2, [pc, #156]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f36:	4b26      	ldr	r3, [pc, #152]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_GPIO_Init+0x334>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	f67f ae90 	bls.w	8003cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40021800 	.word	0x40021800
 8003fcc:	40021c00 	.word	0x40021c00
 8003fd0:	40013c00 	.word	0x40013c00

08003fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe4:	787b      	ldrb	r3, [r7, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff0:	e003      	b.n	8003ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	041a      	lsls	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e12b      	b.n	8004272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff f86a 	bl	8003108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800406c:	f002 f858 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8004070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a81      	ldr	r2, [pc, #516]	; (800427c <HAL_I2C_Init+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d807      	bhi.n	800408c <HAL_I2C_Init+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_I2C_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e006      	b.n	800409a <HAL_I2C_Init+0x92>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7d      	ldr	r2, [pc, #500]	; (8004284 <HAL_I2C_Init+0x27c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e7      	b.n	8004272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a78      	ldr	r2, [pc, #480]	; (8004288 <HAL_I2C_Init+0x280>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_I2C_Init+0x274>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d802      	bhi.n	80040dc <HAL_I2C_Init+0xd4>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	e009      	b.n	80040f0 <HAL_I2C_Init+0xe8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_I2C_Init+0x284>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	3301      	adds	r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495c      	ldr	r1, [pc, #368]	; (800427c <HAL_I2C_Init+0x274>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d819      	bhi.n	8004144 <HAL_I2C_Init+0x13c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e59      	subs	r1, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004124:	400b      	ands	r3, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_Init+0x138>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb1 f3f3 	udiv	r3, r1, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	e051      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004140:	2304      	movs	r3, #4
 8004142:	e04f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_I2C_Init+0x168>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e012      	b.n	8004196 <HAL_I2C_Init+0x18e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x196>
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_I2C_Init+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e58      	subs	r0, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	440b      	add	r3, r1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6809      	ldr	r1, [r1, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6911      	ldr	r1, [r2, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000186a0 	.word	0x000186a0
 8004280:	001e847f 	.word	0x001e847f
 8004284:	003d08ff 	.word	0x003d08ff
 8004288:	431bde83 	.word	0x431bde83
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
 80042a0:	4613      	mov	r3, r2
 80042a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7ff fb26 	bl	80038f4 <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 80e0 	bne.w	8004478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2319      	movs	r3, #25
 80042be:	2201      	movs	r2, #1
 80042c0:	4970      	ldr	r1, [pc, #448]	; (8004484 <HAL_I2C_Master_Transmit+0x1f4>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f001 f8f6 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0d3      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x50>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0cc      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d007      	beq.n	8004306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2210      	movs	r2, #16
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a50      	ldr	r2, [pc, #320]	; (8004488 <HAL_I2C_Master_Transmit+0x1f8>)
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fde2 	bl	8004f18 <I2C_MasterRequestWrite>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e08d      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004374:	e066      	b.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 f970 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06b      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11b      	bne.n	8004418 <HAL_I2C_Master_Transmit+0x188>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6a39      	ldr	r1, [r7, #32]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 f960 	bl	80056e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e01a      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d194      	bne.n	8004376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	00100002 	.word	0x00100002
 8004488:	ffff0000 	.word	0xffff0000

0800448c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	817b      	strh	r3, [r7, #10]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a0:	f7ff fa28 	bl	80038f4 <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	f040 820b 	bne.w	80048ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2319      	movs	r3, #25
 80044ba:	2201      	movs	r2, #1
 80044bc:	497c      	ldr	r1, [pc, #496]	; (80046b0 <HAL_I2C_Master_Receive+0x224>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fff8 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e1fe      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_I2C_Master_Receive+0x50>
 80044d8:	2302      	movs	r3, #2
 80044da:	e1f7      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d007      	beq.n	8004502 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2222      	movs	r2, #34	; 0x22
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2210      	movs	r2, #16
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	893a      	ldrh	r2, [r7, #8]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a5c      	ldr	r2, [pc, #368]	; (80046b4 <HAL_I2C_Master_Receive+0x228>)
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004544:	8979      	ldrh	r1, [r7, #10]
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fd66 	bl	800501c <I2C_MasterRequestRead>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1b8      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e18c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b01      	cmp	r3, #1
 8004590:	d11b      	bne.n	80045ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e16c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d11b      	bne.n	800460a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	e14c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004630:	e138      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	2b03      	cmp	r3, #3
 8004638:	f200 80f1 	bhi.w	800481e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b01      	cmp	r3, #1
 8004642:	d123      	bne.n	800468c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f001 f88b 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e139      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800468a:	e10b      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b02      	cmp	r3, #2
 8004692:	d14e      	bne.n	8004732 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	4906      	ldr	r1, [pc, #24]	; (80046b8 <HAL_I2C_Master_Receive+0x22c>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 ff08 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e10e      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
 80046ae:	bf00      	nop
 80046b0:	00100002 	.word	0x00100002
 80046b4:	ffff0000 	.word	0xffff0000
 80046b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004730:	e0b8      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2200      	movs	r2, #0
 800473a:	4966      	ldr	r1, [pc, #408]	; (80048d4 <HAL_I2C_Master_Receive+0x448>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 feb9 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0bf      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	494f      	ldr	r1, [pc, #316]	; (80048d4 <HAL_I2C_Master_Receive+0x448>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fe8b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e091      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800481c:	e042      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 ff9e 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e04c      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d118      	bne.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f aec2 	bne.w	8004632 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3728      	adds	r7, #40	; 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00010004 	.word	0x00010004

080048d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f2:	f7fe ffff 	bl	80038f4 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80d9 	bne.w	8004ab8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2319      	movs	r3, #25
 800490c:	2201      	movs	r2, #1
 800490e:	496d      	ldr	r1, [pc, #436]	; (8004ac4 <HAL_I2C_Mem_Write+0x1ec>)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fdcf 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	e0cc      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2C_Mem_Write+0x56>
 800492a:	2302      	movs	r3, #2
 800492c:	e0c5      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d007      	beq.n	8004954 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a4d      	ldr	r2, [pc, #308]	; (8004ac8 <HAL_I2C_Mem_Write+0x1f0>)
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004996:	88f8      	ldrh	r0, [r7, #6]
 8004998:	893a      	ldrh	r2, [r7, #8]
 800499a:	8979      	ldrh	r1, [r7, #10]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4603      	mov	r3, r0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fc06 	bl	80051b8 <I2C_RequestMemoryWrite>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d052      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e081      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fe50 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_I2C_Mem_Write+0x180>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1aa      	bne.n	80049b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fe3c 	bl	80056e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d107      	bne.n	8004a88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e016      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	00100002 	.word	0x00100002
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	; 0x30
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	817b      	strh	r3, [r7, #10]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	813b      	strh	r3, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae6:	f7fe ff05 	bl	80038f4 <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	f040 8208 	bne.w	8004f0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2319      	movs	r3, #25
 8004b00:	2201      	movs	r2, #1
 8004b02:	497b      	ldr	r1, [pc, #492]	; (8004cf0 <HAL_I2C_Mem_Read+0x224>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fcd5 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e1fb      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x56>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e1f4      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2222      	movs	r2, #34	; 0x22
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a5b      	ldr	r2, [pc, #364]	; (8004cf4 <HAL_I2C_Mem_Read+0x228>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8a:	88f8      	ldrh	r0, [r7, #6]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	8979      	ldrh	r1, [r7, #10]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fba2 	bl	80052e4 <I2C_RequestMemoryRead>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1b0      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e184      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d11b      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e164      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d11b      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	e144      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c70:	e138      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f200 80f1 	bhi.w	8004e5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d123      	bne.n	8004ccc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fd6b 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e139      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cca:	e10b      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d14e      	bne.n	8004d72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <HAL_I2C_Mem_Read+0x22c>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fbe8 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e10e      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004cee:	bf00      	nop
 8004cf0:	00100002 	.word	0x00100002
 8004cf4:	ffff0000 	.word	0xffff0000
 8004cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d70:	e0b8      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4966      	ldr	r1, [pc, #408]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fb99 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0bf      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	494f      	ldr	r1, [pc, #316]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fb6b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e091      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5c:	e042      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fc7e 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04c      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d118      	bne.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f47f aec2 	bne.w	8004c72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3728      	adds	r7, #40	; 0x28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	00010004 	.word	0x00010004

08004f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d006      	beq.n	8004f42 <I2C_MasterRequestWrite+0x2a>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d003      	beq.n	8004f42 <I2C_MasterRequestWrite+0x2a>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f40:	d108      	bne.n	8004f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e00b      	b.n	8004f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b12      	cmp	r3, #18
 8004f5a:	d107      	bne.n	8004f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa9b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f92:	d103      	bne.n	8004f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e035      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e01b      	b.n	8004ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	11db      	asrs	r3, r3, #7
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 0306 	and.w	r3, r3, #6
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f063 030f 	orn	r3, r3, #15
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <I2C_MasterRequestWrite+0xfc>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fac1 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e010      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fea:	897b      	ldrh	r3, [r7, #10]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4907      	ldr	r1, [pc, #28]	; (8005018 <I2C_MasterRequestWrite+0x100>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fab1 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00010008 	.word	0x00010008
 8005018:	00010002 	.word	0x00010002

0800501c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d006      	beq.n	8005056 <I2C_MasterRequestRead+0x3a>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d003      	beq.n	8005056 <I2C_MasterRequestRead+0x3a>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005054:	d108      	bne.n	8005068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e00b      	b.n	8005080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b11      	cmp	r3, #17
 800506e:	d107      	bne.n	8005080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fa11 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d103      	bne.n	80050b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e079      	b.n	80051a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d108      	bne.n	80050d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	e05f      	b.n	8005190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050d0:	897b      	ldrh	r3, [r7, #10]
 80050d2:	11db      	asrs	r3, r3, #7
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f063 030f 	orn	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4930      	ldr	r1, [pc, #192]	; (80051b0 <I2C_MasterRequestRead+0x194>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa37 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e054      	b.n	80051a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4929      	ldr	r1, [pc, #164]	; (80051b4 <I2C_MasterRequestRead+0x198>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa27 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e044      	b.n	80051a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f9af 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00d      	beq.n	8005178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d103      	bne.n	8005174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e017      	b.n	80051a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005178:	897b      	ldrh	r3, [r7, #10]
 800517a:	11db      	asrs	r3, r3, #7
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f063 030e 	orn	r3, r3, #14
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <I2C_MasterRequestRead+0x198>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f9e3 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010008 	.word	0x00010008
 80051b4:	00010002 	.word	0x00010002

080051b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	817b      	strh	r3, [r7, #10]
 80051ca:	460b      	mov	r3, r1
 80051cc:	813b      	strh	r3, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f960 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	d103      	bne.n	8005212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e05f      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	492d      	ldr	r1, [pc, #180]	; (80052e0 <I2C_RequestMemoryWrite+0x128>)
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f998 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04c      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	6a39      	ldr	r1, [r7, #32]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa02 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b04      	cmp	r3, #4
 8005268:	d107      	bne.n	800527a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e02b      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005284:	893b      	ldrh	r3, [r7, #8]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]
 800528e:	e021      	b.n	80052d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b29b      	uxth	r3, r3
 8005296:	b2da      	uxtb	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f9dc 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d107      	bne.n	80052c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e005      	b.n	80052d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	00010002 	.word	0x00010002

080052e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2200      	movs	r2, #0
 8005326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8c2 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005344:	d103      	bne.n	800534e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e0aa      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	4952      	ldr	r1, [pc, #328]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f8fa 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e097      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f964 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e076      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	e021      	b.n	8005410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f93e 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e050      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f923 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e035      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f82b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d103      	bne.n	800547c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e013      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	6a3a      	ldr	r2, [r7, #32]
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f863 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010002 	.word	0x00010002

080054b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c4:	e025      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d021      	beq.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fe fa11 	bl	80038f4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d116      	bne.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e023      	b.n	800555a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10d      	bne.n	8005538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	43da      	mvns	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	e00c      	b.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d0b6      	beq.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005570:	e051      	b.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d123      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e046      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d021      	beq.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fe f98f 	bl	80038f4 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e020      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10c      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e00b      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	43da      	mvns	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d18d      	bne.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	e02d      	b.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8ce 	bl	8005810 <I2C_IsAcknowledgeFailed>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e02d      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d021      	beq.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fe f935 	bl	80038f4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d116      	bne.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e007      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d1ca      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ee:	e02d      	b.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f88d 	bl	8005810 <I2C_IsAcknowledgeFailed>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e02d      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d021      	beq.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fe f8f4 	bl	80038f4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d116      	bne.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e007      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d1ca      	bne.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005770:	e042      	b.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d119      	bne.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e029      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b4:	f7fe f89e 	bl	80038f4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d302      	bcc.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d116      	bne.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e007      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d1b5      	bne.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	d11b      	bne.n	8005860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f043 0204 	orr.w	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_PWR_EnableBkUpAccess+0x24>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005882:	687b      	ldr	r3, [r7, #4]
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	420e0020 	.word	0x420e0020
 8005894:	40007000 	.word	0x40007000

08005898 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_PWR_DisableBkUpAccess+0x24>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80058aa:	687b      	ldr	r3, [r7, #4]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	420e0020 	.word	0x420e0020
 80058bc:	40007000 	.word	0x40007000

080058c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e267      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d075      	beq.n	80059ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058de:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d00c      	beq.n	8005904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ea:	4b85      	ldr	r3, [pc, #532]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d112      	bne.n	800591c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f6:	4b82      	ldr	r3, [pc, #520]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005902:	d10b      	bne.n	800591c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	4b7e      	ldr	r3, [pc, #504]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d05b      	beq.n	80059c8 <HAL_RCC_OscConfig+0x108>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d157      	bne.n	80059c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e242      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005924:	d106      	bne.n	8005934 <HAL_RCC_OscConfig+0x74>
 8005926:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a75      	ldr	r2, [pc, #468]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e01d      	b.n	8005970 <HAL_RCC_OscConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593c:	d10c      	bne.n	8005958 <HAL_RCC_OscConfig+0x98>
 800593e:	4b70      	ldr	r3, [pc, #448]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6f      	ldr	r2, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	4b6d      	ldr	r3, [pc, #436]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6c      	ldr	r2, [pc, #432]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e00b      	b.n	8005970 <HAL_RCC_OscConfig+0xb0>
 8005958:	4b69      	ldr	r3, [pc, #420]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a68      	ldr	r2, [pc, #416]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 800595e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a65      	ldr	r2, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 800596a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d013      	beq.n	80059a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005978:	f7fd ffbc 	bl	80038f4 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005980:	f7fd ffb8 	bl	80038f4 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e207      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0xc0>
 800599e:	e014      	b.n	80059ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fd ffa8 	bl	80038f4 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fd ffa4 	bl	80038f4 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	; 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e1f3      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0xe8>
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d063      	beq.n	8005a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059d6:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e2:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d11c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ee:	4b44      	ldr	r3, [pc, #272]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d116      	bne.n	8005a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCC_OscConfig+0x152>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e1c7      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a12:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4937      	ldr	r1, [pc, #220]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	e03a      	b.n	8005a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d020      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <HAL_RCC_OscConfig+0x244>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fd ff5d 	bl	80038f4 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fd ff59 	bl	80038f4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e1a8      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f0      	beq.n	8005a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4925      	ldr	r1, [pc, #148]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	e015      	b.n	8005a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x244>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd ff3c 	bl	80038f4 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a80:	f7fd ff38 	bl	80038f4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e187      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d036      	beq.n	8005b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_RCC_OscConfig+0x248>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fd ff1c 	bl	80038f4 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac0:	f7fd ff18 	bl	80038f4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e167      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x200>
 8005ade:	e01b      	b.n	8005b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCC_OscConfig+0x248>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae6:	f7fd ff05 	bl	80038f4 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aec:	e00e      	b.n	8005b0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aee:	f7fd ff01 	bl	80038f4 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d907      	bls.n	8005b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e150      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
 8005b00:	40023800 	.word	0x40023800
 8005b04:	42470000 	.word	0x42470000
 8005b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	4b88      	ldr	r3, [pc, #544]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1ea      	bne.n	8005aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8097 	beq.w	8005c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2a:	4b81      	ldr	r3, [pc, #516]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	4b7d      	ldr	r3, [pc, #500]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a7c      	ldr	r2, [pc, #496]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	4b7a      	ldr	r3, [pc, #488]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	4b77      	ldr	r3, [pc, #476]	; (8005d34 <HAL_RCC_OscConfig+0x474>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d118      	bne.n	8005b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b62:	4b74      	ldr	r3, [pc, #464]	; (8005d34 <HAL_RCC_OscConfig+0x474>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a73      	ldr	r2, [pc, #460]	; (8005d34 <HAL_RCC_OscConfig+0x474>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6e:	f7fd fec1 	bl	80038f4 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fd febd 	bl	80038f4 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e10c      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	4b6a      	ldr	r3, [pc, #424]	; (8005d34 <HAL_RCC_OscConfig+0x474>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <HAL_RCC_OscConfig+0x2ea>
 8005b9c:	4b64      	ldr	r3, [pc, #400]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	4a63      	ldr	r2, [pc, #396]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCC_OscConfig+0x324>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x30c>
 8005bb2:	4b5f      	ldr	r3, [pc, #380]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a5e      	ldr	r2, [pc, #376]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a5b      	ldr	r2, [pc, #364]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	e00b      	b.n	8005be4 <HAL_RCC_OscConfig+0x324>
 8005bcc:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	4a57      	ldr	r2, [pc, #348]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd8:	4b55      	ldr	r3, [pc, #340]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a54      	ldr	r2, [pc, #336]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005bde:	f023 0304 	bic.w	r3, r3, #4
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fd fe82 	bl	80038f4 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fd fe7e 	bl	80038f4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0cb      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0a:	4b49      	ldr	r3, [pc, #292]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ee      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x334>
 8005c16:	e014      	b.n	8005c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c18:	f7fd fe6c 	bl	80038f4 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd fe68 	bl	80038f4 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0b5      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c36:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ee      	bne.n	8005c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c48:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	4a38      	ldr	r2, [pc, #224]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80a1 	beq.w	8005da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d05c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d141      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c72:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <HAL_RCC_OscConfig+0x478>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fd fe3c 	bl	80038f4 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fd fe38 	bl	80038f4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e087      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	019b      	lsls	r3, r3, #6
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	061b      	lsls	r3, r3, #24
 8005cc2:	491b      	ldr	r1, [pc, #108]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x478>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cce:	f7fd fe11 	bl	80038f4 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd6:	f7fd fe0d 	bl	80038f4 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e05c      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x416>
 8005cf4:	e054      	b.n	8005da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf6:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <HAL_RCC_OscConfig+0x478>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fd fdfa 	bl	80038f4 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fd fdf6 	bl	80038f4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e045      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_RCC_OscConfig+0x470>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x444>
 8005d22:	e03d      	b.n	8005da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e038      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
 8005d30:	40023800 	.word	0x40023800
 8005d34:	40007000 	.word	0x40007000
 8005d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <HAL_RCC_OscConfig+0x4ec>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d028      	beq.n	8005d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d121      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d11a      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d111      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	3b01      	subs	r3, #1
 8005d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40023800 	.word	0x40023800

08005db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0cc      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b68      	ldr	r3, [pc, #416]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d90c      	bls.n	8005dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b63      	ldr	r3, [pc, #396]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0b8      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	4a58      	ldr	r2, [pc, #352]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e1c:	4b53      	ldr	r3, [pc, #332]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a52      	ldr	r2, [pc, #328]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e28:	4b50      	ldr	r3, [pc, #320]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	494d      	ldr	r1, [pc, #308]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d044      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d119      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e07f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d003      	beq.n	8005e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e06f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7e:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e067      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e8e:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f023 0203 	bic.w	r2, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4934      	ldr	r1, [pc, #208]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea0:	f7fd fd28 	bl	80038f4 <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea8:	f7fd fd24 	bl	80038f4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e04f      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 020c 	and.w	r2, r3, #12
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d1eb      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d20c      	bcs.n	8005ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e032      	b.n	8005f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f04:	4b19      	ldr	r3, [pc, #100]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4916      	ldr	r1, [pc, #88]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f22:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	490e      	ldr	r1, [pc, #56]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f36:	f000 f821 	bl	8005f7c <HAL_RCC_GetSysClockFreq>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	490a      	ldr	r1, [pc, #40]	; (8005f70 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	5ccb      	ldrb	r3, [r1, r3]
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <HAL_RCC_ClockConfig+0x1c4>)
 8005f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCC_ClockConfig+0x1c8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fd fc88 	bl	800386c <HAL_InitTick>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023c00 	.word	0x40023c00
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	0800eab0 	.word	0x0800eab0
 8005f74:	2000002c 	.word	0x2000002c
 8005f78:	20000030 	.word	0x20000030

08005f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b090      	sub	sp, #64	; 0x40
 8005f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f94:	4b59      	ldr	r3, [pc, #356]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 030c 	and.w	r3, r3, #12
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d00d      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x40>
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	f200 80a1 	bhi.w	80060e8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d003      	beq.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fae:	e09b      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fb0:	4b53      	ldr	r3, [pc, #332]	; (8006100 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fb4:	e09b      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fb6:	4b53      	ldr	r3, [pc, #332]	; (8006104 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fba:	e098      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fbc:	4b4f      	ldr	r3, [pc, #316]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fc6:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d028      	beq.n	8006024 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	099b      	lsrs	r3, r3, #6
 8005fd8:	2200      	movs	r2, #0
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	627a      	str	r2, [r7, #36]	; 0x24
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fe8:	fb03 f201 	mul.w	r2, r3, r1
 8005fec:	2300      	movs	r3, #0
 8005fee:	fb00 f303 	mul.w	r3, r0, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	4a43      	ldr	r2, [pc, #268]	; (8006104 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff6:	fba0 1202 	umull	r1, r2, r0, r2
 8005ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffc:	460a      	mov	r2, r1
 8005ffe:	62ba      	str	r2, [r7, #40]	; 0x28
 8006000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006002:	4413      	add	r3, r2
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	2200      	movs	r2, #0
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006012:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006016:	f7fa fde7 	bl	8000be8 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4613      	mov	r3, r2
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006022:	e053      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006024:	4b35      	ldr	r3, [pc, #212]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	099b      	lsrs	r3, r3, #6
 800602a:	2200      	movs	r2, #0
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	617a      	str	r2, [r7, #20]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006036:	f04f 0b00 	mov.w	fp, #0
 800603a:	4652      	mov	r2, sl
 800603c:	465b      	mov	r3, fp
 800603e:	f04f 0000 	mov.w	r0, #0
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	0159      	lsls	r1, r3, #5
 8006048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800604c:	0150      	lsls	r0, r2, #5
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	ebb2 080a 	subs.w	r8, r2, sl
 8006056:	eb63 090b 	sbc.w	r9, r3, fp
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006066:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800606a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800606e:	ebb2 0408 	subs.w	r4, r2, r8
 8006072:	eb63 0509 	sbc.w	r5, r3, r9
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	00eb      	lsls	r3, r5, #3
 8006080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006084:	00e2      	lsls	r2, r4, #3
 8006086:	4614      	mov	r4, r2
 8006088:	461d      	mov	r5, r3
 800608a:	eb14 030a 	adds.w	r3, r4, sl
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	eb45 030b 	adc.w	r3, r5, fp
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060a2:	4629      	mov	r1, r5
 80060a4:	028b      	lsls	r3, r1, #10
 80060a6:	4621      	mov	r1, r4
 80060a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060ac:	4621      	mov	r1, r4
 80060ae:	028a      	lsls	r2, r1, #10
 80060b0:	4610      	mov	r0, r2
 80060b2:	4619      	mov	r1, r3
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	2200      	movs	r2, #0
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	60fa      	str	r2, [r7, #12]
 80060bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060c0:	f7fa fd92 	bl	8000be8 <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4613      	mov	r3, r2
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <HAL_RCC_GetSysClockFreq+0x180>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	3301      	adds	r3, #1
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060e6:	e002      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_RCC_GetSysClockFreq+0x184>)
 80060ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3740      	adds	r7, #64	; 0x40
 80060f4:	46bd      	mov	sp, r7
 80060f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fa:	bf00      	nop
 80060fc:	40023800 	.word	0x40023800
 8006100:	00f42400 	.word	0x00f42400
 8006104:	017d7840 	.word	0x017d7840

08006108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_RCC_GetHCLKFreq+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000002c 	.word	0x2000002c

08006120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006124:	f7ff fff0 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	0a9b      	lsrs	r3, r3, #10
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4903      	ldr	r1, [pc, #12]	; (8006144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40023800 	.word	0x40023800
 8006144:	0800eac0 	.word	0x0800eac0

08006148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800614c:	f7ff ffdc 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006150:	4602      	mov	r2, r0
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	0b5b      	lsrs	r3, r3, #13
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	4903      	ldr	r1, [pc, #12]	; (800616c <HAL_RCC_GetPCLK2Freq+0x24>)
 800615e:	5ccb      	ldrb	r3, [r1, r3]
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40023800 	.word	0x40023800
 800616c:	0800eac0 	.word	0x0800eac0

08006170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e041      	b.n	8006206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fffe 	bl	8003198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 fe6c 	bl	8006e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e041      	b.n	80062a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f839 	bl	80062ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f000 fe1d 	bl	8006e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_TIM_PWM_Start+0x24>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e022      	b.n	800632a <HAL_TIM_PWM_Start+0x6a>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d109      	bne.n	80062fe <HAL_TIM_PWM_Start+0x3e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	e015      	b.n	800632a <HAL_TIM_PWM_Start+0x6a>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d109      	bne.n	8006318 <HAL_TIM_PWM_Start+0x58>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e008      	b.n	800632a <HAL_TIM_PWM_Start+0x6a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	bf14      	ite	ne
 8006324:	2301      	movne	r3, #1
 8006326:	2300      	moveq	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e07c      	b.n	800642c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Start+0x82>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006340:	e013      	b.n	800636a <HAL_TIM_PWM_Start+0xaa>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b04      	cmp	r3, #4
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0x92>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006350:	e00b      	b.n	800636a <HAL_TIM_PWM_Start+0xaa>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0xa2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006360:	e003      	b.n	800636a <HAL_TIM_PWM_Start+0xaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2201      	movs	r2, #1
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f99e 	bl	80076b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <HAL_TIM_PWM_Start+0x174>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d004      	beq.n	800638c <HAL_TIM_PWM_Start+0xcc>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <HAL_TIM_PWM_Start+0x178>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d101      	bne.n	8006390 <HAL_TIM_PWM_Start+0xd0>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <HAL_TIM_PWM_Start+0xd2>
 8006390:	2300      	movs	r3, #0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_TIM_PWM_Start+0x174>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d022      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d01d      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_TIM_PWM_Start+0x17c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d018      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <HAL_TIM_PWM_Start+0x180>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <HAL_TIM_PWM_Start+0x184>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00e      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a16      	ldr	r2, [pc, #88]	; (8006438 <HAL_TIM_PWM_Start+0x178>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a18      	ldr	r2, [pc, #96]	; (8006448 <HAL_TIM_PWM_Start+0x188>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x136>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a16      	ldr	r2, [pc, #88]	; (800644c <HAL_TIM_PWM_Start+0x18c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d111      	bne.n	800641a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b06      	cmp	r3, #6
 8006406:	d010      	beq.n	800642a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	e007      	b.n	800642a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40014000 	.word	0x40014000
 800644c:	40001800 	.word	0x40001800

08006450 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e041      	b.n	80064e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc ff9e 	bl	80033b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f000 fcfc 	bl	8006e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e097      	b.n	8006632 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fc feb4 	bl	8003284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 fca2 	bl	8006e8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006570:	f023 0303 	bic.w	r3, r3, #3
 8006574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	4313      	orrs	r3, r2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800658e:	f023 030c 	bic.w	r3, r3, #12
 8006592:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	021b      	lsls	r3, r3, #8
 80065aa:	4313      	orrs	r3, r2
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	011a      	lsls	r2, r3, #4
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	031b      	lsls	r3, r3, #12
 80065be:	4313      	orrs	r3, r2
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065cc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065d4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	4313      	orrs	r3, r2
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006652:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800665a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006662:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d102      	bne.n	8006676 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006670:	7b7b      	ldrb	r3, [r7, #13]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e069      	b.n	800674e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800668a:	e031      	b.n	80066f0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b04      	cmp	r3, #4
 8006690:	d110      	bne.n	80066b4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d102      	bne.n	800669e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006698:	7b3b      	ldrb	r3, [r7, #12]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e055      	b.n	800674e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b2:	e01d      	b.n	80066f0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d108      	bne.n	80066cc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d105      	bne.n	80066cc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c0:	7b7b      	ldrb	r3, [r7, #13]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066c6:	7b3b      	ldrb	r3, [r7, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e03e      	b.n	800674e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_TIM_Encoder_Start+0xc4>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d008      	beq.n	800670e <HAL_TIM_Encoder_Start+0xd4>
 80066fc:	e00f      	b.n	800671e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 ffd4 	bl	80076b4 <TIM_CCxChannelCmd>
      break;
 800670c:	e016      	b.n	800673c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2201      	movs	r2, #1
 8006714:	2104      	movs	r1, #4
 8006716:	4618      	mov	r0, r3
 8006718:	f000 ffcc 	bl	80076b4 <TIM_CCxChannelCmd>
      break;
 800671c:	e00e      	b.n	800673c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2201      	movs	r2, #1
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ffc4 	bl	80076b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	2104      	movs	r1, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f000 ffbd 	bl	80076b4 <TIM_CCxChannelCmd>
      break;
 800673a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d122      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d11b      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0202 	mvn.w	r2, #2
 8006782:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fb f801 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 800679e:	e005      	b.n	80067ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb55 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb5c 	bl	8006e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d122      	bne.n	8006806 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d11b      	bne.n	8006806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0204 	mvn.w	r2, #4
 80067d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fa ffd7 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 80067f2:	e005      	b.n	8006800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb2b 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fb32 	bl	8006e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d122      	bne.n	800685a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b08      	cmp	r3, #8
 8006820:	d11b      	bne.n	800685a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0208 	mvn.w	r2, #8
 800682a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f003 0303 	and.w	r3, r3, #3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fa ffad 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 8006846:	e005      	b.n	8006854 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb01 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fb08 	bl	8006e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b10      	cmp	r3, #16
 8006866:	d122      	bne.n	80068ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b10      	cmp	r3, #16
 8006874:	d11b      	bne.n	80068ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f06f 0210 	mvn.w	r2, #16
 800687e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2208      	movs	r2, #8
 8006884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fa ff83 	bl	80017a0 <HAL_TIM_IC_CaptureCallback>
 800689a:	e005      	b.n	80068a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fad7 	bl	8006e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fade 	bl	8006e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d10e      	bne.n	80068da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d107      	bne.n	80068da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f06f 0201 	mvn.w	r2, #1
 80068d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fab1 	bl	8006e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b80      	cmp	r3, #128	; 0x80
 80068e6:	d10e      	bne.n	8006906 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d107      	bne.n	8006906 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 ffd5 	bl	80078b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d10e      	bne.n	8006932 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d107      	bne.n	8006932 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800692a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 faa3 	bl	8006e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d10e      	bne.n	800695e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d107      	bne.n	800695e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f06f 0220 	mvn.w	r2, #32
 8006956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 ff9f 	bl	800789c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b086      	sub	sp, #24
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006980:	2302      	movs	r3, #2
 8006982:	e088      	b.n	8006a96 <HAL_TIM_IC_ConfigChannel+0x130>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11b      	bne.n	80069ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6819      	ldr	r1, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f000 fcc3 	bl	800732c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 020c 	bic.w	r2, r2, #12
 80069b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6999      	ldr	r1, [r3, #24]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	619a      	str	r2, [r3, #24]
 80069c8:	e060      	b.n	8006a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d11c      	bne.n	8006a0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6819      	ldr	r1, [r3, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f000 fd47 	bl	8007472 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6999      	ldr	r1, [r3, #24]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	619a      	str	r2, [r3, #24]
 8006a08:	e040      	b.n	8006a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d11b      	bne.n	8006a48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f000 fd94 	bl	800754c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 020c 	bic.w	r2, r2, #12
 8006a32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69d9      	ldr	r1, [r3, #28]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	61da      	str	r2, [r3, #28]
 8006a46:	e021      	b.n	8006a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b0c      	cmp	r3, #12
 8006a4c:	d11c      	bne.n	8006a88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6819      	ldr	r1, [r3, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f000 fdb1 	bl	80075c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69d9      	ldr	r1, [r3, #28]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	021a      	lsls	r2, r3, #8
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	61da      	str	r2, [r3, #28]
 8006a86:	e001      	b.n	8006a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e0ae      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	f200 809f 	bhi.w	8006c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006c0d 	.word	0x08006c0d
 8006adc:	08006c0d 	.word	0x08006c0d
 8006ae0:	08006c0d 	.word	0x08006c0d
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006c0d 	.word	0x08006c0d
 8006aec:	08006c0d 	.word	0x08006c0d
 8006af0:	08006c0d 	.word	0x08006c0d
 8006af4:	08006b8b 	.word	0x08006b8b
 8006af8:	08006c0d 	.word	0x08006c0d
 8006afc:	08006c0d 	.word	0x08006c0d
 8006b00:	08006c0d 	.word	0x08006c0d
 8006b04:	08006bcb 	.word	0x08006bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fa5c 	bl	8006fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0204 	bic.w	r2, r2, #4
 8006b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	619a      	str	r2, [r3, #24]
      break;
 8006b46:	e064      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 faac 	bl	80070ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
      break;
 8006b88:	e043      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fb01 	bl	8007198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0204 	bic.w	r2, r2, #4
 8006bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69d9      	ldr	r1, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	61da      	str	r2, [r3, #28]
      break;
 8006bc8:	e023      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fb55 	bl	8007280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	61da      	str	r2, [r3, #28]
      break;
 8006c0a:	e002      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0b4      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x186>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c78:	d03e      	beq.n	8006cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	f200 8087 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	f000 8086 	beq.w	8006d96 <HAL_TIM_ConfigClockSource+0x172>
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d87f      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d01a      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0xa6>
 8006c94:	2b70      	cmp	r3, #112	; 0x70
 8006c96:	d87b      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d050      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x11a>
 8006c9c:	2b60      	cmp	r3, #96	; 0x60
 8006c9e:	d877      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d03c      	beq.n	8006d1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ca4:	2b50      	cmp	r3, #80	; 0x50
 8006ca6:	d873      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d058      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x13a>
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d86f      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d064      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d86b      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d060      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d867      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05c      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d05a      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	e062      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f000 fccb 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	609a      	str	r2, [r3, #8]
      break;
 8006cf6:	e04f      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f000 fcb4 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d1a:	609a      	str	r2, [r3, #8]
      break;
 8006d1c:	e03c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6859      	ldr	r1, [r3, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f000 fb72 	bl	8007414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2150      	movs	r1, #80	; 0x50
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fc81 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006d3c:	e02c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6859      	ldr	r1, [r3, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f000 fbce 	bl	80074ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2160      	movs	r1, #96	; 0x60
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fc71 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006d5c:	e01c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f000 fb52 	bl	8007414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2140      	movs	r1, #64	; 0x40
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fc61 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 fc58 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006d8e:	e003      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e000      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d831      	bhi.n	8006e2c <HAL_TIM_ReadCapturedValue+0x78>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e2d 	.word	0x08006e2d
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006e2d 	.word	0x08006e2d
 8006de0:	08006e0f 	.word	0x08006e0f
 8006de4:	08006e2d 	.word	0x08006e2d
 8006de8:	08006e2d 	.word	0x08006e2d
 8006dec:	08006e2d 	.word	0x08006e2d
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e2d 	.word	0x08006e2d
 8006df8:	08006e2d 	.word	0x08006e2d
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e23 	.word	0x08006e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	60fb      	str	r3, [r7, #12]

      break;
 8006e0c:	e00f      	b.n	8006e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	60fb      	str	r3, [r7, #12]

      break;
 8006e16:	e00a      	b.n	8006e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	60fb      	str	r3, [r7, #12]

      break;
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	60fb      	str	r3, [r7, #12]

      break;
 8006e2a:	e000      	b.n	8006e2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e2c:	bf00      	nop
  }

  return tmpreg;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d013      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eaa:	d00f      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a3d      	ldr	r2, [pc, #244]	; (8006fa4 <TIM_Base_SetConfig+0x118>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a3c      	ldr	r2, [pc, #240]	; (8006fa8 <TIM_Base_SetConfig+0x11c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3b      	ldr	r2, [pc, #236]	; (8006fac <TIM_Base_SetConfig+0x120>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3a      	ldr	r2, [pc, #232]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a2f      	ldr	r2, [pc, #188]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d02b      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d027      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <TIM_Base_SetConfig+0x118>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d023      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2b      	ldr	r2, [pc, #172]	; (8006fa8 <TIM_Base_SetConfig+0x11c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d01f      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <TIM_Base_SetConfig+0x120>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01b      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a29      	ldr	r2, [pc, #164]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d017      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a28      	ldr	r2, [pc, #160]	; (8006fb4 <TIM_Base_SetConfig+0x128>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d013      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <TIM_Base_SetConfig+0x12c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00f      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <TIM_Base_SetConfig+0x130>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00b      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <TIM_Base_SetConfig+0x134>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d007      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a24      	ldr	r2, [pc, #144]	; (8006fc4 <TIM_Base_SetConfig+0x138>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a23      	ldr	r2, [pc, #140]	; (8006fc8 <TIM_Base_SetConfig+0x13c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d108      	bne.n	8006f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <TIM_Base_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_Base_SetConfig+0xf8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a0c      	ldr	r2, [pc, #48]	; (8006fb0 <TIM_Base_SetConfig+0x124>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d103      	bne.n	8006f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	615a      	str	r2, [r3, #20]
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40010400 	.word	0x40010400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	40001800 	.word	0x40001800
 8006fc4:	40001c00 	.word	0x40001c00
 8006fc8:	40002000 	.word	0x40002000

08006fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 0302 	bic.w	r3, r3, #2
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <TIM_OC1_SetConfig+0xd8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC1_SetConfig+0x64>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <TIM_OC1_SetConfig+0xdc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10c      	bne.n	800704a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0308 	bic.w	r3, r3, #8
 8007036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <TIM_OC1_SetConfig+0xd8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_OC1_SetConfig+0x8e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <TIM_OC1_SetConfig+0xdc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40010400 	.word	0x40010400

080070ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0210 	bic.w	r2, r3, #16
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0320 	bic.w	r3, r3, #32
 80070f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	4313      	orrs	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a22      	ldr	r2, [pc, #136]	; (8007190 <TIM_OC2_SetConfig+0xe4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC2_SetConfig+0x68>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <TIM_OC2_SetConfig+0xe8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10d      	bne.n	8007130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a17      	ldr	r2, [pc, #92]	; (8007190 <TIM_OC2_SetConfig+0xe4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC2_SetConfig+0x94>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a16      	ldr	r2, [pc, #88]	; (8007194 <TIM_OC2_SetConfig+0xe8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d113      	bne.n	8007168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400

08007198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <TIM_OC3_SetConfig+0xe0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_OC3_SetConfig+0x66>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a20      	ldr	r2, [pc, #128]	; (800727c <TIM_OC3_SetConfig+0xe4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d10d      	bne.n	800721a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a16      	ldr	r2, [pc, #88]	; (8007278 <TIM_OC3_SetConfig+0xe0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d003      	beq.n	800722a <TIM_OC3_SetConfig+0x92>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a15      	ldr	r2, [pc, #84]	; (800727c <TIM_OC3_SetConfig+0xe4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d113      	bne.n	8007252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	621a      	str	r2, [r3, #32]
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400

08007280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	031b      	lsls	r3, r3, #12
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <TIM_OC4_SetConfig+0xa4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC4_SetConfig+0x68>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a11      	ldr	r2, [pc, #68]	; (8007328 <TIM_OC4_SetConfig+0xa8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d109      	bne.n	80072fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	019b      	lsls	r3, r3, #6
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400

0800732c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a28      	ldr	r2, [pc, #160]	; (80073f8 <TIM_TI1_SetConfig+0xcc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007360:	d017      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a25      	ldr	r2, [pc, #148]	; (80073fc <TIM_TI1_SetConfig+0xd0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a24      	ldr	r2, [pc, #144]	; (8007400 <TIM_TI1_SetConfig+0xd4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4a23      	ldr	r2, [pc, #140]	; (8007404 <TIM_TI1_SetConfig+0xd8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <TIM_TI1_SetConfig+0xdc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4a21      	ldr	r2, [pc, #132]	; (800740c <TIM_TI1_SetConfig+0xe0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_TI1_SetConfig+0x66>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a20      	ldr	r2, [pc, #128]	; (8007410 <TIM_TI1_SetConfig+0xe4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d101      	bne.n	8007396 <TIM_TI1_SetConfig+0x6a>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <TIM_TI1_SetConfig+0x6c>
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e003      	b.n	80073b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f023 030a 	bic.w	r3, r3, #10
 80073d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f003 030a 	and.w	r3, r3, #10
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40010000 	.word	0x40010000
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40000c00 	.word	0x40000c00
 8007408:	40010400 	.word	0x40010400
 800740c:	40014000 	.word	0x40014000
 8007410:	40001800 	.word	0x40001800

08007414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800743e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 030a 	bic.w	r3, r3, #10
 8007450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007472:	b480      	push	{r7}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f023 0210 	bic.w	r2, r3, #16
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	031b      	lsls	r3, r3, #12
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	621a      	str	r2, [r3, #32]
}
 80074e0:	bf00      	nop
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f023 0210 	bic.w	r2, r3, #16
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	031b      	lsls	r3, r3, #12
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007528:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	621a      	str	r2, [r3, #32]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 0303 	bic.w	r3, r3, #3
 8007578:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007588:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	b2db      	uxtb	r3, r3
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800759c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007602:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	031b      	lsls	r3, r3, #12
 8007608:	b29b      	uxth	r3, r3
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007616:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	031b      	lsls	r3, r3, #12
 800761c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	f043 0307 	orr.w	r3, r3, #7
 8007660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	609a      	str	r2, [r3, #8]
}
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	431a      	orrs	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2201      	movs	r2, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	401a      	ands	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	621a      	str	r2, [r3, #32]
}
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e05a      	b.n	80077ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d01d      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1d      	ldr	r2, [pc, #116]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d018      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1a      	ldr	r2, [pc, #104]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a18      	ldr	r2, [pc, #96]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a17      	ldr	r2, [pc, #92]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d10c      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800
 80077e8:	40000c00 	.word	0x40000c00
 80077ec:	40010400 	.word	0x40010400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40001800 	.word	0x40001800

080077f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007810:	2302      	movs	r3, #2
 8007812:	e03d      	b.n	8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4313      	orrs	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e03f      	b.n	8007956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fb fdee 	bl	80034cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2224      	movs	r2, #36	; 0x24
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fddf 	bl	80084cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800791c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800792c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800793c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08a      	sub	sp, #40	; 0x28
 8007962:	af02      	add	r7, sp, #8
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	603b      	str	r3, [r7, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b20      	cmp	r3, #32
 800797c:	d17c      	bne.n	8007a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_UART_Transmit+0x2c>
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e075      	b.n	8007a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_UART_Transmit+0x3e>
 8007998:	2302      	movs	r3, #2
 800799a:	e06e      	b.n	8007a7a <HAL_UART_Transmit+0x11c>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2221      	movs	r2, #33	; 0x21
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079b2:	f7fb ff9f 	bl	80038f4 <HAL_GetTick>
 80079b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079cc:	d108      	bne.n	80079e0 <HAL_UART_Transmit+0x82>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	e003      	b.n	80079e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079f0:	e02a      	b.n	8007a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fb1f 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e036      	b.n	8007a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	3302      	adds	r3, #2
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e007      	b.n	8007a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1cf      	bne.n	80079f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2140      	movs	r1, #64	; 0x40
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 faef 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e006      	b.n	8007a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d11d      	bne.n	8007ad8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Receive_IT+0x26>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e016      	b.n	8007ada <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Receive_IT+0x38>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e00f      	b.n	8007ada <HAL_UART_Receive_IT+0x58>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	461a      	mov	r2, r3
 8007acc:	68b9      	ldr	r1, [r7, #8]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fb24 	bl	800811c <UART_Start_Receive_IT>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	e000      	b.n	8007ada <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ad8:	2302      	movs	r3, #2
  }
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b0ba      	sub	sp, #232	; 0xe8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10f      	bne.n	8007b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <HAL_UART_IRQHandler+0x66>
 8007b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc07 	bl	8008356 <UART_Receive_IT>
      return;
 8007b48:	e256      	b.n	8007ff8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80de 	beq.w	8007d10 <HAL_UART_IRQHandler+0x22c>
 8007b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80d1 	beq.w	8007d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <HAL_UART_IRQHandler+0xae>
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f043 0201 	orr.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xd2>
 8007b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f043 0202 	orr.w	r2, r3, #2
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <HAL_UART_IRQHandler+0xf6>
 8007bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f043 0204 	orr.w	r2, r3, #4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d011      	beq.n	8007c0a <HAL_UART_IRQHandler+0x126>
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d105      	bne.n	8007bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0208 	orr.w	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 81ed 	beq.w	8007fee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d008      	beq.n	8007c32 <HAL_UART_IRQHandler+0x14e>
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fb92 	bl	8008356 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <HAL_UART_IRQHandler+0x17a>
 8007c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d04f      	beq.n	8007cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa9a 	bl	8008198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d141      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3314      	adds	r3, #20
 8007c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1d9      	bne.n	8007c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d013      	beq.n	8007cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	4a7d      	ldr	r2, [pc, #500]	; (8007ec0 <HAL_UART_IRQHandler+0x3dc>)
 8007ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fb ffbf 	bl	8003c56 <HAL_DMA_Abort_IT>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d016      	beq.n	8007d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cec:	e00e      	b.n	8007d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f990 	bl	8008014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf4:	e00a      	b.n	8007d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f98c 	bl	8008014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	e006      	b.n	8007d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f988 	bl	8008014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d0a:	e170      	b.n	8007fee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	bf00      	nop
    return;
 8007d0e:	e16e      	b.n	8007fee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	f040 814a 	bne.w	8007fae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8143 	beq.w	8007fae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 813c 	beq.w	8007fae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d36:	2300      	movs	r3, #0
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d56:	2b40      	cmp	r3, #64	; 0x40
 8007d58:	f040 80b4 	bne.w	8007ec4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8140 	beq.w	8007ff2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	f080 8139 	bcs.w	8007ff2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d92:	f000 8088 	beq.w	8007ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1d9      	bne.n	8007d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3314      	adds	r3, #20
 8007de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e1      	bne.n	8007de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e3      	bne.n	8007e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e3      	bne.n	8007e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fb fe68 	bl	8003b76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8b6 	bl	8008028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ebc:	e099      	b.n	8007ff2 <HAL_UART_IRQHandler+0x50e>
 8007ebe:	bf00      	nop
 8007ec0:	0800825f 	.word	0x0800825f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 808b 	beq.w	8007ff6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8086 	beq.w	8007ff6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3314      	adds	r3, #20
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	623b      	str	r3, [r7, #32]
   return(result);
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3314      	adds	r3, #20
 8007f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f46:	633a      	str	r2, [r7, #48]	; 0x30
 8007f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e3      	bne.n	8007f22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	330c      	adds	r3, #12
 8007f88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f8c:	61fa      	str	r2, [r7, #28]
 8007f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	69b9      	ldr	r1, [r7, #24]
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	617b      	str	r3, [r7, #20]
   return(result);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e3      	bne.n	8007f68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f83e 	bl	8008028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fac:	e023      	b.n	8007ff6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <HAL_UART_IRQHandler+0x4ea>
 8007fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f95d 	bl	8008286 <UART_Transmit_IT>
    return;
 8007fcc:	e014      	b.n	8007ff8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x514>
 8007fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d008      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f99d 	bl	8008326 <UART_EndTransmit_IT>
    return;
 8007fec:	e004      	b.n	8007ff8 <HAL_UART_IRQHandler+0x514>
    return;
 8007fee:	bf00      	nop
 8007ff0:	e002      	b.n	8007ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ff6:	bf00      	nop
  }
}
 8007ff8:	37e8      	adds	r7, #232	; 0xe8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop

08008000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b090      	sub	sp, #64	; 0x40
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008050:	e050      	b.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d04c      	beq.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800805a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <UART_WaitOnFlagUntilTimeout+0x30>
 8008060:	f7fb fc48 	bl	80038f4 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806c:	429a      	cmp	r2, r3
 800806e:	d241      	bcs.n	80080f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008090:	637a      	str	r2, [r7, #52]	; 0x34
 8008092:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e5      	bne.n	8008070 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3314      	adds	r3, #20
 80080aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	613b      	str	r3, [r7, #16]
   return(result);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3314      	adds	r3, #20
 80080c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c4:	623a      	str	r2, [r7, #32]
 80080c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	69f9      	ldr	r1, [r7, #28]
 80080ca:	6a3a      	ldr	r2, [r7, #32]
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e00f      	b.n	8008114 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4013      	ands	r3, r2
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	429a      	cmp	r2, r3
 8008102:	bf0c      	ite	eq
 8008104:	2301      	moveq	r3, #1
 8008106:	2300      	movne	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	429a      	cmp	r2, r3
 8008110:	d09f      	beq.n	8008052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3740      	adds	r7, #64	; 0x40
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	4613      	mov	r3, r2
 8008128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2222      	movs	r2, #34	; 0x22
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008168:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695a      	ldr	r2, [r3, #20]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 0220 	orr.w	r2, r2, #32
 8008188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b095      	sub	sp, #84	; 0x54
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081c0:	643a      	str	r2, [r7, #64]	; 0x40
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3314      	adds	r3, #20
 80081f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e5      	bne.n	80081d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	2b01      	cmp	r3, #1
 800820e:	d119      	bne.n	8008244 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f023 0310 	bic.w	r3, r3, #16
 8008226:	647b      	str	r3, [r7, #68]	; 0x44
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	330c      	adds	r3, #12
 800822e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008230:	61ba      	str	r2, [r7, #24]
 8008232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6979      	ldr	r1, [r7, #20]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	613b      	str	r3, [r7, #16]
   return(result);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e5      	bne.n	8008210 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008252:	bf00      	nop
 8008254:	3754      	adds	r7, #84	; 0x54
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fecb 	bl	8008014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b21      	cmp	r3, #33	; 0x21
 8008298:	d13e      	bne.n	8008318 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a2:	d114      	bne.n	80082ce <UART_Transmit_IT+0x48>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d110      	bne.n	80082ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	621a      	str	r2, [r3, #32]
 80082cc:	e008      	b.n	80082e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	1c59      	adds	r1, r3, #1
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6211      	str	r1, [r2, #32]
 80082d8:	781a      	ldrb	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4619      	mov	r1, r3
 80082ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10f      	bne.n	8008314 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008302:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008312:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	e000      	b.n	800831a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800833c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fe5a 	bl	8008000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b08c      	sub	sp, #48	; 0x30
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b22      	cmp	r3, #34	; 0x22
 8008368:	f040 80ab 	bne.w	80084c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008374:	d117      	bne.n	80083a6 <UART_Receive_IT+0x50>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d113      	bne.n	80083a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	b29a      	uxth	r2, r3
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28
 80083a4:	e026      	b.n	80083f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b8:	d007      	beq.n	80083ca <UART_Receive_IT+0x74>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <UART_Receive_IT+0x82>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	e008      	b.n	80083ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008404:	2b00      	cmp	r3, #0
 8008406:	d15a      	bne.n	80084be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0220 	bic.w	r2, r2, #32
 8008416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	2b01      	cmp	r3, #1
 8008446:	d135      	bne.n	80084b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	613b      	str	r3, [r7, #16]
   return(result);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f023 0310 	bic.w	r3, r3, #16
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846e:	623a      	str	r2, [r7, #32]
 8008470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	6a3a      	ldr	r2, [r7, #32]
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	61bb      	str	r3, [r7, #24]
   return(result);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e5      	bne.n	800844e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b10      	cmp	r3, #16
 800848e:	d10a      	bne.n	80084a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fdbb 	bl	8008028 <HAL_UARTEx_RxEventCallback>
 80084b2:	e002      	b.n	80084ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7f9 f95f 	bl	8001778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e002      	b.n	80084c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e000      	b.n	80084c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80084c2:	2302      	movs	r3, #2
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d0:	b0c0      	sub	sp, #256	; 0x100
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	68d9      	ldr	r1, [r3, #12]
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	ea40 0301 	orr.w	r3, r0, r1
 80084f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	431a      	orrs	r2, r3
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	431a      	orrs	r2, r3
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	4313      	orrs	r3, r2
 8008514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008524:	f021 010c 	bic.w	r1, r1, #12
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008532:	430b      	orrs	r3, r1
 8008534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	6999      	ldr	r1, [r3, #24]
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	ea40 0301 	orr.w	r3, r0, r1
 8008552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <UART_SetConfig+0x2cc>)
 800855c:	429a      	cmp	r2, r3
 800855e:	d005      	beq.n	800856c <UART_SetConfig+0xa0>
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b8d      	ldr	r3, [pc, #564]	; (800879c <UART_SetConfig+0x2d0>)
 8008568:	429a      	cmp	r2, r3
 800856a:	d104      	bne.n	8008576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fd fdec 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 8008570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008574:	e003      	b.n	800857e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008576:	f7fd fdd3 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 800857a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008588:	f040 810c 	bne.w	80087a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800858c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008590:	2200      	movs	r2, #0
 8008592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800859a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800859e:	4622      	mov	r2, r4
 80085a0:	462b      	mov	r3, r5
 80085a2:	1891      	adds	r1, r2, r2
 80085a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80085a6:	415b      	adcs	r3, r3
 80085a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085ae:	4621      	mov	r1, r4
 80085b0:	eb12 0801 	adds.w	r8, r2, r1
 80085b4:	4629      	mov	r1, r5
 80085b6:	eb43 0901 	adc.w	r9, r3, r1
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085ce:	4690      	mov	r8, r2
 80085d0:	4699      	mov	r9, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	eb18 0303 	adds.w	r3, r8, r3
 80085d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085dc:	462b      	mov	r3, r5
 80085de:	eb49 0303 	adc.w	r3, r9, r3
 80085e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085fa:	460b      	mov	r3, r1
 80085fc:	18db      	adds	r3, r3, r3
 80085fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008600:	4613      	mov	r3, r2
 8008602:	eb42 0303 	adc.w	r3, r2, r3
 8008606:	657b      	str	r3, [r7, #84]	; 0x54
 8008608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800860c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008610:	f7f8 faea 	bl	8000be8 <__aeabi_uldivmod>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4b61      	ldr	r3, [pc, #388]	; (80087a0 <UART_SetConfig+0x2d4>)
 800861a:	fba3 2302 	umull	r2, r3, r3, r2
 800861e:	095b      	lsrs	r3, r3, #5
 8008620:	011c      	lsls	r4, r3, #4
 8008622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800862c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	1891      	adds	r1, r2, r2
 800863a:	64b9      	str	r1, [r7, #72]	; 0x48
 800863c:	415b      	adcs	r3, r3
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008644:	4641      	mov	r1, r8
 8008646:	eb12 0a01 	adds.w	sl, r2, r1
 800864a:	4649      	mov	r1, r9
 800864c:	eb43 0b01 	adc.w	fp, r3, r1
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800865c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008664:	4692      	mov	sl, r2
 8008666:	469b      	mov	fp, r3
 8008668:	4643      	mov	r3, r8
 800866a:	eb1a 0303 	adds.w	r3, sl, r3
 800866e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008672:	464b      	mov	r3, r9
 8008674:	eb4b 0303 	adc.w	r3, fp, r3
 8008678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800868c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008690:	460b      	mov	r3, r1
 8008692:	18db      	adds	r3, r3, r3
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	4613      	mov	r3, r2
 8008698:	eb42 0303 	adc.w	r3, r2, r3
 800869c:	647b      	str	r3, [r7, #68]	; 0x44
 800869e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086a6:	f7f8 fa9f 	bl	8000be8 <__aeabi_uldivmod>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <UART_SetConfig+0x2d4>)
 80086b2:	fba3 2301 	umull	r2, r3, r3, r1
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	2264      	movs	r2, #100	; 0x64
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	1acb      	subs	r3, r1, r3
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086c6:	4b36      	ldr	r3, [pc, #216]	; (80087a0 <UART_SetConfig+0x2d4>)
 80086c8:	fba3 2302 	umull	r2, r3, r3, r2
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086d4:	441c      	add	r4, r3
 80086d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	1891      	adds	r1, r2, r2
 80086ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80086f0:	415b      	adcs	r3, r3
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086f8:	4641      	mov	r1, r8
 80086fa:	1851      	adds	r1, r2, r1
 80086fc:	6339      	str	r1, [r7, #48]	; 0x30
 80086fe:	4649      	mov	r1, r9
 8008700:	414b      	adcs	r3, r1
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008710:	4659      	mov	r1, fp
 8008712:	00cb      	lsls	r3, r1, #3
 8008714:	4651      	mov	r1, sl
 8008716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800871a:	4651      	mov	r1, sl
 800871c:	00ca      	lsls	r2, r1, #3
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	4603      	mov	r3, r0
 8008724:	4642      	mov	r2, r8
 8008726:	189b      	adds	r3, r3, r2
 8008728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800872c:	464b      	mov	r3, r9
 800872e:	460a      	mov	r2, r1
 8008730:	eb42 0303 	adc.w	r3, r2, r3
 8008734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800874c:	460b      	mov	r3, r1
 800874e:	18db      	adds	r3, r3, r3
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
 8008752:	4613      	mov	r3, r2
 8008754:	eb42 0303 	adc.w	r3, r2, r3
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800875e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008762:	f7f8 fa41 	bl	8000be8 <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <UART_SetConfig+0x2d4>)
 800876c:	fba3 1302 	umull	r1, r3, r3, r2
 8008770:	095b      	lsrs	r3, r3, #5
 8008772:	2164      	movs	r1, #100	; 0x64
 8008774:	fb01 f303 	mul.w	r3, r1, r3
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	3332      	adds	r3, #50	; 0x32
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <UART_SetConfig+0x2d4>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	095b      	lsrs	r3, r3, #5
 8008786:	f003 0207 	and.w	r2, r3, #7
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4422      	add	r2, r4
 8008792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008794:	e106      	b.n	80089a4 <UART_SetConfig+0x4d8>
 8008796:	bf00      	nop
 8008798:	40011000 	.word	0x40011000
 800879c:	40011400 	.word	0x40011400
 80087a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087b6:	4642      	mov	r2, r8
 80087b8:	464b      	mov	r3, r9
 80087ba:	1891      	adds	r1, r2, r2
 80087bc:	6239      	str	r1, [r7, #32]
 80087be:	415b      	adcs	r3, r3
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
 80087c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087c6:	4641      	mov	r1, r8
 80087c8:	1854      	adds	r4, r2, r1
 80087ca:	4649      	mov	r1, r9
 80087cc:	eb43 0501 	adc.w	r5, r3, r1
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	00eb      	lsls	r3, r5, #3
 80087da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087de:	00e2      	lsls	r2, r4, #3
 80087e0:	4614      	mov	r4, r2
 80087e2:	461d      	mov	r5, r3
 80087e4:	4643      	mov	r3, r8
 80087e6:	18e3      	adds	r3, r4, r3
 80087e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087ec:	464b      	mov	r3, r9
 80087ee:	eb45 0303 	adc.w	r3, r5, r3
 80087f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008812:	4629      	mov	r1, r5
 8008814:	008b      	lsls	r3, r1, #2
 8008816:	4621      	mov	r1, r4
 8008818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800881c:	4621      	mov	r1, r4
 800881e:	008a      	lsls	r2, r1, #2
 8008820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008824:	f7f8 f9e0 	bl	8000be8 <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4b60      	ldr	r3, [pc, #384]	; (80089b0 <UART_SetConfig+0x4e4>)
 800882e:	fba3 2302 	umull	r2, r3, r3, r2
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	011c      	lsls	r4, r3, #4
 8008836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883a:	2200      	movs	r2, #0
 800883c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	1891      	adds	r1, r2, r2
 800884e:	61b9      	str	r1, [r7, #24]
 8008850:	415b      	adcs	r3, r3
 8008852:	61fb      	str	r3, [r7, #28]
 8008854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008858:	4641      	mov	r1, r8
 800885a:	1851      	adds	r1, r2, r1
 800885c:	6139      	str	r1, [r7, #16]
 800885e:	4649      	mov	r1, r9
 8008860:	414b      	adcs	r3, r1
 8008862:	617b      	str	r3, [r7, #20]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008870:	4659      	mov	r1, fp
 8008872:	00cb      	lsls	r3, r1, #3
 8008874:	4651      	mov	r1, sl
 8008876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887a:	4651      	mov	r1, sl
 800887c:	00ca      	lsls	r2, r1, #3
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	4603      	mov	r3, r0
 8008884:	4642      	mov	r2, r8
 8008886:	189b      	adds	r3, r3, r2
 8008888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800888c:	464b      	mov	r3, r9
 800888e:	460a      	mov	r2, r1
 8008890:	eb42 0303 	adc.w	r3, r2, r3
 8008894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80088a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	f04f 0300 	mov.w	r3, #0
 80088ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088b0:	4649      	mov	r1, r9
 80088b2:	008b      	lsls	r3, r1, #2
 80088b4:	4641      	mov	r1, r8
 80088b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ba:	4641      	mov	r1, r8
 80088bc:	008a      	lsls	r2, r1, #2
 80088be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088c2:	f7f8 f991 	bl	8000be8 <__aeabi_uldivmod>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <UART_SetConfig+0x4e4>)
 80088ce:	fba3 2301 	umull	r2, r3, r3, r1
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	2264      	movs	r2, #100	; 0x64
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	1acb      	subs	r3, r1, r3
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	3332      	adds	r3, #50	; 0x32
 80088e0:	4a33      	ldr	r2, [pc, #204]	; (80089b0 <UART_SetConfig+0x4e4>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088ec:	441c      	add	r4, r3
 80088ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f2:	2200      	movs	r2, #0
 80088f4:	673b      	str	r3, [r7, #112]	; 0x70
 80088f6:	677a      	str	r2, [r7, #116]	; 0x74
 80088f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088fc:	4642      	mov	r2, r8
 80088fe:	464b      	mov	r3, r9
 8008900:	1891      	adds	r1, r2, r2
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	415b      	adcs	r3, r3
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890c:	4641      	mov	r1, r8
 800890e:	1851      	adds	r1, r2, r1
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	4649      	mov	r1, r9
 8008914:	414b      	adcs	r3, r1
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008924:	4659      	mov	r1, fp
 8008926:	00cb      	lsls	r3, r1, #3
 8008928:	4651      	mov	r1, sl
 800892a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800892e:	4651      	mov	r1, sl
 8008930:	00ca      	lsls	r2, r1, #3
 8008932:	4610      	mov	r0, r2
 8008934:	4619      	mov	r1, r3
 8008936:	4603      	mov	r3, r0
 8008938:	4642      	mov	r2, r8
 800893a:	189b      	adds	r3, r3, r2
 800893c:	66bb      	str	r3, [r7, #104]	; 0x68
 800893e:	464b      	mov	r3, r9
 8008940:	460a      	mov	r2, r1
 8008942:	eb42 0303 	adc.w	r3, r2, r3
 8008946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	663b      	str	r3, [r7, #96]	; 0x60
 8008952:	667a      	str	r2, [r7, #100]	; 0x64
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008960:	4649      	mov	r1, r9
 8008962:	008b      	lsls	r3, r1, #2
 8008964:	4641      	mov	r1, r8
 8008966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800896a:	4641      	mov	r1, r8
 800896c:	008a      	lsls	r2, r1, #2
 800896e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008972:	f7f8 f939 	bl	8000be8 <__aeabi_uldivmod>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <UART_SetConfig+0x4e4>)
 800897c:	fba3 1302 	umull	r1, r3, r3, r2
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	2164      	movs	r1, #100	; 0x64
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	3332      	adds	r3, #50	; 0x32
 800898e:	4a08      	ldr	r2, [pc, #32]	; (80089b0 <UART_SetConfig+0x4e4>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	095b      	lsrs	r3, r3, #5
 8008996:	f003 020f 	and.w	r2, r3, #15
 800899a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4422      	add	r2, r4
 80089a2:	609a      	str	r2, [r3, #8]
}
 80089a4:	bf00      	nop
 80089a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089aa:	46bd      	mov	sp, r7
 80089ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089b0:	51eb851f 	.word	0x51eb851f

080089b4 <__NVIC_SetPriority>:
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	db0a      	blt.n	80089de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	490c      	ldr	r1, [pc, #48]	; (8008a00 <__NVIC_SetPriority+0x4c>)
 80089ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d2:	0112      	lsls	r2, r2, #4
 80089d4:	b2d2      	uxtb	r2, r2
 80089d6:	440b      	add	r3, r1
 80089d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089dc:	e00a      	b.n	80089f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	4908      	ldr	r1, [pc, #32]	; (8008a04 <__NVIC_SetPriority+0x50>)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	f003 030f 	and.w	r3, r3, #15
 80089ea:	3b04      	subs	r3, #4
 80089ec:	0112      	lsls	r2, r2, #4
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	440b      	add	r3, r1
 80089f2:	761a      	strb	r2, [r3, #24]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	e000e100 	.word	0xe000e100
 8008a04:	e000ed00 	.word	0xe000ed00

08008a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	f06f 0004 	mvn.w	r0, #4
 8008a12:	f7ff ffcf 	bl	80089b4 <__NVIC_SetPriority>
#endif
}
 8008a16:	bf00      	nop
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a22:	f3ef 8305 	mrs	r3, IPSR
 8008a26:	603b      	str	r3, [r7, #0]
  return(result);
 8008a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a2e:	f06f 0305 	mvn.w	r3, #5
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e00c      	b.n	8008a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a36:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <osKernelInitialize+0x44>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d105      	bne.n	8008a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <osKernelInitialize+0x44>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	e002      	b.n	8008a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a50:	687b      	ldr	r3, [r7, #4]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	200004d8 	.word	0x200004d8

08008a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6a:	f3ef 8305 	mrs	r3, IPSR
 8008a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a76:	f06f 0305 	mvn.w	r3, #5
 8008a7a:	607b      	str	r3, [r7, #4]
 8008a7c:	e010      	b.n	8008aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <osKernelStart+0x48>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d109      	bne.n	8008a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a86:	f7ff ffbf 	bl	8008a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a8a:	4b08      	ldr	r3, [pc, #32]	; (8008aac <osKernelStart+0x48>)
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a90:	f001 f87c 	bl	8009b8c <vTaskStartScheduler>
      stat = osOK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	607b      	str	r3, [r7, #4]
 8008a98:	e002      	b.n	8008aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008aa0:	687b      	ldr	r3, [r7, #4]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200004d8 	.word	0x200004d8

08008ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	; 0x38
 8008ab4:	af04      	add	r7, sp, #16
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac0:	f3ef 8305 	mrs	r3, IPSR
 8008ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8008ac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d17e      	bne.n	8008bca <osThreadNew+0x11a>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d07b      	beq.n	8008bca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ad6:	2318      	movs	r3, #24
 8008ad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d045      	beq.n	8008b76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <osThreadNew+0x48>
        name = attr->name;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d008      	beq.n	8008b1e <osThreadNew+0x6e>
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b38      	cmp	r3, #56	; 0x38
 8008b10:	d805      	bhi.n	8008b1e <osThreadNew+0x6e>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <osThreadNew+0x72>
        return (NULL);
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e054      	b.n	8008bcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	089b      	lsrs	r3, r3, #2
 8008b30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <osThreadNew+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2ba7      	cmp	r3, #167	; 0xa7
 8008b40:	d90a      	bls.n	8008b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <osThreadNew+0xa8>
        mem = 1;
 8008b52:	2301      	movs	r3, #1
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e010      	b.n	8008b7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10c      	bne.n	8008b7a <osThreadNew+0xca>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <osThreadNew+0xca>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <osThreadNew+0xca>
          mem = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
 8008b74:	e001      	b.n	8008b7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d110      	bne.n	8008ba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b88:	9202      	str	r2, [sp, #8]
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	6a3a      	ldr	r2, [r7, #32]
 8008b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fe0c 	bl	80097b4 <xTaskCreateStatic>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	e013      	b.n	8008bca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d110      	bne.n	8008bca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	f107 0310 	add.w	r3, r7, #16
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fe57 	bl	800986e <xTaskCreate>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d001      	beq.n	8008bca <osThreadNew+0x11a>
            hTask = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bca:	693b      	ldr	r3, [r7, #16]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bdc:	f3ef 8305 	mrs	r3, IPSR
 8008be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8008be8:	f06f 0305 	mvn.w	r3, #5
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	e007      	b.n	8008c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 ff92 	bl	8009b24 <vTaskDelay>
    }
  }

  return (stat);
 8008c00:	68fb      	ldr	r3, [r7, #12]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a07      	ldr	r2, [pc, #28]	; (8008c38 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4a06      	ldr	r2, [pc, #24]	; (8008c3c <vApplicationGetIdleTaskMemory+0x30>)
 8008c22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2280      	movs	r2, #128	; 0x80
 8008c28:	601a      	str	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	200004dc 	.word	0x200004dc
 8008c3c:	20000584 	.word	0x20000584

08008c40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a07      	ldr	r2, [pc, #28]	; (8008c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8008c50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4a06      	ldr	r2, [pc, #24]	; (8008c70 <vApplicationGetTimerTaskMemory+0x30>)
 8008c56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000784 	.word	0x20000784
 8008c70:	2000082c 	.word	0x2000082c

08008c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f103 0208 	add.w	r2, r3, #8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f103 0208 	add.w	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f103 0208 	add.w	r2, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d103      	bne.n	8008d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e00c      	b.n	8008d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e002      	b.n	8008d44 <vListInsert+0x2e>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d2f6      	bcs.n	8008d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	601a      	str	r2, [r3, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6892      	ldr	r2, [r2, #8]
 8008d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6852      	ldr	r2, [r2, #4]
 8008da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d103      	bne.n	8008dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e06:	f002 f875 	bl	800aef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	441a      	add	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	3b01      	subs	r3, #1
 8008e38:	68f9      	ldr	r1, [r7, #12]
 8008e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	441a      	add	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	22ff      	movs	r2, #255	; 0xff
 8008e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d114      	bne.n	8008e86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3310      	adds	r3, #16
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 f929 	bl	800a0c0 <xTaskRemoveFromEventList>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d012      	beq.n	8008e9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <xQueueGenericReset+0xcc>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	e009      	b.n	8008e9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3310      	adds	r3, #16
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fef2 	bl	8008c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3324      	adds	r3, #36	; 0x24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff feed 	bl	8008c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e9a:	f002 f85b 	bl	800af54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e9e:	2301      	movs	r3, #1
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <xQueueGenericCreateStatic+0x52>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <xQueueGenericCreateStatic+0x56>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericCreateStatic+0x58>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	623b      	str	r3, [r7, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <xQueueGenericCreateStatic+0x7e>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <xQueueGenericCreateStatic+0x82>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e000      	b.n	8008f30 <xQueueGenericCreateStatic+0x84>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	61fb      	str	r3, [r7, #28]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f4a:	2350      	movs	r3, #80	; 0x50
 8008f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b50      	cmp	r3, #80	; 0x50
 8008f52:	d00a      	beq.n	8008f6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61bb      	str	r3, [r7, #24]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00d      	beq.n	8008f92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4613      	mov	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 f805 	bl	8008f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	; 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fca:	2101      	movs	r1, #1
 8008fcc:	69b8      	ldr	r0, [r7, #24]
 8008fce:	f7ff ff05 	bl	8008ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	; 0x38
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSend+0x32>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d103      	bne.n	8009024 <xQueueGenericSend+0x40>
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <xQueueGenericSend+0x44>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <xQueueGenericSend+0x46>
 8009028:	2300      	movs	r3, #0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <xQueueGenericSend+0x60>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d103      	bne.n	8009052 <xQueueGenericSend+0x6e>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <xQueueGenericSend+0x72>
 8009052:	2301      	movs	r3, #1
 8009054:	e000      	b.n	8009058 <xQueueGenericSend+0x74>
 8009056:	2300      	movs	r3, #0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xQueueGenericSend+0x8e>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	623b      	str	r3, [r7, #32]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009072:	f001 f9e7 	bl	800a444 <xTaskGetSchedulerState>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <xQueueGenericSend+0x9e>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <xQueueGenericSend+0xa2>
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <xQueueGenericSend+0xa4>
 8009086:	2300      	movs	r3, #0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	61fb      	str	r3, [r7, #28]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a2:	f001 ff27 	bl	800aef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d302      	bcc.n	80090b8 <xQueueGenericSend+0xd4>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d129      	bne.n	800910c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090be:	f000 fa0b 	bl	80094d8 <prvCopyDataToQueue>
 80090c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d010      	beq.n	80090ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	3324      	adds	r3, #36	; 0x24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fff5 	bl	800a0c0 <xTaskRemoveFromEventList>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d013      	beq.n	8009104 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090dc:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <xQueueGenericSend+0x1f8>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	e00a      	b.n	8009104 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090f4:	4b39      	ldr	r3, [pc, #228]	; (80091dc <xQueueGenericSend+0x1f8>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009104:	f001 ff26 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	e063      	b.n	80091d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009112:	f001 ff1f 	bl	800af54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009116:	2300      	movs	r3, #0
 8009118:	e05c      	b.n	80091d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	4618      	mov	r0, r3
 8009126:	f001 f82f 	bl	800a188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800912a:	2301      	movs	r3, #1
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800912e:	f001 ff11 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009132:	f000 fd9b 	bl	8009c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009136:	f001 fedd 	bl	800aef4 <vPortEnterCritical>
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009140:	b25b      	sxtb	r3, r3
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d103      	bne.n	8009150 <xQueueGenericSend+0x16c>
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009156:	b25b      	sxtb	r3, r3
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915c:	d103      	bne.n	8009166 <xQueueGenericSend+0x182>
 800915e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009166:	f001 fef5 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800916a:	1d3a      	adds	r2, r7, #4
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f001 f81e 	bl	800a1b4 <xTaskCheckForTimeOut>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d124      	bne.n	80091c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800917e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009180:	f000 faa2 	bl	80096c8 <prvIsQueueFull>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d018      	beq.n	80091bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	3310      	adds	r3, #16
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f000 ff44 	bl	800a020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919a:	f000 fa2d 	bl	80095f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800919e:	f000 fd73 	bl	8009c88 <xTaskResumeAll>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f47f af7c 	bne.w	80090a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <xQueueGenericSend+0x1f8>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	e772      	b.n	80090a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091be:	f000 fa1b 	bl	80095f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091c2:	f000 fd61 	bl	8009c88 <xTaskResumeAll>
 80091c6:	e76c      	b.n	80090a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ca:	f000 fa15 	bl	80095f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ce:	f000 fd5b 	bl	8009c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3738      	adds	r7, #56	; 0x38
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b090      	sub	sp, #64	; 0x40
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <xQueueGenericSendFromISR+0x3c>
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <xQueueGenericSendFromISR+0x40>
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <xQueueGenericSendFromISR+0x42>
 8009220:	2300      	movs	r3, #0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10a      	bne.n	800923c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d103      	bne.n	800924a <xQueueGenericSendFromISR+0x6a>
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <xQueueGenericSendFromISR+0x6e>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericSendFromISR+0x70>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	623b      	str	r3, [r7, #32]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800926a:	f001 ff25 	bl	800b0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800926e:	f3ef 8211 	mrs	r2, BASEPRI
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	61fa      	str	r2, [r7, #28]
 8009284:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009286:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009292:	429a      	cmp	r2, r3
 8009294:	d302      	bcc.n	800929c <xQueueGenericSendFromISR+0xbc>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d12f      	bne.n	80092fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b2:	f000 f911 	bl	80094d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d112      	bne.n	80092e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d016      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fef7 	bl	800a0c0 <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00e      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e007      	b.n	80092f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	b25a      	sxtb	r2, r3
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092f6:	2301      	movs	r3, #1
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092fa:	e001      	b.n	8009300 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800930a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800930e:	4618      	mov	r0, r3
 8009310:	3740      	adds	r7, #64	; 0x40
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08c      	sub	sp, #48	; 0x30
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009324:	2300      	movs	r3, #0
 8009326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <xQueueReceive+0x30>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	623b      	str	r3, [r7, #32]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <xQueueReceive+0x3e>
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <xQueueReceive+0x42>
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <xQueueReceive+0x44>
 800935a:	2300      	movs	r3, #0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <xQueueReceive+0x5e>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	61fb      	str	r3, [r7, #28]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009376:	f001 f865 	bl	800a444 <xTaskGetSchedulerState>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <xQueueReceive+0x6e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <xQueueReceive+0x72>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <xQueueReceive+0x74>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xQueueReceive+0x8e>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	61bb      	str	r3, [r7, #24]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093a6:	f001 fda5 	bl	800aef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01f      	beq.n	80093f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ba:	f000 f8f7 	bl	80095ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	1e5a      	subs	r2, r3, #1
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00f      	beq.n	80093ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	3310      	adds	r3, #16
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fe74 	bl	800a0c0 <xTaskRemoveFromEventList>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093de:	4b3d      	ldr	r3, [pc, #244]	; (80094d4 <xQueueReceive+0x1bc>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093ee:	f001 fdb1 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e069      	b.n	80094ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093fc:	f001 fdaa 	bl	800af54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009400:	2300      	movs	r3, #0
 8009402:	e062      	b.n	80094ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800940a:	f107 0310 	add.w	r3, r7, #16
 800940e:	4618      	mov	r0, r3
 8009410:	f000 feba 	bl	800a188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009418:	f001 fd9c 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800941c:	f000 fc26 	bl	8009c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009420:	f001 fd68 	bl	800aef4 <vPortEnterCritical>
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942a:	b25b      	sxtb	r3, r3
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009430:	d103      	bne.n	800943a <xQueueReceive+0x122>
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009440:	b25b      	sxtb	r3, r3
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d103      	bne.n	8009450 <xQueueReceive+0x138>
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009450:	f001 fd80 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009454:	1d3a      	adds	r2, r7, #4
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fea9 	bl	800a1b4 <xTaskCheckForTimeOut>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d123      	bne.n	80094b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946a:	f000 f917 	bl	800969c <prvIsQueueEmpty>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fdcf 	bl	800a020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009484:	f000 f8b8 	bl	80095f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009488:	f000 fbfe 	bl	8009c88 <xTaskResumeAll>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d189      	bne.n	80093a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <xQueueReceive+0x1bc>)
 8009494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	e780      	b.n	80093a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a6:	f000 f8a7 	bl	80095f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094aa:	f000 fbed 	bl	8009c88 <xTaskResumeAll>
 80094ae:	e77a      	b.n	80093a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b2:	f000 f8a1 	bl	80095f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094b6:	f000 fbe7 	bl	8009c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094bc:	f000 f8ee 	bl	800969c <prvIsQueueEmpty>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f43f af6f 	beq.w	80093a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3730      	adds	r7, #48	; 0x30
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	e000ed04 	.word	0xe000ed04

080094d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d14d      	bne.n	800959a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 ffbc 	bl	800a480 <xTaskPriorityDisinherit>
 8009508:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	609a      	str	r2, [r3, #8]
 8009510:	e043      	b.n	800959a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d119      	bne.n	800954c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6858      	ldr	r0, [r3, #4]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	461a      	mov	r2, r3
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	f003 f92a 	bl	800c77c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	429a      	cmp	r2, r3
 8009540:	d32b      	bcc.n	800959a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	605a      	str	r2, [r3, #4]
 800954a:	e026      	b.n	800959a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68d8      	ldr	r0, [r3, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	461a      	mov	r2, r3
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	f003 f910 	bl	800c77c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	425b      	negs	r3, r3
 8009566:	441a      	add	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d207      	bcs.n	8009588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	425b      	negs	r3, r3
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d105      	bne.n	800959a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3b01      	subs	r3, #1
 8009598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095a2:	697b      	ldr	r3, [r7, #20]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d018      	beq.n	80095f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	441a      	add	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d303      	bcc.n	80095e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68d9      	ldr	r1, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e8:	461a      	mov	r2, r3
 80095ea:	6838      	ldr	r0, [r7, #0]
 80095ec:	f003 f8c6 	bl	800c77c <memcpy>
	}
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009600:	f001 fc78 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800960c:	e011      	b.n	8009632 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	2b00      	cmp	r3, #0
 8009614:	d012      	beq.n	800963c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3324      	adds	r3, #36	; 0x24
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fd50 	bl	800a0c0 <xTaskRemoveFromEventList>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009626:	f000 fe27 	bl	800a278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	3b01      	subs	r3, #1
 800962e:	b2db      	uxtb	r3, r3
 8009630:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dce9      	bgt.n	800960e <prvUnlockQueue+0x16>
 800963a:	e000      	b.n	800963e <prvUnlockQueue+0x46>
					break;
 800963c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	22ff      	movs	r2, #255	; 0xff
 8009642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009646:	f001 fc85 	bl	800af54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800964a:	f001 fc53 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009654:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009656:	e011      	b.n	800967c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d012      	beq.n	8009686 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3310      	adds	r3, #16
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fd2b 	bl	800a0c0 <xTaskRemoveFromEventList>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009670:	f000 fe02 	bl	800a278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	3b01      	subs	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800967c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	dce9      	bgt.n	8009658 <prvUnlockQueue+0x60>
 8009684:	e000      	b.n	8009688 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009686:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	22ff      	movs	r2, #255	; 0xff
 800968c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009690:	f001 fc60 	bl	800af54 <vPortExitCritical>
}
 8009694:	bf00      	nop
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a4:	f001 fc26 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096b0:	2301      	movs	r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	e001      	b.n	80096ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ba:	f001 fc4b 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80096be:	68fb      	ldr	r3, [r7, #12]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096d0:	f001 fc10 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096dc:	429a      	cmp	r2, r3
 80096de:	d102      	bne.n	80096e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096e0:	2301      	movs	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	e001      	b.n	80096ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ea:	f001 fc33 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80096ee:	68fb      	ldr	r3, [r7, #12]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	e014      	b.n	8009732 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009708:	4a0f      	ldr	r2, [pc, #60]	; (8009748 <vQueueAddToRegistry+0x50>)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10b      	bne.n	800972c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009714:	490c      	ldr	r1, [pc, #48]	; (8009748 <vQueueAddToRegistry+0x50>)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800971e:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <vQueueAddToRegistry+0x50>)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	4413      	add	r3, r2
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800972a:	e006      	b.n	800973a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b07      	cmp	r3, #7
 8009736:	d9e7      	bls.n	8009708 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000c2c 	.word	0x20000c2c

0800974c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800975c:	f001 fbca 	bl	800aef4 <vPortEnterCritical>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009766:	b25b      	sxtb	r3, r3
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d103      	bne.n	8009776 <vQueueWaitForMessageRestricted+0x2a>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800977c:	b25b      	sxtb	r3, r3
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d103      	bne.n	800978c <vQueueWaitForMessageRestricted+0x40>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800978c:	f001 fbe2 	bl	800af54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3324      	adds	r3, #36	; 0x24
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fc61 	bl	800a068 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097a6:	6978      	ldr	r0, [r7, #20]
 80097a8:	f7ff ff26 	bl	80095f8 <prvUnlockQueue>
	}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08e      	sub	sp, #56	; 0x38
 80097b8:	af04      	add	r7, sp, #16
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <xTaskCreateStatic+0x2a>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	623b      	str	r3, [r7, #32]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xTaskCreateStatic+0x46>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	61fb      	str	r3, [r7, #28]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097fa:	23a8      	movs	r3, #168	; 0xa8
 80097fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2ba8      	cmp	r3, #168	; 0xa8
 8009802:	d00a      	beq.n	800981a <xTaskCreateStatic+0x66>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	61bb      	str	r3, [r7, #24]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800981a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	2b00      	cmp	r3, #0
 8009820:	d01e      	beq.n	8009860 <xTaskCreateStatic+0xac>
 8009822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009824:	2b00      	cmp	r3, #0
 8009826:	d01b      	beq.n	8009860 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009830:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	2202      	movs	r2, #2
 8009836:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800983a:	2300      	movs	r3, #0
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f850 	bl	80098f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985a:	f000 f8f3 	bl	8009a44 <prvAddNewTaskToReadyList>
 800985e:	e001      	b.n	8009864 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009864:	697b      	ldr	r3, [r7, #20]
	}
 8009866:	4618      	mov	r0, r3
 8009868:	3728      	adds	r7, #40	; 0x28
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800986e:	b580      	push	{r7, lr}
 8009870:	b08c      	sub	sp, #48	; 0x30
 8009872:	af04      	add	r7, sp, #16
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	603b      	str	r3, [r7, #0]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4618      	mov	r0, r3
 8009884:	f001 fc58 	bl	800b138 <pvPortMalloc>
 8009888:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009890:	20a8      	movs	r0, #168	; 0xa8
 8009892:	f001 fc51 	bl	800b138 <pvPortMalloc>
 8009896:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30
 80098a4:	e005      	b.n	80098b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098a6:	6978      	ldr	r0, [r7, #20]
 80098a8:	f001 fd12 	bl	800b2d0 <vPortFree>
 80098ac:	e001      	b.n	80098b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d017      	beq.n	80098e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098c0:	88fa      	ldrh	r2, [r7, #6]
 80098c2:	2300      	movs	r3, #0
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	9302      	str	r3, [sp, #8]
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f80e 	bl	80098f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098dc:	69f8      	ldr	r0, [r7, #28]
 80098de:	f000 f8b1 	bl	8009a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098e2:	2301      	movs	r3, #1
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	e002      	b.n	80098ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098ee:	69bb      	ldr	r3, [r7, #24]
	}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3720      	adds	r7, #32
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	461a      	mov	r2, r3
 8009910:	21a5      	movs	r1, #165	; 0xa5
 8009912:	f002 fe5e 	bl	800c5d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009920:	3b01      	subs	r3, #1
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f023 0307 	bic.w	r3, r3, #7
 800992e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <prvInitialiseNewTask+0x58>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	617b      	str	r3, [r7, #20]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d01f      	beq.n	8009996 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	e012      	b.n	8009982 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	7819      	ldrb	r1, [r3, #0]
 8009964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	3334      	adds	r3, #52	; 0x34
 800996c:	460a      	mov	r2, r1
 800996e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d006      	beq.n	800998a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3301      	adds	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b0f      	cmp	r3, #15
 8009986:	d9e9      	bls.n	800995c <prvInitialiseNewTask+0x64>
 8009988:	e000      	b.n	800998c <prvInitialiseNewTask+0x94>
			{
				break;
 800998a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009994:	e003      	b.n	800999e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	2b37      	cmp	r3, #55	; 0x37
 80099a2:	d901      	bls.n	80099a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a4:	2337      	movs	r3, #55	; 0x37
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	2200      	movs	r2, #0
 80099b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	3304      	adds	r3, #4
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff f978 	bl	8008cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	3318      	adds	r3, #24
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff f973 	bl	8008cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	3354      	adds	r3, #84	; 0x54
 80099f8:	224c      	movs	r2, #76	; 0x4c
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f002 fde8 	bl	800c5d2 <memset>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <prvInitialiseNewTask+0x140>)
 8009a06:	659a      	str	r2, [r3, #88]	; 0x58
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <prvInitialiseNewTask+0x144>)
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	4a0b      	ldr	r2, [pc, #44]	; (8009a40 <prvInitialiseNewTask+0x148>)
 8009a12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	69b8      	ldr	r0, [r7, #24]
 8009a1a:	f001 f941 	bl	800aca0 <pxPortInitialiseStack>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a30:	bf00      	nop
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	200052c0 	.word	0x200052c0
 8009a3c:	20005328 	.word	0x20005328
 8009a40:	20005390 	.word	0x20005390

08009a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a4c:	f001 fa52 	bl	800aef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a50:	4b2d      	ldr	r3, [pc, #180]	; (8009b08 <prvAddNewTaskToReadyList+0xc4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	4a2c      	ldr	r2, [pc, #176]	; (8009b08 <prvAddNewTaskToReadyList+0xc4>)
 8009a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a5a:	4b2c      	ldr	r3, [pc, #176]	; (8009b0c <prvAddNewTaskToReadyList+0xc8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a62:	4a2a      	ldr	r2, [pc, #168]	; (8009b0c <prvAddNewTaskToReadyList+0xc8>)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a68:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <prvAddNewTaskToReadyList+0xc4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d110      	bne.n	8009a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a70:	f000 fc26 	bl	800a2c0 <prvInitialiseTaskLists>
 8009a74:	e00d      	b.n	8009a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a76:	4b26      	ldr	r3, [pc, #152]	; (8009b10 <prvAddNewTaskToReadyList+0xcc>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a7e:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <prvAddNewTaskToReadyList+0xc8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d802      	bhi.n	8009a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a8c:	4a1f      	ldr	r2, [pc, #124]	; (8009b0c <prvAddNewTaskToReadyList+0xc8>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a92:	4b20      	ldr	r3, [pc, #128]	; (8009b14 <prvAddNewTaskToReadyList+0xd0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	4a1e      	ldr	r2, [pc, #120]	; (8009b14 <prvAddNewTaskToReadyList+0xd0>)
 8009a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a9c:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <prvAddNewTaskToReadyList+0xd0>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <prvAddNewTaskToReadyList+0xd4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d903      	bls.n	8009ab8 <prvAddNewTaskToReadyList+0x74>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	4a18      	ldr	r2, [pc, #96]	; (8009b18 <prvAddNewTaskToReadyList+0xd4>)
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <prvAddNewTaskToReadyList+0xd8>)
 8009ac6:	441a      	add	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f7ff f8fd 	bl	8008cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ad4:	f001 fa3e 	bl	800af54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ad8:	4b0d      	ldr	r3, [pc, #52]	; (8009b10 <prvAddNewTaskToReadyList+0xcc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <prvAddNewTaskToReadyList+0xc8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d207      	bcs.n	8009afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009aee:	4b0c      	ldr	r3, [pc, #48]	; (8009b20 <prvAddNewTaskToReadyList+0xdc>)
 8009af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20001140 	.word	0x20001140
 8009b0c:	20000c6c 	.word	0x20000c6c
 8009b10:	2000114c 	.word	0x2000114c
 8009b14:	2000115c 	.word	0x2000115c
 8009b18:	20001148 	.word	0x20001148
 8009b1c:	20000c70 	.word	0x20000c70
 8009b20:	e000ed04 	.word	0xe000ed04

08009b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d017      	beq.n	8009b66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b36:	4b13      	ldr	r3, [pc, #76]	; (8009b84 <vTaskDelay+0x60>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00a      	beq.n	8009b54 <vTaskDelay+0x30>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	60bb      	str	r3, [r7, #8]
}
 8009b50:	bf00      	nop
 8009b52:	e7fe      	b.n	8009b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b54:	f000 f88a 	bl	8009c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fcfe 	bl	800a55c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b60:	f000 f892 	bl	8009c88 <xTaskResumeAll>
 8009b64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d107      	bne.n	8009b7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <vTaskDelay+0x64>)
 8009b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20001168 	.word	0x20001168
 8009b88:	e000ed04 	.word	0xe000ed04

08009b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	; 0x28
 8009b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	1d39      	adds	r1, r7, #4
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff f832 	bl	8008c0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	9202      	str	r2, [sp, #8]
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	460a      	mov	r2, r1
 8009bba:	4924      	ldr	r1, [pc, #144]	; (8009c4c <vTaskStartScheduler+0xc0>)
 8009bbc:	4824      	ldr	r0, [pc, #144]	; (8009c50 <vTaskStartScheduler+0xc4>)
 8009bbe:	f7ff fdf9 	bl	80097b4 <xTaskCreateStatic>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	4a23      	ldr	r2, [pc, #140]	; (8009c54 <vTaskStartScheduler+0xc8>)
 8009bc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bc8:	4b22      	ldr	r3, [pc, #136]	; (8009c54 <vTaskStartScheduler+0xc8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e001      	b.n	8009bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d102      	bne.n	8009be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009be0:	f000 fd10 	bl	800a604 <xTimerCreateTimerTask>
 8009be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d11b      	bne.n	8009c24 <vTaskStartScheduler+0x98>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	613b      	str	r3, [r7, #16]
}
 8009bfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c00:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <vTaskStartScheduler+0xcc>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3354      	adds	r3, #84	; 0x54
 8009c06:	4a15      	ldr	r2, [pc, #84]	; (8009c5c <vTaskStartScheduler+0xd0>)
 8009c08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <vTaskStartScheduler+0xd4>)
 8009c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c12:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <vTaskStartScheduler+0xd8>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c18:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <vTaskStartScheduler+0xdc>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c1e:	f001 f8c7 	bl	800adb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c22:	e00e      	b.n	8009c42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d10a      	bne.n	8009c42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	60fb      	str	r3, [r7, #12]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <vTaskStartScheduler+0xb4>
}
 8009c42:	bf00      	nop
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800e9c0 	.word	0x0800e9c0
 8009c50:	0800a291 	.word	0x0800a291
 8009c54:	20001164 	.word	0x20001164
 8009c58:	20000c6c 	.word	0x20000c6c
 8009c5c:	20000094 	.word	0x20000094
 8009c60:	20001160 	.word	0x20001160
 8009c64:	2000114c 	.word	0x2000114c
 8009c68:	20001144 	.word	0x20001144

08009c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a03      	ldr	r2, [pc, #12]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c7a:	bf00      	nop
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	20001168 	.word	0x20001168

08009c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c96:	4b42      	ldr	r3, [pc, #264]	; (8009da0 <xTaskResumeAll+0x118>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	603b      	str	r3, [r7, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cb4:	f001 f91e 	bl	800aef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cb8:	4b39      	ldr	r3, [pc, #228]	; (8009da0 <xTaskResumeAll+0x118>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a38      	ldr	r2, [pc, #224]	; (8009da0 <xTaskResumeAll+0x118>)
 8009cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc2:	4b37      	ldr	r3, [pc, #220]	; (8009da0 <xTaskResumeAll+0x118>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d162      	bne.n	8009d90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cca:	4b36      	ldr	r3, [pc, #216]	; (8009da4 <xTaskResumeAll+0x11c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d05e      	beq.n	8009d90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cd2:	e02f      	b.n	8009d34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd4:	4b34      	ldr	r3, [pc, #208]	; (8009da8 <xTaskResumeAll+0x120>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3318      	adds	r3, #24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff f851 	bl	8008d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f84c 	bl	8008d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf4:	4b2d      	ldr	r3, [pc, #180]	; (8009dac <xTaskResumeAll+0x124>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d903      	bls.n	8009d04 <xTaskResumeAll+0x7c>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4a2a      	ldr	r2, [pc, #168]	; (8009dac <xTaskResumeAll+0x124>)
 8009d02:	6013      	str	r3, [r2, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4a27      	ldr	r2, [pc, #156]	; (8009db0 <xTaskResumeAll+0x128>)
 8009d12:	441a      	add	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f7fe ffd7 	bl	8008cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b23      	ldr	r3, [pc, #140]	; (8009db4 <xTaskResumeAll+0x12c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d302      	bcc.n	8009d34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d2e:	4b22      	ldr	r3, [pc, #136]	; (8009db8 <xTaskResumeAll+0x130>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d34:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <xTaskResumeAll+0x120>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1cb      	bne.n	8009cd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d42:	f000 fb5f 	bl	800a404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d46:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <xTaskResumeAll+0x134>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d52:	f000 f847 	bl	8009de4 <xTaskIncrementTick>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d5c:	4b16      	ldr	r3, [pc, #88]	; (8009db8 <xTaskResumeAll+0x130>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1f1      	bne.n	8009d52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <xTaskResumeAll+0x134>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d74:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <xTaskResumeAll+0x130>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <xTaskResumeAll+0x138>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d90:	f001 f8e0 	bl	800af54 <vPortExitCritical>

	return xAlreadyYielded;
 8009d94:	68bb      	ldr	r3, [r7, #8]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20001168 	.word	0x20001168
 8009da4:	20001140 	.word	0x20001140
 8009da8:	20001100 	.word	0x20001100
 8009dac:	20001148 	.word	0x20001148
 8009db0:	20000c70 	.word	0x20000c70
 8009db4:	20000c6c 	.word	0x20000c6c
 8009db8:	20001154 	.word	0x20001154
 8009dbc:	20001150 	.word	0x20001150
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <xTaskGetTickCount+0x1c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dd0:	687b      	ldr	r3, [r7, #4]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20001144 	.word	0x20001144

08009de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dee:	4b4f      	ldr	r3, [pc, #316]	; (8009f2c <xTaskIncrementTick+0x148>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 808f 	bne.w	8009f16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009df8:	4b4d      	ldr	r3, [pc, #308]	; (8009f30 <xTaskIncrementTick+0x14c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e00:	4a4b      	ldr	r2, [pc, #300]	; (8009f30 <xTaskIncrementTick+0x14c>)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d120      	bne.n	8009e4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e0c:	4b49      	ldr	r3, [pc, #292]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <xTaskIncrementTick+0x48>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	603b      	str	r3, [r7, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <xTaskIncrementTick+0x46>
 8009e2c:	4b41      	ldr	r3, [pc, #260]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a3f      	ldr	r2, [pc, #252]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <xTaskIncrementTick+0x154>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <xTaskIncrementTick+0x158>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3301      	adds	r3, #1
 8009e46:	4a3d      	ldr	r2, [pc, #244]	; (8009f3c <xTaskIncrementTick+0x158>)
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	f000 fadb 	bl	800a404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e4e:	4b3c      	ldr	r3, [pc, #240]	; (8009f40 <xTaskIncrementTick+0x15c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d349      	bcc.n	8009eec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e58:	4b36      	ldr	r3, [pc, #216]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d104      	bne.n	8009e6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e62:	4b37      	ldr	r3, [pc, #220]	; (8009f40 <xTaskIncrementTick+0x15c>)
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	601a      	str	r2, [r3, #0]
					break;
 8009e6a:	e03f      	b.n	8009eec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6c:	4b31      	ldr	r3, [pc, #196]	; (8009f34 <xTaskIncrementTick+0x150>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d203      	bcs.n	8009e8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e84:	4a2e      	ldr	r2, [pc, #184]	; (8009f40 <xTaskIncrementTick+0x15c>)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e8a:	e02f      	b.n	8009eec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe ff79 	bl	8008d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	3318      	adds	r3, #24
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe ff70 	bl	8008d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <xTaskIncrementTick+0x160>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <xTaskIncrementTick+0xd8>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a22      	ldr	r2, [pc, #136]	; (8009f44 <xTaskIncrementTick+0x160>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <xTaskIncrementTick+0x164>)
 8009eca:	441a      	add	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	f7fe fefb 	bl	8008cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009edc:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <xTaskIncrementTick+0x168>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d3b8      	bcc.n	8009e58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eea:	e7b5      	b.n	8009e58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eec:	4b17      	ldr	r3, [pc, #92]	; (8009f4c <xTaskIncrementTick+0x168>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	4915      	ldr	r1, [pc, #84]	; (8009f48 <xTaskIncrementTick+0x164>)
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d901      	bls.n	8009f08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f08:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <xTaskIncrementTick+0x16c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d007      	beq.n	8009f20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	e004      	b.n	8009f20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <xTaskIncrementTick+0x170>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	4a0d      	ldr	r2, [pc, #52]	; (8009f54 <xTaskIncrementTick+0x170>)
 8009f1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f20:	697b      	ldr	r3, [r7, #20]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20001168 	.word	0x20001168
 8009f30:	20001144 	.word	0x20001144
 8009f34:	200010f8 	.word	0x200010f8
 8009f38:	200010fc 	.word	0x200010fc
 8009f3c:	20001158 	.word	0x20001158
 8009f40:	20001160 	.word	0x20001160
 8009f44:	20001148 	.word	0x20001148
 8009f48:	20000c70 	.word	0x20000c70
 8009f4c:	20000c6c 	.word	0x20000c6c
 8009f50:	20001154 	.word	0x20001154
 8009f54:	20001150 	.word	0x20001150

08009f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f5e:	4b2a      	ldr	r3, [pc, #168]	; (800a008 <vTaskSwitchContext+0xb0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f66:	4b29      	ldr	r3, [pc, #164]	; (800a00c <vTaskSwitchContext+0xb4>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f6c:	e046      	b.n	8009ffc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f6e:	4b27      	ldr	r3, [pc, #156]	; (800a00c <vTaskSwitchContext+0xb4>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f74:	4b26      	ldr	r3, [pc, #152]	; (800a010 <vTaskSwitchContext+0xb8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60fb      	str	r3, [r7, #12]
 8009f7a:	e010      	b.n	8009f9e <vTaskSwitchContext+0x46>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	607b      	str	r3, [r7, #4]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <vTaskSwitchContext+0x3e>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	491d      	ldr	r1, [pc, #116]	; (800a014 <vTaskSwitchContext+0xbc>)
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	440b      	add	r3, r1
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0e4      	beq.n	8009f7c <vTaskSwitchContext+0x24>
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a15      	ldr	r2, [pc, #84]	; (800a014 <vTaskSwitchContext+0xbc>)
 8009fbe:	4413      	add	r3, r2
 8009fc0:	60bb      	str	r3, [r7, #8]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	605a      	str	r2, [r3, #4]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d104      	bne.n	8009fe2 <vTaskSwitchContext+0x8a>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <vTaskSwitchContext+0xc0>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	4a08      	ldr	r2, [pc, #32]	; (800a010 <vTaskSwitchContext+0xb8>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <vTaskSwitchContext+0xc0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3354      	adds	r3, #84	; 0x54
 8009ff8:	4a08      	ldr	r2, [pc, #32]	; (800a01c <vTaskSwitchContext+0xc4>)
 8009ffa:	6013      	str	r3, [r2, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	20001168 	.word	0x20001168
 800a00c:	20001154 	.word	0x20001154
 800a010:	20001148 	.word	0x20001148
 800a014:	20000c70 	.word	0x20000c70
 800a018:	20000c6c 	.word	0x20000c6c
 800a01c:	20000094 	.word	0x20000094

0800a020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <vTaskPlaceOnEventList+0x44>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3318      	adds	r3, #24
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fe fe61 	bl	8008d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a054:	2101      	movs	r1, #1
 800a056:	6838      	ldr	r0, [r7, #0]
 800a058:	f000 fa80 	bl	800a55c <prvAddCurrentTaskToDelayedList>
}
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20000c6c 	.word	0x20000c6c

0800a068 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	617b      	str	r3, [r7, #20]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <vTaskPlaceOnEventListRestricted+0x54>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3318      	adds	r3, #24
 800a096:	4619      	mov	r1, r3
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7fe fe18 	bl	8008cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	68b8      	ldr	r0, [r7, #8]
 800a0ae:	f000 fa55 	bl	800a55c <prvAddCurrentTaskToDelayedList>
	}
 800a0b2:	bf00      	nop
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000c6c 	.word	0x20000c6c

0800a0c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10a      	bne.n	800a0ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60fb      	str	r3, [r7, #12]
}
 800a0e8:	bf00      	nop
 800a0ea:	e7fe      	b.n	800a0ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3318      	adds	r3, #24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fe49 	bl	8008d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0f6:	4b1e      	ldr	r3, [pc, #120]	; (800a170 <xTaskRemoveFromEventList+0xb0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d11d      	bne.n	800a13a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3304      	adds	r3, #4
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fe40 	bl	8008d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <xTaskRemoveFromEventList+0xb4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d903      	bls.n	800a11c <xTaskRemoveFromEventList+0x5c>
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	4a16      	ldr	r2, [pc, #88]	; (800a174 <xTaskRemoveFromEventList+0xb4>)
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4a13      	ldr	r2, [pc, #76]	; (800a178 <xTaskRemoveFromEventList+0xb8>)
 800a12a:	441a      	add	r2, r3
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	3304      	adds	r3, #4
 800a130:	4619      	mov	r1, r3
 800a132:	4610      	mov	r0, r2
 800a134:	f7fe fdcb 	bl	8008cce <vListInsertEnd>
 800a138:	e005      	b.n	800a146 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3318      	adds	r3, #24
 800a13e:	4619      	mov	r1, r3
 800a140:	480e      	ldr	r0, [pc, #56]	; (800a17c <xTaskRemoveFromEventList+0xbc>)
 800a142:	f7fe fdc4 	bl	8008cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14a:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <xTaskRemoveFromEventList+0xc0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	429a      	cmp	r2, r3
 800a152:	d905      	bls.n	800a160 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <xTaskRemoveFromEventList+0xc4>)
 800a15a:	2201      	movs	r2, #1
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e001      	b.n	800a164 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a164:	697b      	ldr	r3, [r7, #20]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20001168 	.word	0x20001168
 800a174:	20001148 	.word	0x20001148
 800a178:	20000c70 	.word	0x20000c70
 800a17c:	20001100 	.word	0x20001100
 800a180:	20000c6c 	.word	0x20000c6c
 800a184:	20001154 	.word	0x20001154

0800a188 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a190:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <vTaskInternalSetTimeOutState+0x24>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <vTaskInternalSetTimeOutState+0x28>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	605a      	str	r2, [r3, #4]
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20001158 	.word	0x20001158
 800a1b0:	20001144 	.word	0x20001144

0800a1b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	613b      	str	r3, [r7, #16]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10a      	bne.n	800a1f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1f6:	f000 fe7d 	bl	800aef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1fa:	4b1d      	ldr	r3, [pc, #116]	; (800a270 <xTaskCheckForTimeOut+0xbc>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d102      	bne.n	800a21a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
 800a218:	e023      	b.n	800a262 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4b15      	ldr	r3, [pc, #84]	; (800a274 <xTaskCheckForTimeOut+0xc0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d007      	beq.n	800a236 <xTaskCheckForTimeOut+0x82>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d302      	bcc.n	800a236 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	61fb      	str	r3, [r7, #28]
 800a234:	e015      	b.n	800a262 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d20b      	bcs.n	800a258 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	1ad2      	subs	r2, r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7ff ff9b 	bl	800a188 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a252:	2300      	movs	r3, #0
 800a254:	61fb      	str	r3, [r7, #28]
 800a256:	e004      	b.n	800a262 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a25e:	2301      	movs	r3, #1
 800a260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a262:	f000 fe77 	bl	800af54 <vPortExitCritical>

	return xReturn;
 800a266:	69fb      	ldr	r3, [r7, #28]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20001144 	.word	0x20001144
 800a274:	20001158 	.word	0x20001158

0800a278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a27c:	4b03      	ldr	r3, [pc, #12]	; (800a28c <vTaskMissedYield+0x14>)
 800a27e:	2201      	movs	r2, #1
 800a280:	601a      	str	r2, [r3, #0]
}
 800a282:	bf00      	nop
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	20001154 	.word	0x20001154

0800a290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a298:	f000 f852 	bl	800a340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <prvIdleTask+0x28>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d9f9      	bls.n	800a298 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <prvIdleTask+0x2c>)
 800a2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2b4:	e7f0      	b.n	800a298 <prvIdleTask+0x8>
 800a2b6:	bf00      	nop
 800a2b8:	20000c70 	.word	0x20000c70
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	607b      	str	r3, [r7, #4]
 800a2ca:	e00c      	b.n	800a2e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4a12      	ldr	r2, [pc, #72]	; (800a320 <prvInitialiseTaskLists+0x60>)
 800a2d8:	4413      	add	r3, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fcca 	bl	8008c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	607b      	str	r3, [r7, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b37      	cmp	r3, #55	; 0x37
 800a2ea:	d9ef      	bls.n	800a2cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2ec:	480d      	ldr	r0, [pc, #52]	; (800a324 <prvInitialiseTaskLists+0x64>)
 800a2ee:	f7fe fcc1 	bl	8008c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2f2:	480d      	ldr	r0, [pc, #52]	; (800a328 <prvInitialiseTaskLists+0x68>)
 800a2f4:	f7fe fcbe 	bl	8008c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2f8:	480c      	ldr	r0, [pc, #48]	; (800a32c <prvInitialiseTaskLists+0x6c>)
 800a2fa:	f7fe fcbb 	bl	8008c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2fe:	480c      	ldr	r0, [pc, #48]	; (800a330 <prvInitialiseTaskLists+0x70>)
 800a300:	f7fe fcb8 	bl	8008c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a304:	480b      	ldr	r0, [pc, #44]	; (800a334 <prvInitialiseTaskLists+0x74>)
 800a306:	f7fe fcb5 	bl	8008c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a30a:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <prvInitialiseTaskLists+0x78>)
 800a30c:	4a05      	ldr	r2, [pc, #20]	; (800a324 <prvInitialiseTaskLists+0x64>)
 800a30e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a310:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <prvInitialiseTaskLists+0x7c>)
 800a312:	4a05      	ldr	r2, [pc, #20]	; (800a328 <prvInitialiseTaskLists+0x68>)
 800a314:	601a      	str	r2, [r3, #0]
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000c70 	.word	0x20000c70
 800a324:	200010d0 	.word	0x200010d0
 800a328:	200010e4 	.word	0x200010e4
 800a32c:	20001100 	.word	0x20001100
 800a330:	20001114 	.word	0x20001114
 800a334:	2000112c 	.word	0x2000112c
 800a338:	200010f8 	.word	0x200010f8
 800a33c:	200010fc 	.word	0x200010fc

0800a340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a346:	e019      	b.n	800a37c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a348:	f000 fdd4 	bl	800aef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34c:	4b10      	ldr	r3, [pc, #64]	; (800a390 <prvCheckTasksWaitingTermination+0x50>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3304      	adds	r3, #4
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe fd15 	bl	8008d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a35e:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <prvCheckTasksWaitingTermination+0x54>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3b01      	subs	r3, #1
 800a364:	4a0b      	ldr	r2, [pc, #44]	; (800a394 <prvCheckTasksWaitingTermination+0x54>)
 800a366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a368:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <prvCheckTasksWaitingTermination+0x58>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	4a0a      	ldr	r2, [pc, #40]	; (800a398 <prvCheckTasksWaitingTermination+0x58>)
 800a370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a372:	f000 fdef 	bl	800af54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f810 	bl	800a39c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a37c:	4b06      	ldr	r3, [pc, #24]	; (800a398 <prvCheckTasksWaitingTermination+0x58>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e1      	bne.n	800a348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20001114 	.word	0x20001114
 800a394:	20001140 	.word	0x20001140
 800a398:	20001128 	.word	0x20001128

0800a39c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3354      	adds	r3, #84	; 0x54
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f002 f92f 	bl	800c60c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d108      	bne.n	800a3ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 ff87 	bl	800b2d0 <vPortFree>
				vPortFree( pxTCB );
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 ff84 	bl	800b2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3c8:	e018      	b.n	800a3fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d103      	bne.n	800a3dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 ff7b 	bl	800b2d0 <vPortFree>
	}
 800a3da:	e00f      	b.n	800a3fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d00a      	beq.n	800a3fc <prvDeleteTCB+0x60>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	60fb      	str	r3, [r7, #12]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <prvDeleteTCB+0x5e>
	}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <prvResetNextTaskUnblockTime+0x38>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a414:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <prvResetNextTaskUnblockTime+0x3c>)
 800a416:	f04f 32ff 	mov.w	r2, #4294967295
 800a41a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a41c:	e008      	b.n	800a430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a41e:	4b07      	ldr	r3, [pc, #28]	; (800a43c <prvResetNextTaskUnblockTime+0x38>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a04      	ldr	r2, [pc, #16]	; (800a440 <prvResetNextTaskUnblockTime+0x3c>)
 800a42e:	6013      	str	r3, [r2, #0]
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	200010f8 	.word	0x200010f8
 800a440:	20001160 	.word	0x20001160

0800a444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <xTaskGetSchedulerState+0x34>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a452:	2301      	movs	r3, #1
 800a454:	607b      	str	r3, [r7, #4]
 800a456:	e008      	b.n	800a46a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a458:	4b08      	ldr	r3, [pc, #32]	; (800a47c <xTaskGetSchedulerState+0x38>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a460:	2302      	movs	r3, #2
 800a462:	607b      	str	r3, [r7, #4]
 800a464:	e001      	b.n	800a46a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a466:	2300      	movs	r3, #0
 800a468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a46a:	687b      	ldr	r3, [r7, #4]
	}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	2000114c 	.word	0x2000114c
 800a47c:	20001168 	.word	0x20001168

0800a480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d056      	beq.n	800a544 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a496:	4b2e      	ldr	r3, [pc, #184]	; (800a550 <xTaskPriorityDisinherit+0xd0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d00a      	beq.n	800a4b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	60fb      	str	r3, [r7, #12]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	60bb      	str	r3, [r7, #8]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	1e5a      	subs	r2, r3, #1
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d02c      	beq.n	800a544 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d128      	bne.n	800a544 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fc46 	bl	8008d88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <xTaskPriorityDisinherit+0xd4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d903      	bls.n	800a524 <xTaskPriorityDisinherit+0xa4>
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	4a0c      	ldr	r2, [pc, #48]	; (800a554 <xTaskPriorityDisinherit+0xd4>)
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4a09      	ldr	r2, [pc, #36]	; (800a558 <xTaskPriorityDisinherit+0xd8>)
 800a532:	441a      	add	r2, r3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	3304      	adds	r3, #4
 800a538:	4619      	mov	r1, r3
 800a53a:	4610      	mov	r0, r2
 800a53c:	f7fe fbc7 	bl	8008cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a540:	2301      	movs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a544:	697b      	ldr	r3, [r7, #20]
	}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000c6c 	.word	0x20000c6c
 800a554:	20001148 	.word	0x20001148
 800a558:	20000c70 	.word	0x20000c70

0800a55c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a566:	4b21      	ldr	r3, [pc, #132]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x90>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a56c:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3304      	adds	r3, #4
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fc08 	bl	8008d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d10a      	bne.n	800a596 <prvAddCurrentTaskToDelayedList+0x3a>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a586:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4819      	ldr	r0, [pc, #100]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a590:	f7fe fb9d 	bl	8008cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a594:	e026      	b.n	800a5e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d209      	bcs.n	800a5c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	4b0f      	ldr	r3, [pc, #60]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	f7fe fbab 	bl	8008d16 <vListInsert>
}
 800a5c0:	e010      	b.n	800a5e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7fe fba1 	bl	8008d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d202      	bcs.n	800a5e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5de:	4a08      	ldr	r2, [pc, #32]	; (800a600 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6013      	str	r3, [r2, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20001144 	.word	0x20001144
 800a5f0:	20000c6c 	.word	0x20000c6c
 800a5f4:	2000112c 	.word	0x2000112c
 800a5f8:	200010fc 	.word	0x200010fc
 800a5fc:	200010f8 	.word	0x200010f8
 800a600:	20001160 	.word	0x20001160

0800a604 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08a      	sub	sp, #40	; 0x28
 800a608:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a60e:	f000 fb07 	bl	800ac20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a612:	4b1c      	ldr	r3, [pc, #112]	; (800a684 <xTimerCreateTimerTask+0x80>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d021      	beq.n	800a65e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a622:	1d3a      	adds	r2, r7, #4
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	f107 030c 	add.w	r3, r7, #12
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fb07 	bl	8008c40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	9202      	str	r2, [sp, #8]
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	2302      	movs	r3, #2
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	460a      	mov	r2, r1
 800a644:	4910      	ldr	r1, [pc, #64]	; (800a688 <xTimerCreateTimerTask+0x84>)
 800a646:	4811      	ldr	r0, [pc, #68]	; (800a68c <xTimerCreateTimerTask+0x88>)
 800a648:	f7ff f8b4 	bl	80097b4 <xTaskCreateStatic>
 800a64c:	4603      	mov	r3, r0
 800a64e:	4a10      	ldr	r2, [pc, #64]	; (800a690 <xTimerCreateTimerTask+0x8c>)
 800a650:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <xTimerCreateTimerTask+0x8c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	613b      	str	r3, [r7, #16]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a67a:	697b      	ldr	r3, [r7, #20]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	2000119c 	.word	0x2000119c
 800a688:	0800e9c8 	.word	0x0800e9c8
 800a68c:	0800a7c9 	.word	0x0800a7c9
 800a690:	200011a0 	.word	0x200011a0

0800a694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	623b      	str	r3, [r7, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6c2:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d02a      	beq.n	800a720 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b05      	cmp	r3, #5
 800a6da:	dc18      	bgt.n	800a70e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6dc:	f7ff feb2 	bl	800a444 <xTaskGetSchedulerState>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d109      	bne.n	800a6fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6e6:	4b11      	ldr	r3, [pc, #68]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f107 0110 	add.w	r1, r7, #16
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f2:	f7fe fc77 	bl	8008fe4 <xQueueGenericSend>
 800a6f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f8:	e012      	b.n	800a720 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <xTimerGenericCommand+0x98>)
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f107 0110 	add.w	r1, r7, #16
 800a702:	2300      	movs	r3, #0
 800a704:	2200      	movs	r2, #0
 800a706:	f7fe fc6d 	bl	8008fe4 <xQueueGenericSend>
 800a70a:	6278      	str	r0, [r7, #36]	; 0x24
 800a70c:	e008      	b.n	800a720 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a70e:	4b07      	ldr	r3, [pc, #28]	; (800a72c <xTimerGenericCommand+0x98>)
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	f107 0110 	add.w	r1, r7, #16
 800a716:	2300      	movs	r3, #0
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	f7fe fd61 	bl	80091e0 <xQueueGenericSendFromISR>
 800a71e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a722:	4618      	mov	r0, r3
 800a724:	3728      	adds	r7, #40	; 0x28
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	2000119c 	.word	0x2000119c

0800a730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af02      	add	r7, sp, #8
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73a:	4b22      	ldr	r3, [pc, #136]	; (800a7c4 <prvProcessExpiredTimer+0x94>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fb1d 	bl	8008d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d022      	beq.n	800a7a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	699a      	ldr	r2, [r3, #24]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	18d1      	adds	r1, r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	6978      	ldr	r0, [r7, #20]
 800a76a:	f000 f8d1 	bl	800a910 <prvInsertTimerInActiveList>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01f      	beq.n	800a7b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a774:	2300      	movs	r3, #0
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	2300      	movs	r3, #0
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	2100      	movs	r1, #0
 800a77e:	6978      	ldr	r0, [r7, #20]
 800a780:	f7ff ff88 	bl	800a694 <xTimerGenericCommand>
 800a784:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d113      	bne.n	800a7b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	60fb      	str	r3, [r7, #12]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	6978      	ldr	r0, [r7, #20]
 800a7ba:	4798      	blx	r3
}
 800a7bc:	bf00      	nop
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20001194 	.word	0x20001194

0800a7c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7d0:	f107 0308 	add.w	r3, r7, #8
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f857 	bl	800a888 <prvGetNextExpireTime>
 800a7da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f803 	bl	800a7ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7e6:	f000 f8d5 	bl	800a994 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ea:	e7f1      	b.n	800a7d0 <prvTimerTask+0x8>

0800a7ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7f6:	f7ff fa39 	bl	8009c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7fa:	f107 0308 	add.w	r3, r7, #8
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f866 	bl	800a8d0 <prvSampleTimeNow>
 800a804:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d130      	bne.n	800a86e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <prvProcessTimerOrBlockTask+0x3c>
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	429a      	cmp	r2, r3
 800a818:	d806      	bhi.n	800a828 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a81a:	f7ff fa35 	bl	8009c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff ff85 	bl	800a730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a826:	e024      	b.n	800a872 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <prvProcessTimerOrBlockTask+0x90>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <prvProcessTimerOrBlockTask+0x50>
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <prvProcessTimerOrBlockTask+0x52>
 800a83c:	2300      	movs	r3, #0
 800a83e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a840:	4b0f      	ldr	r3, [pc, #60]	; (800a880 <prvProcessTimerOrBlockTask+0x94>)
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7fe ff7d 	bl	800974c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a852:	f7ff fa19 	bl	8009c88 <xTaskResumeAll>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a85c:	4b09      	ldr	r3, [pc, #36]	; (800a884 <prvProcessTimerOrBlockTask+0x98>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	f3bf 8f6f 	isb	sy
}
 800a86c:	e001      	b.n	800a872 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a86e:	f7ff fa0b 	bl	8009c88 <xTaskResumeAll>
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20001198 	.word	0x20001198
 800a880:	2000119c 	.word	0x2000119c
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a890:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <prvGetNextExpireTime+0x44>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <prvGetNextExpireTime+0x16>
 800a89a:	2201      	movs	r2, #1
 800a89c:	e000      	b.n	800a8a0 <prvGetNextExpireTime+0x18>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d105      	bne.n	800a8b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <prvGetNextExpireTime+0x44>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	e001      	b.n	800a8bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20001194 	.word	0x20001194

0800a8d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8d8:	f7ff fa74 	bl	8009dc4 <xTaskGetTickCount>
 800a8dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8de:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <prvSampleTimeNow+0x3c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d205      	bcs.n	800a8f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8e8:	f000 f936 	bl	800ab58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	e002      	b.n	800a8fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8fa:	4a04      	ldr	r2, [pc, #16]	; (800a90c <prvSampleTimeNow+0x3c>)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a900:	68fb      	ldr	r3, [r7, #12]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	200011a4 	.word	0x200011a4

0800a910 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d812      	bhi.n	800a95c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	1ad2      	subs	r2, r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	429a      	cmp	r2, r3
 800a942:	d302      	bcc.n	800a94a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a944:	2301      	movs	r3, #1
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	e01b      	b.n	800a982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a94a:	4b10      	ldr	r3, [pc, #64]	; (800a98c <prvInsertTimerInActiveList+0x7c>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3304      	adds	r3, #4
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7fe f9de 	bl	8008d16 <vListInsert>
 800a95a:	e012      	b.n	800a982 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d206      	bcs.n	800a972 <prvInsertTimerInActiveList+0x62>
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d302      	bcc.n	800a972 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a96c:	2301      	movs	r3, #1
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e007      	b.n	800a982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <prvInsertTimerInActiveList+0x80>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3304      	adds	r3, #4
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7fe f9ca 	bl	8008d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a982:	697b      	ldr	r3, [r7, #20]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20001198 	.word	0x20001198
 800a990:	20001194 	.word	0x20001194

0800a994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08e      	sub	sp, #56	; 0x38
 800a998:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a99a:	e0ca      	b.n	800ab32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da18      	bge.n	800a9d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9a2:	1d3b      	adds	r3, r7, #4
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	61fb      	str	r3, [r7, #28]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ca:	6850      	ldr	r0, [r2, #4]
 800a9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ce:	6892      	ldr	r2, [r2, #8]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f2c0 80ab 	blt.w	800ab32 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe f9cb 	bl	8008d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff ff6b 	bl	800a8d0 <prvSampleTimeNow>
 800a9fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	f200 8096 	bhi.w	800ab30 <prvProcessReceivedCommands+0x19c>
 800aa04:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <prvProcessReceivedCommands+0x78>)
 800aa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0a:	bf00      	nop
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa35 	.word	0x0800aa35
 800aa14:	0800aa35 	.word	0x0800aa35
 800aa18:	0800aaa9 	.word	0x0800aaa9
 800aa1c:	0800aabd 	.word	0x0800aabd
 800aa20:	0800ab07 	.word	0x0800ab07
 800aa24:	0800aa35 	.word	0x0800aa35
 800aa28:	0800aa35 	.word	0x0800aa35
 800aa2c:	0800aaa9 	.word	0x0800aaa9
 800aa30:	0800aabd 	.word	0x0800aabd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa3a:	f043 0301 	orr.w	r3, r3, #1
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	18d1      	adds	r1, r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa54:	f7ff ff5c 	bl	800a910 <prvInsertTimerInActiveList>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d069      	beq.n	800ab32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d05e      	beq.n	800ab32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	441a      	add	r2, r3
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	2300      	movs	r3, #0
 800aa82:	2100      	movs	r1, #0
 800aa84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa86:	f7ff fe05 	bl	800a694 <xTimerGenericCommand>
 800aa8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d14f      	bne.n	800ab32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	61bb      	str	r3, [r7, #24]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaae:	f023 0301 	bic.w	r3, r3, #1
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aaba:	e03a      	b.n	800ab32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac2:	f043 0301 	orr.w	r3, r3, #1
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	617b      	str	r3, [r7, #20]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	18d1      	adds	r1, r2, r3
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab00:	f7ff ff06 	bl	800a910 <prvInsertTimerInActiveList>
					break;
 800ab04:	e015      	b.n	800ab32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab16:	f000 fbdb 	bl	800b2d0 <vPortFree>
 800ab1a:	e00a      	b.n	800ab32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab22:	f023 0301 	bic.w	r3, r3, #1
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab2e:	e000      	b.n	800ab32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab32:	4b08      	ldr	r3, [pc, #32]	; (800ab54 <prvProcessReceivedCommands+0x1c0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	1d39      	adds	r1, r7, #4
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fbec 	bl	8009318 <xQueueReceive>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f af2a 	bne.w	800a99c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	3730      	adds	r7, #48	; 0x30
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	2000119c 	.word	0x2000119c

0800ab58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab5e:	e048      	b.n	800abf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab60:	4b2d      	ldr	r3, [pc, #180]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6a:	4b2b      	ldr	r3, [pc, #172]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe f905 	bl	8008d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d02e      	beq.n	800abf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d90e      	bls.n	800abc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abb2:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7fe f8aa 	bl	8008d16 <vListInsert>
 800abc2:	e016      	b.n	800abf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abc4:	2300      	movs	r3, #0
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	2300      	movs	r3, #0
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	2100      	movs	r1, #0
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7ff fd60 	bl	800a694 <xTimerGenericCommand>
 800abd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	603b      	str	r3, [r7, #0]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abf2:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1b1      	bne.n	800ab60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac02:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <prvSwitchTimerLists+0xc4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <prvSwitchTimerLists+0xc0>)
 800ac08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac0a:	4a04      	ldr	r2, [pc, #16]	; (800ac1c <prvSwitchTimerLists+0xc4>)
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	6013      	str	r3, [r2, #0]
}
 800ac10:	bf00      	nop
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20001194 	.word	0x20001194
 800ac1c:	20001198 	.word	0x20001198

0800ac20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac26:	f000 f965 	bl	800aef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac2a:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <prvCheckForValidListAndQueue+0x60>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d120      	bne.n	800ac74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac32:	4814      	ldr	r0, [pc, #80]	; (800ac84 <prvCheckForValidListAndQueue+0x64>)
 800ac34:	f7fe f81e 	bl	8008c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac38:	4813      	ldr	r0, [pc, #76]	; (800ac88 <prvCheckForValidListAndQueue+0x68>)
 800ac3a:	f7fe f81b 	bl	8008c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac3e:	4b13      	ldr	r3, [pc, #76]	; (800ac8c <prvCheckForValidListAndQueue+0x6c>)
 800ac40:	4a10      	ldr	r2, [pc, #64]	; (800ac84 <prvCheckForValidListAndQueue+0x64>)
 800ac42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac44:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <prvCheckForValidListAndQueue+0x70>)
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <prvCheckForValidListAndQueue+0x68>)
 800ac48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <prvCheckForValidListAndQueue+0x74>)
 800ac50:	4a11      	ldr	r2, [pc, #68]	; (800ac98 <prvCheckForValidListAndQueue+0x78>)
 800ac52:	2110      	movs	r1, #16
 800ac54:	200a      	movs	r0, #10
 800ac56:	f7fe f929 	bl	8008eac <xQueueGenericCreateStatic>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4a08      	ldr	r2, [pc, #32]	; (800ac80 <prvCheckForValidListAndQueue+0x60>)
 800ac5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <prvCheckForValidListAndQueue+0x60>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <prvCheckForValidListAndQueue+0x60>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	490b      	ldr	r1, [pc, #44]	; (800ac9c <prvCheckForValidListAndQueue+0x7c>)
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fd42 	bl	80096f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac74:	f000 f96e 	bl	800af54 <vPortExitCritical>
}
 800ac78:	bf00      	nop
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000119c 	.word	0x2000119c
 800ac84:	2000116c 	.word	0x2000116c
 800ac88:	20001180 	.word	0x20001180
 800ac8c:	20001194 	.word	0x20001194
 800ac90:	20001198 	.word	0x20001198
 800ac94:	20001248 	.word	0x20001248
 800ac98:	200011a8 	.word	0x200011a8
 800ac9c:	0800e9d0 	.word	0x0800e9d0

0800aca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3b04      	subs	r3, #4
 800acb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3b04      	subs	r3, #4
 800acbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f023 0201 	bic.w	r2, r3, #1
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3b04      	subs	r3, #4
 800acce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acd0:	4a0c      	ldr	r2, [pc, #48]	; (800ad04 <pxPortInitialiseStack+0x64>)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3b14      	subs	r3, #20
 800acda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3b04      	subs	r3, #4
 800ace6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f06f 0202 	mvn.w	r2, #2
 800acee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3b20      	subs	r3, #32
 800acf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acf6:	68fb      	ldr	r3, [r7, #12]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	0800ad09 	.word	0x0800ad09

0800ad08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad12:	4b12      	ldr	r3, [pc, #72]	; (800ad5c <prvTaskExitError+0x54>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d00a      	beq.n	800ad32 <prvTaskExitError+0x2a>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60fb      	str	r3, [r7, #12]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <prvTaskExitError+0x28>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	60bb      	str	r3, [r7, #8]
}
 800ad44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad46:	bf00      	nop
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0fc      	beq.n	800ad48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad4e:	bf00      	nop
 800ad50:	bf00      	nop
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	20000038 	.word	0x20000038

0800ad60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <pxCurrentTCBConst2>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	6808      	ldr	r0, [r1, #0]
 800ad66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	f380 8809 	msr	PSP, r0
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8811 	msr	BASEPRI, r0
 800ad7a:	4770      	bx	lr
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst2>:
 800ad80:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad88:	4808      	ldr	r0, [pc, #32]	; (800adac <prvPortStartFirstTask+0x24>)
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	f380 8808 	msr	MSP, r0
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8814 	msr	CONTROL, r0
 800ad9a:	b662      	cpsie	i
 800ad9c:	b661      	cpsie	f
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	df00      	svc	0
 800ada8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adaa:	bf00      	nop
 800adac:	e000ed08 	.word	0xe000ed08

0800adb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adb6:	4b46      	ldr	r3, [pc, #280]	; (800aed0 <xPortStartScheduler+0x120>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a46      	ldr	r2, [pc, #280]	; (800aed4 <xPortStartScheduler+0x124>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10a      	bne.n	800add6 <xPortStartScheduler+0x26>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800add6:	4b3e      	ldr	r3, [pc, #248]	; (800aed0 <xPortStartScheduler+0x120>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a3f      	ldr	r2, [pc, #252]	; (800aed8 <xPortStartScheduler+0x128>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d10a      	bne.n	800adf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	60fb      	str	r3, [r7, #12]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adf6:	4b39      	ldr	r3, [pc, #228]	; (800aedc <xPortStartScheduler+0x12c>)
 800adf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b31      	ldr	r3, [pc, #196]	; (800aee0 <xPortStartScheduler+0x130>)
 800ae1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae1e:	4b31      	ldr	r3, [pc, #196]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae20:	2207      	movs	r2, #7
 800ae22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae24:	e009      	b.n	800ae3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae26:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	4a2d      	ldr	r2, [pc, #180]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae42:	2b80      	cmp	r3, #128	; 0x80
 800ae44:	d0ef      	beq.n	800ae26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae46:	4b27      	ldr	r3, [pc, #156]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f1c3 0307 	rsb	r3, r3, #7
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d00a      	beq.n	800ae68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60bb      	str	r3, [r7, #8]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae7a:	4a1a      	ldr	r2, [pc, #104]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae86:	4b18      	ldr	r3, [pc, #96]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae92:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a14      	ldr	r2, [pc, #80]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae9e:	f000 f8dd 	bl	800b05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <xPortStartScheduler+0x13c>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aea8:	f000 f8fc 	bl	800b0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeac:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aeb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aeb8:	f7ff ff66 	bl	800ad88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aebc:	f7ff f84c 	bl	8009f58 <vTaskSwitchContext>
	prvTaskExitError();
 800aec0:	f7ff ff22 	bl	800ad08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	e000ed00 	.word	0xe000ed00
 800aed4:	410fc271 	.word	0x410fc271
 800aed8:	410fc270 	.word	0x410fc270
 800aedc:	e000e400 	.word	0xe000e400
 800aee0:	20001298 	.word	0x20001298
 800aee4:	2000129c 	.word	0x2000129c
 800aee8:	e000ed20 	.word	0xe000ed20
 800aeec:	20000038 	.word	0x20000038
 800aef0:	e000ef34 	.word	0xe000ef34

0800aef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
}
 800af0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af0e:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <vPortEnterCritical+0x58>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <vPortEnterCritical+0x58>)
 800af16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af18:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <vPortEnterCritical+0x58>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10f      	bne.n	800af40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af20:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <vPortEnterCritical+0x5c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <vPortEnterCritical+0x4c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	603b      	str	r3, [r7, #0]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <vPortEnterCritical+0x4a>
	}
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	20000038 	.word	0x20000038
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <vPortExitCritical+0x50>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <vPortExitCritical+0x24>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	607b      	str	r3, [r7, #4]
}
 800af74:	bf00      	nop
 800af76:	e7fe      	b.n	800af76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <vPortExitCritical+0x50>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <vPortExitCritical+0x50>)
 800af80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <vPortExitCritical+0x50>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <vPortExitCritical+0x42>
 800af8a:	2300      	movs	r3, #0
 800af8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000038 	.word	0x20000038
	...

0800afb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afb0:	f3ef 8009 	mrs	r0, PSP
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4b15      	ldr	r3, [pc, #84]	; (800b010 <pxCurrentTCBConst>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f01e 0f10 	tst.w	lr, #16
 800afc0:	bf08      	it	eq
 800afc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6010      	str	r0, [r2, #0]
 800afcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afd4:	f380 8811 	msr	BASEPRI, r0
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f7fe ffba 	bl	8009f58 <vTaskSwitchContext>
 800afe4:	f04f 0000 	mov.w	r0, #0
 800afe8:	f380 8811 	msr	BASEPRI, r0
 800afec:	bc09      	pop	{r0, r3}
 800afee:	6819      	ldr	r1, [r3, #0]
 800aff0:	6808      	ldr	r0, [r1, #0]
 800aff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f01e 0f10 	tst.w	lr, #16
 800affa:	bf08      	it	eq
 800affc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b000:	f380 8809 	msr	PSP, r0
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst>:
 800b010:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
}
 800b030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b032:	f7fe fed7 	bl	8009de4 <xTaskIncrementTick>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <xPortSysTickHandler+0x40>)
 800b03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f383 8811 	msr	BASEPRI, r3
}
 800b04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b060:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <vPortSetupTimerInterrupt+0x38>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <vPortSetupTimerInterrupt+0x3c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <vPortSetupTimerInterrupt+0x40>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <vPortSetupTimerInterrupt+0x44>)
 800b07a:	3b01      	subs	r3, #1
 800b07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b07e:	4b04      	ldr	r3, [pc, #16]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	e000e010 	.word	0xe000e010
 800b094:	e000e018 	.word	0xe000e018
 800b098:	2000002c 	.word	0x2000002c
 800b09c:	10624dd3 	.word	0x10624dd3
 800b0a0:	e000e014 	.word	0xe000e014

0800b0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0b4 <vPortEnableVFP+0x10>
 800b0a8:	6801      	ldr	r1, [r0, #0]
 800b0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ae:	6001      	str	r1, [r0, #0]
 800b0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed88 	.word	0xe000ed88

0800b0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0be:	f3ef 8305 	mrs	r3, IPSR
 800b0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d914      	bls.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <vPortValidateInterruptPriority+0x70>)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0d4:	4b15      	ldr	r3, [pc, #84]	; (800b12c <vPortValidateInterruptPriority+0x74>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	7afa      	ldrb	r2, [r7, #11]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d20a      	bcs.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	; (800b130 <vPortValidateInterruptPriority+0x78>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <vPortValidateInterruptPriority+0x7c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d90a      	bls.n	800b11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	603b      	str	r3, [r7, #0]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <vPortValidateInterruptPriority+0x60>
	}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	e000e3f0 	.word	0xe000e3f0
 800b12c:	20001298 	.word	0x20001298
 800b130:	e000ed0c 	.word	0xe000ed0c
 800b134:	2000129c 	.word	0x2000129c

0800b138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b144:	f7fe fd92 	bl	8009c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b148:	4b5b      	ldr	r3, [pc, #364]	; (800b2b8 <pvPortMalloc+0x180>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b150:	f000 f920 	bl	800b394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b154:	4b59      	ldr	r3, [pc, #356]	; (800b2bc <pvPortMalloc+0x184>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4013      	ands	r3, r2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 8093 	bne.w	800b288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01d      	beq.n	800b1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b168:	2208      	movs	r2, #8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d014      	beq.n	800b1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	3308      	adds	r3, #8
 800b182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	617b      	str	r3, [r7, #20]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d06e      	beq.n	800b288 <pvPortMalloc+0x150>
 800b1aa:	4b45      	ldr	r3, [pc, #276]	; (800b2c0 <pvPortMalloc+0x188>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d869      	bhi.n	800b288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1b4:	4b43      	ldr	r3, [pc, #268]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1b8:	4b42      	ldr	r3, [pc, #264]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1be:	e004      	b.n	800b1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <pvPortMalloc+0xa4>
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1dc:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <pvPortMalloc+0x180>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d050      	beq.n	800b288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2208      	movs	r2, #8
 800b1ec:	4413      	add	r3, r2
 800b1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	2308      	movs	r3, #8
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	429a      	cmp	r2, r3
 800b206:	d91f      	bls.n	800b248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <pvPortMalloc+0xf8>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	613b      	str	r3, [r7, #16]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	1ad2      	subs	r2, r2, r3
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b242:	69b8      	ldr	r0, [r7, #24]
 800b244:	f000 f908 	bl	800b458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <pvPortMalloc+0x188>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <pvPortMalloc+0x188>)
 800b254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <pvPortMalloc+0x188>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <pvPortMalloc+0x190>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d203      	bcs.n	800b26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b262:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <pvPortMalloc+0x188>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a18      	ldr	r2, [pc, #96]	; (800b2c8 <pvPortMalloc+0x190>)
 800b268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <pvPortMalloc+0x184>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	431a      	orrs	r2, r3
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <pvPortMalloc+0x194>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <pvPortMalloc+0x194>)
 800b286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b288:	f7fe fcfe 	bl	8009c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <pvPortMalloc+0x174>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	60fb      	str	r3, [r7, #12]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <pvPortMalloc+0x172>
	return pvReturn;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3728      	adds	r7, #40	; 0x28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20004ea8 	.word	0x20004ea8
 800b2bc:	20004ebc 	.word	0x20004ebc
 800b2c0:	20004eac 	.word	0x20004eac
 800b2c4:	20004ea0 	.word	0x20004ea0
 800b2c8:	20004eb0 	.word	0x20004eb0
 800b2cc:	20004eb4 	.word	0x20004eb4

0800b2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d04d      	beq.n	800b37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <vPortFree+0xb8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10a      	bne.n	800b314 <vPortFree+0x44>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <vPortFree+0x62>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60bb      	str	r3, [r7, #8]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <vPortFree+0xb8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11a      	bne.n	800b37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <vPortFree+0xb8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	43db      	mvns	r3, r3
 800b352:	401a      	ands	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b358:	f7fe fc88 	bl	8009c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <vPortFree+0xbc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4413      	add	r3, r2
 800b366:	4a09      	ldr	r2, [pc, #36]	; (800b38c <vPortFree+0xbc>)
 800b368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b36a:	6938      	ldr	r0, [r7, #16]
 800b36c:	f000 f874 	bl	800b458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <vPortFree+0xc0>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	4a06      	ldr	r2, [pc, #24]	; (800b390 <vPortFree+0xc0>)
 800b378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b37a:	f7fe fc85 	bl	8009c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20004ebc 	.word	0x20004ebc
 800b38c:	20004eac 	.word	0x20004eac
 800b390:	20004eb8 	.word	0x20004eb8

0800b394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b39a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3a0:	4b27      	ldr	r3, [pc, #156]	; (800b440 <prvHeapInit+0xac>)
 800b3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3307      	adds	r3, #7
 800b3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 0307 	bic.w	r3, r3, #7
 800b3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <prvHeapInit+0xac>)
 800b3c4:	4413      	add	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3cc:	4a1d      	ldr	r2, [pc, #116]	; (800b444 <prvHeapInit+0xb0>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3d2:	4b1c      	ldr	r3, [pc, #112]	; (800b444 <prvHeapInit+0xb0>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	4413      	add	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	1a9b      	subs	r3, r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a15      	ldr	r2, [pc, #84]	; (800b448 <prvHeapInit+0xb4>)
 800b3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3f6:	4b14      	ldr	r3, [pc, #80]	; (800b448 <prvHeapInit+0xb4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvHeapInit+0xb4>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b414:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvHeapInit+0xb4>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4a0a      	ldr	r2, [pc, #40]	; (800b44c <prvHeapInit+0xb8>)
 800b422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4a09      	ldr	r2, [pc, #36]	; (800b450 <prvHeapInit+0xbc>)
 800b42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <prvHeapInit+0xc0>)
 800b42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b432:	601a      	str	r2, [r3, #0]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200012a0 	.word	0x200012a0
 800b444:	20004ea0 	.word	0x20004ea0
 800b448:	20004ea8 	.word	0x20004ea8
 800b44c:	20004eb0 	.word	0x20004eb0
 800b450:	20004eac 	.word	0x20004eac
 800b454:	20004ebc 	.word	0x20004ebc

0800b458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b460:	4b28      	ldr	r3, [pc, #160]	; (800b504 <prvInsertBlockIntoFreeList+0xac>)
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e002      	b.n	800b46c <prvInsertBlockIntoFreeList+0x14>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d8f7      	bhi.n	800b466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d108      	bne.n	800b49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	441a      	add	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d118      	bne.n	800b4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d00d      	beq.n	800b4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	e008      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	e003      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d002      	beq.n	800b4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20004ea0 	.word	0x20004ea0
 800b508:	20004ea8 	.word	0x20004ea8

0800b50c <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08a      	sub	sp, #40	; 0x28
 800b510:	af04      	add	r7, sp, #16
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	460b      	mov	r3, r1
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	b2db      	uxtb	r3, r3
 800b526:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <_ICM20948_SelectUserBank+0x26>
 800b52e:	2368      	movs	r3, #104	; 0x68
 800b530:	e000      	b.n	800b534 <_ICM20948_SelectUserBank+0x28>
 800b532:	2369      	movs	r3, #105	; 0x69
 800b534:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	b299      	uxth	r1, r3
 800b53e:	230a      	movs	r3, #10
 800b540:	9302      	str	r3, [sp, #8]
 800b542:	2301      	movs	r3, #1
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	f107 0315 	add.w	r3, r7, #21
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2301      	movs	r3, #1
 800b54e:	227f      	movs	r2, #127	; 0x7f
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7f9 f9c1 	bl	80048d8 <HAL_I2C_Mem_Write>
 800b556:	4603      	mov	r3, r0
 800b558:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af04      	add	r7, sp, #16
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	461a      	mov	r2, r3
 800b572:	4603      	mov	r3, r0
 800b574:	70fb      	strb	r3, [r7, #3]
 800b576:	460b      	mov	r3, r1
 800b578:	70bb      	strb	r3, [r7, #2]
 800b57a:	4613      	mov	r3, r2
 800b57c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <_ICM20948_WriteByte+0x28>
 800b588:	2368      	movs	r3, #104	; 0x68
 800b58a:	e000      	b.n	800b58e <_ICM20948_WriteByte+0x2a>
 800b58c:	2369      	movs	r3, #105	; 0x69
 800b58e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	b29b      	uxth	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b299      	uxth	r1, r3
 800b598:	78bb      	ldrb	r3, [r7, #2]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	230a      	movs	r3, #10
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	1c7b      	adds	r3, r7, #1
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7f9 f994 	bl	80048d8 <HAL_I2C_Mem_Write>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ff97 	bl	800b50c <_ICM20948_SelectUserBank>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800b5e2:	78f9      	ldrb	r1, [r7, #3]
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	2206      	movs	r2, #6
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ffbb 	bl	800b564 <_ICM20948_WriteByte>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800b5f2:	20c8      	movs	r0, #200	; 0xc8
 800b5f4:	f7f8 f98a 	bl	800390c <HAL_Delay>

	status = _ICM20948_WriteByte(
 800b5f8:	78f9      	ldrb	r1, [r7, #3]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	2206      	movs	r2, #6
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff ffb0 	bl	800b564 <_ICM20948_WriteByte>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800b608:	78f9      	ldrb	r1, [r7, #3]
 800b60a:	2338      	movs	r3, #56	; 0x38
 800b60c:	2207      	movs	r2, #7
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ffa8 	bl	800b564 <_ICM20948_WriteByte>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	2202      	movs	r2, #2
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ff74 	bl	800b50c <_ICM20948_SelectUserBank>
 800b624:	4603      	mov	r3, r0
 800b626:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800b628:	78bb      	ldrb	r3, [r7, #2]
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	f043 0319 	orr.w	r3, r3, #25
 800b632:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800b634:	b2db      	uxtb	r3, r3
 800b636:	78f9      	ldrb	r1, [r7, #3]
 800b638:	2201      	movs	r2, #1
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff ff92 	bl	800b564 <_ICM20948_WriteByte>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800b644:	78f9      	ldrb	r1, [r7, #3]
 800b646:	2304      	movs	r3, #4
 800b648:	2200      	movs	r2, #0
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff ff8a 	bl	800b564 <_ICM20948_WriteByte>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800b654:	78fb      	ldrb	r3, [r7, #3]
 800b656:	2200      	movs	r2, #0
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ff56 	bl	800b50c <_ICM20948_SelectUserBank>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800b664:	78f9      	ldrb	r1, [r7, #3]
 800b666:	2302      	movs	r3, #2
 800b668:	220f      	movs	r2, #15
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff7a 	bl	800b564 <_ICM20948_WriteByte>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800b674:	bf00      	nop
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b682:	2300      	movs	r3, #0
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	e026      	b.n	800b6d6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	3b50      	subs	r3, #80	; 0x50
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f82b 	bl	800b6ec <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b696:	2100      	movs	r1, #0
 800b698:	2000      	movs	r0, #0
 800b69a:	f000 f827 	bl	800b6ec <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b69e:	2100      	movs	r1, #0
 800b6a0:	2010      	movs	r0, #16
 800b6a2:	f000 f823 	bl	800b6ec <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	71bb      	strb	r3, [r7, #6]
 800b6aa:	e00d      	b.n	800b6c8 <OLED_Refresh_Gram+0x4c>
 800b6ac:	79ba      	ldrb	r2, [r7, #6]
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	490d      	ldr	r1, [pc, #52]	; (800b6e8 <OLED_Refresh_Gram+0x6c>)
 800b6b2:	00d2      	lsls	r2, r2, #3
 800b6b4:	440a      	add	r2, r1
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f815 	bl	800b6ec <OLED_WR_Byte>
 800b6c2:	79bb      	ldrb	r3, [r7, #6]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	71bb      	strb	r3, [r7, #6]
 800b6c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	daed      	bge.n	800b6ac <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	71fb      	strb	r3, [r7, #7]
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	d9d5      	bls.n	800b688 <OLED_Refresh_Gram+0xc>
	}   
}
 800b6dc:	bf00      	nop
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20004ec0 	.word	0x20004ec0

0800b6ec <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	460a      	mov	r2, r1
 800b6f6:	71fb      	strb	r3, [r7, #7]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b6fc:	79bb      	ldrb	r3, [r7, #6]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d006      	beq.n	800b710 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b702:	2201      	movs	r2, #1
 800b704:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b708:	481c      	ldr	r0, [pc, #112]	; (800b77c <OLED_WR_Byte+0x90>)
 800b70a:	f7f8 fc63 	bl	8003fd4 <HAL_GPIO_WritePin>
 800b70e:	e005      	b.n	800b71c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b710:	2200      	movs	r2, #0
 800b712:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b716:	4819      	ldr	r0, [pc, #100]	; (800b77c <OLED_WR_Byte+0x90>)
 800b718:	f7f8 fc5c 	bl	8003fd4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
 800b720:	e01e      	b.n	800b760 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b722:	2200      	movs	r2, #0
 800b724:	2120      	movs	r1, #32
 800b726:	4815      	ldr	r0, [pc, #84]	; (800b77c <OLED_WR_Byte+0x90>)
 800b728:	f7f8 fc54 	bl	8003fd4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b72c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b730:	2b00      	cmp	r3, #0
 800b732:	da05      	bge.n	800b740 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b734:	2201      	movs	r2, #1
 800b736:	2140      	movs	r1, #64	; 0x40
 800b738:	4810      	ldr	r0, [pc, #64]	; (800b77c <OLED_WR_Byte+0x90>)
 800b73a:	f7f8 fc4b 	bl	8003fd4 <HAL_GPIO_WritePin>
 800b73e:	e004      	b.n	800b74a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b740:	2200      	movs	r2, #0
 800b742:	2140      	movs	r1, #64	; 0x40
 800b744:	480d      	ldr	r0, [pc, #52]	; (800b77c <OLED_WR_Byte+0x90>)
 800b746:	f7f8 fc45 	bl	8003fd4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b74a:	2201      	movs	r2, #1
 800b74c:	2120      	movs	r1, #32
 800b74e:	480b      	ldr	r0, [pc, #44]	; (800b77c <OLED_WR_Byte+0x90>)
 800b750:	f7f8 fc40 	bl	8003fd4 <HAL_GPIO_WritePin>
		dat<<=1;   
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	3301      	adds	r3, #1
 800b75e:	73fb      	strb	r3, [r7, #15]
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	2b07      	cmp	r3, #7
 800b764:	d9dd      	bls.n	800b722 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b766:	2201      	movs	r2, #1
 800b768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b76c:	4803      	ldr	r0, [pc, #12]	; (800b77c <OLED_WR_Byte+0x90>)
 800b76e:	f7f8 fc31 	bl	8003fd4 <HAL_GPIO_WritePin>
} 
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	40021000 	.word	0x40021000

0800b780 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b786:	2300      	movs	r3, #0
 800b788:	71fb      	strb	r3, [r7, #7]
 800b78a:	e014      	b.n	800b7b6 <OLED_Clear+0x36>
 800b78c:	2300      	movs	r3, #0
 800b78e:	71bb      	strb	r3, [r7, #6]
 800b790:	e00a      	b.n	800b7a8 <OLED_Clear+0x28>
 800b792:	79ba      	ldrb	r2, [r7, #6]
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	490c      	ldr	r1, [pc, #48]	; (800b7c8 <OLED_Clear+0x48>)
 800b798:	00d2      	lsls	r2, r2, #3
 800b79a:	440a      	add	r2, r1
 800b79c:	4413      	add	r3, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	79bb      	ldrb	r3, [r7, #6]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	71bb      	strb	r3, [r7, #6]
 800b7a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	daf0      	bge.n	800b792 <OLED_Clear+0x12>
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	71fb      	strb	r3, [r7, #7]
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	2b07      	cmp	r3, #7
 800b7ba:	d9e7      	bls.n	800b78c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b7bc:	f7ff ff5e 	bl	800b67c <OLED_Refresh_Gram>
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20004ec0 	.word	0x20004ec0

0800b7cc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	71fb      	strb	r3, [r7, #7]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	71bb      	strb	r3, [r7, #6]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	db41      	blt.n	800b86e <OLED_DrawPoint+0xa2>
 800b7ea:	79bb      	ldrb	r3, [r7, #6]
 800b7ec:	2b3f      	cmp	r3, #63	; 0x3f
 800b7ee:	d83e      	bhi.n	800b86e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b7f0:	79bb      	ldrb	r3, [r7, #6]
 800b7f2:	08db      	lsrs	r3, r3, #3
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f1c3 0307 	rsb	r3, r3, #7
 800b7fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b7fc:	79bb      	ldrb	r3, [r7, #6]
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b804:	7b7b      	ldrb	r3, [r7, #13]
 800b806:	f1c3 0307 	rsb	r3, r3, #7
 800b80a:	2201      	movs	r2, #1
 800b80c:	fa02 f303 	lsl.w	r3, r2, r3
 800b810:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b812:	797b      	ldrb	r3, [r7, #5]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d012      	beq.n	800b83e <OLED_DrawPoint+0x72>
 800b818:	79fa      	ldrb	r2, [r7, #7]
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	4917      	ldr	r1, [pc, #92]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b81e:	00d2      	lsls	r2, r2, #3
 800b820:	440a      	add	r2, r1
 800b822:	4413      	add	r3, r2
 800b824:	7818      	ldrb	r0, [r3, #0]
 800b826:	79fa      	ldrb	r2, [r7, #7]
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	7bf9      	ldrb	r1, [r7, #15]
 800b82c:	4301      	orrs	r1, r0
 800b82e:	b2c8      	uxtb	r0, r1
 800b830:	4912      	ldr	r1, [pc, #72]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b832:	00d2      	lsls	r2, r2, #3
 800b834:	440a      	add	r2, r1
 800b836:	4413      	add	r3, r2
 800b838:	4602      	mov	r2, r0
 800b83a:	701a      	strb	r2, [r3, #0]
 800b83c:	e018      	b.n	800b870 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b83e:	79fa      	ldrb	r2, [r7, #7]
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	490e      	ldr	r1, [pc, #56]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b844:	00d2      	lsls	r2, r2, #3
 800b846:	440a      	add	r2, r1
 800b848:	4413      	add	r3, r2
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b25a      	sxtb	r2, r3
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	43db      	mvns	r3, r3
 800b854:	b25b      	sxtb	r3, r3
 800b856:	4013      	ands	r3, r2
 800b858:	b259      	sxtb	r1, r3
 800b85a:	79fa      	ldrb	r2, [r7, #7]
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	b2c8      	uxtb	r0, r1
 800b860:	4906      	ldr	r1, [pc, #24]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b862:	00d2      	lsls	r2, r2, #3
 800b864:	440a      	add	r2, r1
 800b866:	4413      	add	r3, r2
 800b868:	4602      	mov	r2, r0
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e000      	b.n	800b870 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b86e:	bf00      	nop
}
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20004ec0 	.word	0x20004ec0

0800b880 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	4623      	mov	r3, r4
 800b890:	71fb      	strb	r3, [r7, #7]
 800b892:	4603      	mov	r3, r0
 800b894:	71bb      	strb	r3, [r7, #6]
 800b896:	460b      	mov	r3, r1
 800b898:	717b      	strb	r3, [r7, #5]
 800b89a:	4613      	mov	r3, r2
 800b89c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b89e:	79bb      	ldrb	r3, [r7, #6]
 800b8a0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b8a2:	797b      	ldrb	r3, [r7, #5]
 800b8a4:	3b20      	subs	r3, #32
 800b8a6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73bb      	strb	r3, [r7, #14]
 800b8ac:	e04d      	b.n	800b94a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b8ae:	793b      	ldrb	r3, [r7, #4]
 800b8b0:	2b0c      	cmp	r3, #12
 800b8b2:	d10b      	bne.n	800b8cc <OLED_ShowChar+0x4c>
 800b8b4:	797a      	ldrb	r2, [r7, #5]
 800b8b6:	7bb9      	ldrb	r1, [r7, #14]
 800b8b8:	4828      	ldr	r0, [pc, #160]	; (800b95c <OLED_ShowChar+0xdc>)
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4403      	add	r3, r0
 800b8c4:	440b      	add	r3, r1
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	73fb      	strb	r3, [r7, #15]
 800b8ca:	e007      	b.n	800b8dc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b8cc:	797a      	ldrb	r2, [r7, #5]
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	4923      	ldr	r1, [pc, #140]	; (800b960 <OLED_ShowChar+0xe0>)
 800b8d2:	0112      	lsls	r2, r2, #4
 800b8d4:	440a      	add	r2, r1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	737b      	strb	r3, [r7, #13]
 800b8e0:	e02d      	b.n	800b93e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	da07      	bge.n	800b8fa <OLED_ShowChar+0x7a>
 800b8ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b8ee:	79b9      	ldrb	r1, [r7, #6]
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ff6a 	bl	800b7cc <OLED_DrawPoint>
 800b8f8:	e00c      	b.n	800b914 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b8fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf0c      	ite	eq
 800b902:	2301      	moveq	r3, #1
 800b904:	2300      	movne	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	79b9      	ldrb	r1, [r7, #6]
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff5c 	bl	800b7cc <OLED_DrawPoint>
			temp<<=1;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	73fb      	strb	r3, [r7, #15]
			y++;
 800b91a:	79bb      	ldrb	r3, [r7, #6]
 800b91c:	3301      	adds	r3, #1
 800b91e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b920:	79ba      	ldrb	r2, [r7, #6]
 800b922:	7b3b      	ldrb	r3, [r7, #12]
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	793b      	ldrb	r3, [r7, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d105      	bne.n	800b938 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b92c:	7b3b      	ldrb	r3, [r7, #12]
 800b92e:	71bb      	strb	r3, [r7, #6]
				x++;
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	3301      	adds	r3, #1
 800b934:	71fb      	strb	r3, [r7, #7]
				break;
 800b936:	e005      	b.n	800b944 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b938:	7b7b      	ldrb	r3, [r7, #13]
 800b93a:	3301      	adds	r3, #1
 800b93c:	737b      	strb	r3, [r7, #13]
 800b93e:	7b7b      	ldrb	r3, [r7, #13]
 800b940:	2b07      	cmp	r3, #7
 800b942:	d9ce      	bls.n	800b8e2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	3301      	adds	r3, #1
 800b948:	73bb      	strb	r3, [r7, #14]
 800b94a:	7bba      	ldrb	r2, [r7, #14]
 800b94c:	793b      	ldrb	r3, [r7, #4]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d3ad      	bcc.n	800b8ae <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd90      	pop	{r4, r7, pc}
 800b95c:	0800eac8 	.word	0x0800eac8
 800b960:	0800ef3c 	.word	0x0800ef3c

0800b964 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af02      	add	r7, sp, #8
 800b96a:	4603      	mov	r3, r0
 800b96c:	603a      	str	r2, [r7, #0]
 800b96e:	71fb      	strb	r3, [r7, #7]
 800b970:	460b      	mov	r3, r1
 800b972:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b974:	e01f      	b.n	800b9b6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	2b7a      	cmp	r3, #122	; 0x7a
 800b97a:	d904      	bls.n	800b986 <OLED_ShowString+0x22>
 800b97c:	2300      	movs	r3, #0
 800b97e:	71fb      	strb	r3, [r7, #7]
 800b980:	79bb      	ldrb	r3, [r7, #6]
 800b982:	3310      	adds	r3, #16
 800b984:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b986:	79bb      	ldrb	r3, [r7, #6]
 800b988:	2b3a      	cmp	r3, #58	; 0x3a
 800b98a:	d905      	bls.n	800b998 <OLED_ShowString+0x34>
 800b98c:	2300      	movs	r3, #0
 800b98e:	71fb      	strb	r3, [r7, #7]
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	71bb      	strb	r3, [r7, #6]
 800b994:	f7ff fef4 	bl	800b780 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781a      	ldrb	r2, [r3, #0]
 800b99c:	79b9      	ldrb	r1, [r7, #6]
 800b99e:	79f8      	ldrb	r0, [r7, #7]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	f7ff ff6b 	bl	800b880 <OLED_ShowChar>
        x+=8;
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	71fb      	strb	r3, [r7, #7]
        p++;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1db      	bne.n	800b976 <OLED_ShowString+0x12>
    }  
}	 
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <OLED_Init>:

void OLED_Init(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b9cc:	f7f9 ff50 	bl	8005870 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b9d0:	4b41      	ldr	r3, [pc, #260]	; (800bad8 <OLED_Init+0x110>)
 800b9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d4:	4a40      	ldr	r2, [pc, #256]	; (800bad8 <OLED_Init+0x110>)
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	6713      	str	r3, [r2, #112]	; 0x70
 800b9dc:	4b3e      	ldr	r3, [pc, #248]	; (800bad8 <OLED_Init+0x110>)
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	4a3d      	ldr	r2, [pc, #244]	; (800bad8 <OLED_Init+0x110>)
 800b9e2:	f023 0304 	bic.w	r3, r3, #4
 800b9e6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b9e8:	f7f9 ff56 	bl	8005898 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2180      	movs	r1, #128	; 0x80
 800b9f0:	483a      	ldr	r0, [pc, #232]	; (800badc <OLED_Init+0x114>)
 800b9f2:	f7f8 faef 	bl	8003fd4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b9f6:	2064      	movs	r0, #100	; 0x64
 800b9f8:	f7f7 ff88 	bl	800390c <HAL_Delay>
	OLED_RST_Set();
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	2180      	movs	r1, #128	; 0x80
 800ba00:	4836      	ldr	r0, [pc, #216]	; (800badc <OLED_Init+0x114>)
 800ba02:	f7f8 fae7 	bl	8003fd4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800ba06:	2100      	movs	r1, #0
 800ba08:	20ae      	movs	r0, #174	; 0xae
 800ba0a:	f7ff fe6f 	bl	800b6ec <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800ba0e:	2100      	movs	r1, #0
 800ba10:	20d5      	movs	r0, #213	; 0xd5
 800ba12:	f7ff fe6b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ba16:	2100      	movs	r1, #0
 800ba18:	2050      	movs	r0, #80	; 0x50
 800ba1a:	f7ff fe67 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800ba1e:	2100      	movs	r1, #0
 800ba20:	20a8      	movs	r0, #168	; 0xa8
 800ba22:	f7ff fe63 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800ba26:	2100      	movs	r1, #0
 800ba28:	203f      	movs	r0, #63	; 0x3f
 800ba2a:	f7ff fe5f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ba2e:	2100      	movs	r1, #0
 800ba30:	20d3      	movs	r0, #211	; 0xd3
 800ba32:	f7ff fe5b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ba36:	2100      	movs	r1, #0
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f7ff fe57 	bl	800b6ec <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ba3e:	2100      	movs	r1, #0
 800ba40:	2040      	movs	r0, #64	; 0x40
 800ba42:	f7ff fe53 	bl	800b6ec <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ba46:	2100      	movs	r1, #0
 800ba48:	208d      	movs	r0, #141	; 0x8d
 800ba4a:	f7ff fe4f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ba4e:	2100      	movs	r1, #0
 800ba50:	2014      	movs	r0, #20
 800ba52:	f7ff fe4b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ba56:	2100      	movs	r1, #0
 800ba58:	2020      	movs	r0, #32
 800ba5a:	f7ff fe47 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ba5e:	2100      	movs	r1, #0
 800ba60:	2002      	movs	r0, #2
 800ba62:	f7ff fe43 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ba66:	2100      	movs	r1, #0
 800ba68:	20a1      	movs	r0, #161	; 0xa1
 800ba6a:	f7ff fe3f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ba6e:	2100      	movs	r1, #0
 800ba70:	20c0      	movs	r0, #192	; 0xc0
 800ba72:	f7ff fe3b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ba76:	2100      	movs	r1, #0
 800ba78:	20da      	movs	r0, #218	; 0xda
 800ba7a:	f7ff fe37 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ba7e:	2100      	movs	r1, #0
 800ba80:	2012      	movs	r0, #18
 800ba82:	f7ff fe33 	bl	800b6ec <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ba86:	2100      	movs	r1, #0
 800ba88:	2081      	movs	r0, #129	; 0x81
 800ba8a:	f7ff fe2f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ba8e:	2100      	movs	r1, #0
 800ba90:	20ef      	movs	r0, #239	; 0xef
 800ba92:	f7ff fe2b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ba96:	2100      	movs	r1, #0
 800ba98:	20d9      	movs	r0, #217	; 0xd9
 800ba9a:	f7ff fe27 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ba9e:	2100      	movs	r1, #0
 800baa0:	20f1      	movs	r0, #241	; 0xf1
 800baa2:	f7ff fe23 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800baa6:	2100      	movs	r1, #0
 800baa8:	20db      	movs	r0, #219	; 0xdb
 800baaa:	f7ff fe1f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800baae:	2100      	movs	r1, #0
 800bab0:	2030      	movs	r0, #48	; 0x30
 800bab2:	f7ff fe1b 	bl	800b6ec <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800bab6:	2100      	movs	r1, #0
 800bab8:	20a4      	movs	r0, #164	; 0xa4
 800baba:	f7ff fe17 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800babe:	2100      	movs	r1, #0
 800bac0:	20a6      	movs	r0, #166	; 0xa6
 800bac2:	f7ff fe13 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800bac6:	2100      	movs	r1, #0
 800bac8:	20af      	movs	r0, #175	; 0xaf
 800baca:	f7ff fe0f 	bl	800b6ec <OLED_WR_Byte>
	OLED_Clear(); 
 800bace:	f7ff fe57 	bl	800b780 <OLED_Clear>
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	40023800 	.word	0x40023800
 800badc:	40021000 	.word	0x40021000

0800bae0 <__cvt>:
 800bae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	ec55 4b10 	vmov	r4, r5, d0
 800bae8:	2d00      	cmp	r5, #0
 800baea:	460e      	mov	r6, r1
 800baec:	4619      	mov	r1, r3
 800baee:	462b      	mov	r3, r5
 800baf0:	bfbb      	ittet	lt
 800baf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800baf6:	461d      	movlt	r5, r3
 800baf8:	2300      	movge	r3, #0
 800bafa:	232d      	movlt	r3, #45	; 0x2d
 800bafc:	700b      	strb	r3, [r1, #0]
 800bafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb04:	4691      	mov	r9, r2
 800bb06:	f023 0820 	bic.w	r8, r3, #32
 800bb0a:	bfbc      	itt	lt
 800bb0c:	4622      	movlt	r2, r4
 800bb0e:	4614      	movlt	r4, r2
 800bb10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb14:	d005      	beq.n	800bb22 <__cvt+0x42>
 800bb16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb1a:	d100      	bne.n	800bb1e <__cvt+0x3e>
 800bb1c:	3601      	adds	r6, #1
 800bb1e:	2102      	movs	r1, #2
 800bb20:	e000      	b.n	800bb24 <__cvt+0x44>
 800bb22:	2103      	movs	r1, #3
 800bb24:	ab03      	add	r3, sp, #12
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	ab02      	add	r3, sp, #8
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	ec45 4b10 	vmov	d0, r4, r5
 800bb30:	4653      	mov	r3, sl
 800bb32:	4632      	mov	r2, r6
 800bb34:	f000 feb8 	bl	800c8a8 <_dtoa_r>
 800bb38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb3c:	4607      	mov	r7, r0
 800bb3e:	d102      	bne.n	800bb46 <__cvt+0x66>
 800bb40:	f019 0f01 	tst.w	r9, #1
 800bb44:	d022      	beq.n	800bb8c <__cvt+0xac>
 800bb46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb4a:	eb07 0906 	add.w	r9, r7, r6
 800bb4e:	d110      	bne.n	800bb72 <__cvt+0x92>
 800bb50:	783b      	ldrb	r3, [r7, #0]
 800bb52:	2b30      	cmp	r3, #48	; 0x30
 800bb54:	d10a      	bne.n	800bb6c <__cvt+0x8c>
 800bb56:	2200      	movs	r2, #0
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f4 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb62:	b918      	cbnz	r0, 800bb6c <__cvt+0x8c>
 800bb64:	f1c6 0601 	rsb	r6, r6, #1
 800bb68:	f8ca 6000 	str.w	r6, [sl]
 800bb6c:	f8da 3000 	ldr.w	r3, [sl]
 800bb70:	4499      	add	r9, r3
 800bb72:	2200      	movs	r2, #0
 800bb74:	2300      	movs	r3, #0
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb7e:	b108      	cbz	r0, 800bb84 <__cvt+0xa4>
 800bb80:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb84:	2230      	movs	r2, #48	; 0x30
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	454b      	cmp	r3, r9
 800bb8a:	d307      	bcc.n	800bb9c <__cvt+0xbc>
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb90:	1bdb      	subs	r3, r3, r7
 800bb92:	4638      	mov	r0, r7
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	b004      	add	sp, #16
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9c:	1c59      	adds	r1, r3, #1
 800bb9e:	9103      	str	r1, [sp, #12]
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	e7f0      	b.n	800bb86 <__cvt+0xa6>

0800bba4 <__exponent>:
 800bba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bba6:	4603      	mov	r3, r0
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	bfb8      	it	lt
 800bbac:	4249      	neglt	r1, r1
 800bbae:	f803 2b02 	strb.w	r2, [r3], #2
 800bbb2:	bfb4      	ite	lt
 800bbb4:	222d      	movlt	r2, #45	; 0x2d
 800bbb6:	222b      	movge	r2, #43	; 0x2b
 800bbb8:	2909      	cmp	r1, #9
 800bbba:	7042      	strb	r2, [r0, #1]
 800bbbc:	dd2a      	ble.n	800bc14 <__exponent+0x70>
 800bbbe:	f10d 0207 	add.w	r2, sp, #7
 800bbc2:	4617      	mov	r7, r2
 800bbc4:	260a      	movs	r6, #10
 800bbc6:	4694      	mov	ip, r2
 800bbc8:	fb91 f5f6 	sdiv	r5, r1, r6
 800bbcc:	fb06 1415 	mls	r4, r6, r5, r1
 800bbd0:	3430      	adds	r4, #48	; 0x30
 800bbd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	2c63      	cmp	r4, #99	; 0x63
 800bbda:	f102 32ff 	add.w	r2, r2, #4294967295
 800bbde:	4629      	mov	r1, r5
 800bbe0:	dcf1      	bgt.n	800bbc6 <__exponent+0x22>
 800bbe2:	3130      	adds	r1, #48	; 0x30
 800bbe4:	f1ac 0402 	sub.w	r4, ip, #2
 800bbe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bbec:	1c41      	adds	r1, r0, #1
 800bbee:	4622      	mov	r2, r4
 800bbf0:	42ba      	cmp	r2, r7
 800bbf2:	d30a      	bcc.n	800bc0a <__exponent+0x66>
 800bbf4:	f10d 0209 	add.w	r2, sp, #9
 800bbf8:	eba2 020c 	sub.w	r2, r2, ip
 800bbfc:	42bc      	cmp	r4, r7
 800bbfe:	bf88      	it	hi
 800bc00:	2200      	movhi	r2, #0
 800bc02:	4413      	add	r3, r2
 800bc04:	1a18      	subs	r0, r3, r0
 800bc06:	b003      	add	sp, #12
 800bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc12:	e7ed      	b.n	800bbf0 <__exponent+0x4c>
 800bc14:	2330      	movs	r3, #48	; 0x30
 800bc16:	3130      	adds	r1, #48	; 0x30
 800bc18:	7083      	strb	r3, [r0, #2]
 800bc1a:	70c1      	strb	r1, [r0, #3]
 800bc1c:	1d03      	adds	r3, r0, #4
 800bc1e:	e7f1      	b.n	800bc04 <__exponent+0x60>

0800bc20 <_printf_float>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	ed2d 8b02 	vpush	{d8}
 800bc28:	b08d      	sub	sp, #52	; 0x34
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc30:	4616      	mov	r6, r2
 800bc32:	461f      	mov	r7, r3
 800bc34:	4605      	mov	r5, r0
 800bc36:	f000 fcd5 	bl	800c5e4 <_localeconv_r>
 800bc3a:	f8d0 a000 	ldr.w	sl, [r0]
 800bc3e:	4650      	mov	r0, sl
 800bc40:	f7f4 fb16 	bl	8000270 <strlen>
 800bc44:	2300      	movs	r3, #0
 800bc46:	930a      	str	r3, [sp, #40]	; 0x28
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc54:	3307      	adds	r3, #7
 800bc56:	f023 0307 	bic.w	r3, r3, #7
 800bc5a:	f103 0208 	add.w	r2, r3, #8
 800bc5e:	f8c8 2000 	str.w	r2, [r8]
 800bc62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc6a:	9307      	str	r3, [sp, #28]
 800bc6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc70:	ee08 0a10 	vmov	s16, r0
 800bc74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bc78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc7c:	4b9e      	ldr	r3, [pc, #632]	; (800bef8 <_printf_float+0x2d8>)
 800bc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc82:	f7f4 ff53 	bl	8000b2c <__aeabi_dcmpun>
 800bc86:	bb88      	cbnz	r0, 800bcec <_printf_float+0xcc>
 800bc88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc8c:	4b9a      	ldr	r3, [pc, #616]	; (800bef8 <_printf_float+0x2d8>)
 800bc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc92:	f7f4 ff2d 	bl	8000af0 <__aeabi_dcmple>
 800bc96:	bb48      	cbnz	r0, 800bcec <_printf_float+0xcc>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800bca4:	b110      	cbz	r0, 800bcac <_printf_float+0x8c>
 800bca6:	232d      	movs	r3, #45	; 0x2d
 800bca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcac:	4a93      	ldr	r2, [pc, #588]	; (800befc <_printf_float+0x2dc>)
 800bcae:	4b94      	ldr	r3, [pc, #592]	; (800bf00 <_printf_float+0x2e0>)
 800bcb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bcb4:	bf94      	ite	ls
 800bcb6:	4690      	movls	r8, r2
 800bcb8:	4698      	movhi	r8, r3
 800bcba:	2303      	movs	r3, #3
 800bcbc:	6123      	str	r3, [r4, #16]
 800bcbe:	9b05      	ldr	r3, [sp, #20]
 800bcc0:	f023 0304 	bic.w	r3, r3, #4
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	f04f 0900 	mov.w	r9, #0
 800bcca:	9700      	str	r7, [sp, #0]
 800bccc:	4633      	mov	r3, r6
 800bcce:	aa0b      	add	r2, sp, #44	; 0x2c
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f000 f9da 	bl	800c08c <_printf_common>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	f040 8090 	bne.w	800bdfe <_printf_float+0x1de>
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	b00d      	add	sp, #52	; 0x34
 800bce4:	ecbd 8b02 	vpop	{d8}
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcec:	4642      	mov	r2, r8
 800bcee:	464b      	mov	r3, r9
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	f7f4 ff1a 	bl	8000b2c <__aeabi_dcmpun>
 800bcf8:	b140      	cbz	r0, 800bd0c <_printf_float+0xec>
 800bcfa:	464b      	mov	r3, r9
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	bfbc      	itt	lt
 800bd00:	232d      	movlt	r3, #45	; 0x2d
 800bd02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd06:	4a7f      	ldr	r2, [pc, #508]	; (800bf04 <_printf_float+0x2e4>)
 800bd08:	4b7f      	ldr	r3, [pc, #508]	; (800bf08 <_printf_float+0x2e8>)
 800bd0a:	e7d1      	b.n	800bcb0 <_printf_float+0x90>
 800bd0c:	6863      	ldr	r3, [r4, #4]
 800bd0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd12:	9206      	str	r2, [sp, #24]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	d13f      	bne.n	800bd98 <_printf_float+0x178>
 800bd18:	2306      	movs	r3, #6
 800bd1a:	6063      	str	r3, [r4, #4]
 800bd1c:	9b05      	ldr	r3, [sp, #20]
 800bd1e:	6861      	ldr	r1, [r4, #4]
 800bd20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd24:	2300      	movs	r3, #0
 800bd26:	9303      	str	r3, [sp, #12]
 800bd28:	ab0a      	add	r3, sp, #40	; 0x28
 800bd2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd2e:	ab09      	add	r3, sp, #36	; 0x24
 800bd30:	ec49 8b10 	vmov	d0, r8, r9
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	6022      	str	r2, [r4, #0]
 800bd38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f7ff fecf 	bl	800bae0 <__cvt>
 800bd42:	9b06      	ldr	r3, [sp, #24]
 800bd44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd46:	2b47      	cmp	r3, #71	; 0x47
 800bd48:	4680      	mov	r8, r0
 800bd4a:	d108      	bne.n	800bd5e <_printf_float+0x13e>
 800bd4c:	1cc8      	adds	r0, r1, #3
 800bd4e:	db02      	blt.n	800bd56 <_printf_float+0x136>
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	4299      	cmp	r1, r3
 800bd54:	dd41      	ble.n	800bdda <_printf_float+0x1ba>
 800bd56:	f1ab 0302 	sub.w	r3, fp, #2
 800bd5a:	fa5f fb83 	uxtb.w	fp, r3
 800bd5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd62:	d820      	bhi.n	800bda6 <_printf_float+0x186>
 800bd64:	3901      	subs	r1, #1
 800bd66:	465a      	mov	r2, fp
 800bd68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd6c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd6e:	f7ff ff19 	bl	800bba4 <__exponent>
 800bd72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd74:	1813      	adds	r3, r2, r0
 800bd76:	2a01      	cmp	r2, #1
 800bd78:	4681      	mov	r9, r0
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	dc02      	bgt.n	800bd84 <_printf_float+0x164>
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	07d2      	lsls	r2, r2, #31
 800bd82:	d501      	bpl.n	800bd88 <_printf_float+0x168>
 800bd84:	3301      	adds	r3, #1
 800bd86:	6123      	str	r3, [r4, #16]
 800bd88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d09c      	beq.n	800bcca <_printf_float+0xaa>
 800bd90:	232d      	movs	r3, #45	; 0x2d
 800bd92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd96:	e798      	b.n	800bcca <_printf_float+0xaa>
 800bd98:	9a06      	ldr	r2, [sp, #24]
 800bd9a:	2a47      	cmp	r2, #71	; 0x47
 800bd9c:	d1be      	bne.n	800bd1c <_printf_float+0xfc>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1bc      	bne.n	800bd1c <_printf_float+0xfc>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e7b9      	b.n	800bd1a <_printf_float+0xfa>
 800bda6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdaa:	d118      	bne.n	800bdde <_printf_float+0x1be>
 800bdac:	2900      	cmp	r1, #0
 800bdae:	6863      	ldr	r3, [r4, #4]
 800bdb0:	dd0b      	ble.n	800bdca <_printf_float+0x1aa>
 800bdb2:	6121      	str	r1, [r4, #16]
 800bdb4:	b913      	cbnz	r3, 800bdbc <_printf_float+0x19c>
 800bdb6:	6822      	ldr	r2, [r4, #0]
 800bdb8:	07d0      	lsls	r0, r2, #31
 800bdba:	d502      	bpl.n	800bdc2 <_printf_float+0x1a2>
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	440b      	add	r3, r1
 800bdc0:	6123      	str	r3, [r4, #16]
 800bdc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bdc4:	f04f 0900 	mov.w	r9, #0
 800bdc8:	e7de      	b.n	800bd88 <_printf_float+0x168>
 800bdca:	b913      	cbnz	r3, 800bdd2 <_printf_float+0x1b2>
 800bdcc:	6822      	ldr	r2, [r4, #0]
 800bdce:	07d2      	lsls	r2, r2, #31
 800bdd0:	d501      	bpl.n	800bdd6 <_printf_float+0x1b6>
 800bdd2:	3302      	adds	r3, #2
 800bdd4:	e7f4      	b.n	800bdc0 <_printf_float+0x1a0>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e7f2      	b.n	800bdc0 <_printf_float+0x1a0>
 800bdda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde0:	4299      	cmp	r1, r3
 800bde2:	db05      	blt.n	800bdf0 <_printf_float+0x1d0>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	6121      	str	r1, [r4, #16]
 800bde8:	07d8      	lsls	r0, r3, #31
 800bdea:	d5ea      	bpl.n	800bdc2 <_printf_float+0x1a2>
 800bdec:	1c4b      	adds	r3, r1, #1
 800bdee:	e7e7      	b.n	800bdc0 <_printf_float+0x1a0>
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	bfd4      	ite	le
 800bdf4:	f1c1 0202 	rsble	r2, r1, #2
 800bdf8:	2201      	movgt	r2, #1
 800bdfa:	4413      	add	r3, r2
 800bdfc:	e7e0      	b.n	800bdc0 <_printf_float+0x1a0>
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	055a      	lsls	r2, r3, #21
 800be02:	d407      	bmi.n	800be14 <_printf_float+0x1f4>
 800be04:	6923      	ldr	r3, [r4, #16]
 800be06:	4642      	mov	r2, r8
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b8      	blx	r7
 800be0e:	3001      	adds	r0, #1
 800be10:	d12c      	bne.n	800be6c <_printf_float+0x24c>
 800be12:	e764      	b.n	800bcde <_printf_float+0xbe>
 800be14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be18:	f240 80e0 	bls.w	800bfdc <_printf_float+0x3bc>
 800be1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	f7f4 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d034      	beq.n	800be96 <_printf_float+0x276>
 800be2c:	4a37      	ldr	r2, [pc, #220]	; (800bf0c <_printf_float+0x2ec>)
 800be2e:	2301      	movs	r3, #1
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	f43f af51 	beq.w	800bcde <_printf_float+0xbe>
 800be3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be40:	429a      	cmp	r2, r3
 800be42:	db02      	blt.n	800be4a <_printf_float+0x22a>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	07d8      	lsls	r0, r3, #31
 800be48:	d510      	bpl.n	800be6c <_printf_float+0x24c>
 800be4a:	ee18 3a10 	vmov	r3, s16
 800be4e:	4652      	mov	r2, sl
 800be50:	4631      	mov	r1, r6
 800be52:	4628      	mov	r0, r5
 800be54:	47b8      	blx	r7
 800be56:	3001      	adds	r0, #1
 800be58:	f43f af41 	beq.w	800bcde <_printf_float+0xbe>
 800be5c:	f04f 0800 	mov.w	r8, #0
 800be60:	f104 091a 	add.w	r9, r4, #26
 800be64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be66:	3b01      	subs	r3, #1
 800be68:	4543      	cmp	r3, r8
 800be6a:	dc09      	bgt.n	800be80 <_printf_float+0x260>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	079b      	lsls	r3, r3, #30
 800be70:	f100 8107 	bmi.w	800c082 <_printf_float+0x462>
 800be74:	68e0      	ldr	r0, [r4, #12]
 800be76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be78:	4298      	cmp	r0, r3
 800be7a:	bfb8      	it	lt
 800be7c:	4618      	movlt	r0, r3
 800be7e:	e730      	b.n	800bce2 <_printf_float+0xc2>
 800be80:	2301      	movs	r3, #1
 800be82:	464a      	mov	r2, r9
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f af27 	beq.w	800bcde <_printf_float+0xbe>
 800be90:	f108 0801 	add.w	r8, r8, #1
 800be94:	e7e6      	b.n	800be64 <_printf_float+0x244>
 800be96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dc39      	bgt.n	800bf10 <_printf_float+0x2f0>
 800be9c:	4a1b      	ldr	r2, [pc, #108]	; (800bf0c <_printf_float+0x2ec>)
 800be9e:	2301      	movs	r3, #1
 800bea0:	4631      	mov	r1, r6
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b8      	blx	r7
 800bea6:	3001      	adds	r0, #1
 800bea8:	f43f af19 	beq.w	800bcde <_printf_float+0xbe>
 800beac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800beb0:	4313      	orrs	r3, r2
 800beb2:	d102      	bne.n	800beba <_printf_float+0x29a>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	07d9      	lsls	r1, r3, #31
 800beb8:	d5d8      	bpl.n	800be6c <_printf_float+0x24c>
 800beba:	ee18 3a10 	vmov	r3, s16
 800bebe:	4652      	mov	r2, sl
 800bec0:	4631      	mov	r1, r6
 800bec2:	4628      	mov	r0, r5
 800bec4:	47b8      	blx	r7
 800bec6:	3001      	adds	r0, #1
 800bec8:	f43f af09 	beq.w	800bcde <_printf_float+0xbe>
 800becc:	f04f 0900 	mov.w	r9, #0
 800bed0:	f104 0a1a 	add.w	sl, r4, #26
 800bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed6:	425b      	negs	r3, r3
 800bed8:	454b      	cmp	r3, r9
 800beda:	dc01      	bgt.n	800bee0 <_printf_float+0x2c0>
 800bedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bede:	e792      	b.n	800be06 <_printf_float+0x1e6>
 800bee0:	2301      	movs	r3, #1
 800bee2:	4652      	mov	r2, sl
 800bee4:	4631      	mov	r1, r6
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b8      	blx	r7
 800beea:	3001      	adds	r0, #1
 800beec:	f43f aef7 	beq.w	800bcde <_printf_float+0xbe>
 800bef0:	f109 0901 	add.w	r9, r9, #1
 800bef4:	e7ee      	b.n	800bed4 <_printf_float+0x2b4>
 800bef6:	bf00      	nop
 800bef8:	7fefffff 	.word	0x7fefffff
 800befc:	0800f52c 	.word	0x0800f52c
 800bf00:	0800f530 	.word	0x0800f530
 800bf04:	0800f534 	.word	0x0800f534
 800bf08:	0800f538 	.word	0x0800f538
 800bf0c:	0800f53c 	.word	0x0800f53c
 800bf10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf14:	429a      	cmp	r2, r3
 800bf16:	bfa8      	it	ge
 800bf18:	461a      	movge	r2, r3
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	4691      	mov	r9, r2
 800bf1e:	dc37      	bgt.n	800bf90 <_printf_float+0x370>
 800bf20:	f04f 0b00 	mov.w	fp, #0
 800bf24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf28:	f104 021a 	add.w	r2, r4, #26
 800bf2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf2e:	9305      	str	r3, [sp, #20]
 800bf30:	eba3 0309 	sub.w	r3, r3, r9
 800bf34:	455b      	cmp	r3, fp
 800bf36:	dc33      	bgt.n	800bfa0 <_printf_float+0x380>
 800bf38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	db3b      	blt.n	800bfb8 <_printf_float+0x398>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	07da      	lsls	r2, r3, #31
 800bf44:	d438      	bmi.n	800bfb8 <_printf_float+0x398>
 800bf46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf4a:	eba2 0903 	sub.w	r9, r2, r3
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	1ad2      	subs	r2, r2, r3
 800bf52:	4591      	cmp	r9, r2
 800bf54:	bfa8      	it	ge
 800bf56:	4691      	movge	r9, r2
 800bf58:	f1b9 0f00 	cmp.w	r9, #0
 800bf5c:	dc35      	bgt.n	800bfca <_printf_float+0x3aa>
 800bf5e:	f04f 0800 	mov.w	r8, #0
 800bf62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf66:	f104 0a1a 	add.w	sl, r4, #26
 800bf6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf6e:	1a9b      	subs	r3, r3, r2
 800bf70:	eba3 0309 	sub.w	r3, r3, r9
 800bf74:	4543      	cmp	r3, r8
 800bf76:	f77f af79 	ble.w	800be6c <_printf_float+0x24c>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4652      	mov	r2, sl
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4628      	mov	r0, r5
 800bf82:	47b8      	blx	r7
 800bf84:	3001      	adds	r0, #1
 800bf86:	f43f aeaa 	beq.w	800bcde <_printf_float+0xbe>
 800bf8a:	f108 0801 	add.w	r8, r8, #1
 800bf8e:	e7ec      	b.n	800bf6a <_printf_float+0x34a>
 800bf90:	4613      	mov	r3, r2
 800bf92:	4631      	mov	r1, r6
 800bf94:	4642      	mov	r2, r8
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b8      	blx	r7
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d1c0      	bne.n	800bf20 <_printf_float+0x300>
 800bf9e:	e69e      	b.n	800bcde <_printf_float+0xbe>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	9205      	str	r2, [sp, #20]
 800bfa8:	47b8      	blx	r7
 800bfaa:	3001      	adds	r0, #1
 800bfac:	f43f ae97 	beq.w	800bcde <_printf_float+0xbe>
 800bfb0:	9a05      	ldr	r2, [sp, #20]
 800bfb2:	f10b 0b01 	add.w	fp, fp, #1
 800bfb6:	e7b9      	b.n	800bf2c <_printf_float+0x30c>
 800bfb8:	ee18 3a10 	vmov	r3, s16
 800bfbc:	4652      	mov	r2, sl
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b8      	blx	r7
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d1be      	bne.n	800bf46 <_printf_float+0x326>
 800bfc8:	e689      	b.n	800bcde <_printf_float+0xbe>
 800bfca:	9a05      	ldr	r2, [sp, #20]
 800bfcc:	464b      	mov	r3, r9
 800bfce:	4442      	add	r2, r8
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d1c1      	bne.n	800bf5e <_printf_float+0x33e>
 800bfda:	e680      	b.n	800bcde <_printf_float+0xbe>
 800bfdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfde:	2a01      	cmp	r2, #1
 800bfe0:	dc01      	bgt.n	800bfe6 <_printf_float+0x3c6>
 800bfe2:	07db      	lsls	r3, r3, #31
 800bfe4:	d53a      	bpl.n	800c05c <_printf_float+0x43c>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4642      	mov	r2, r8
 800bfea:	4631      	mov	r1, r6
 800bfec:	4628      	mov	r0, r5
 800bfee:	47b8      	blx	r7
 800bff0:	3001      	adds	r0, #1
 800bff2:	f43f ae74 	beq.w	800bcde <_printf_float+0xbe>
 800bff6:	ee18 3a10 	vmov	r3, s16
 800bffa:	4652      	mov	r2, sl
 800bffc:	4631      	mov	r1, r6
 800bffe:	4628      	mov	r0, r5
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	f43f ae6b 	beq.w	800bcde <_printf_float+0xbe>
 800c008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c00c:	2200      	movs	r2, #0
 800c00e:	2300      	movs	r3, #0
 800c010:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c014:	f7f4 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800c018:	b9d8      	cbnz	r0, 800c052 <_printf_float+0x432>
 800c01a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c01e:	f108 0201 	add.w	r2, r8, #1
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	d10e      	bne.n	800c04a <_printf_float+0x42a>
 800c02c:	e657      	b.n	800bcde <_printf_float+0xbe>
 800c02e:	2301      	movs	r3, #1
 800c030:	4652      	mov	r2, sl
 800c032:	4631      	mov	r1, r6
 800c034:	4628      	mov	r0, r5
 800c036:	47b8      	blx	r7
 800c038:	3001      	adds	r0, #1
 800c03a:	f43f ae50 	beq.w	800bcde <_printf_float+0xbe>
 800c03e:	f108 0801 	add.w	r8, r8, #1
 800c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c044:	3b01      	subs	r3, #1
 800c046:	4543      	cmp	r3, r8
 800c048:	dcf1      	bgt.n	800c02e <_printf_float+0x40e>
 800c04a:	464b      	mov	r3, r9
 800c04c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c050:	e6da      	b.n	800be08 <_printf_float+0x1e8>
 800c052:	f04f 0800 	mov.w	r8, #0
 800c056:	f104 0a1a 	add.w	sl, r4, #26
 800c05a:	e7f2      	b.n	800c042 <_printf_float+0x422>
 800c05c:	2301      	movs	r3, #1
 800c05e:	4642      	mov	r2, r8
 800c060:	e7df      	b.n	800c022 <_printf_float+0x402>
 800c062:	2301      	movs	r3, #1
 800c064:	464a      	mov	r2, r9
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	f43f ae36 	beq.w	800bcde <_printf_float+0xbe>
 800c072:	f108 0801 	add.w	r8, r8, #1
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c07a:	1a5b      	subs	r3, r3, r1
 800c07c:	4543      	cmp	r3, r8
 800c07e:	dcf0      	bgt.n	800c062 <_printf_float+0x442>
 800c080:	e6f8      	b.n	800be74 <_printf_float+0x254>
 800c082:	f04f 0800 	mov.w	r8, #0
 800c086:	f104 0919 	add.w	r9, r4, #25
 800c08a:	e7f4      	b.n	800c076 <_printf_float+0x456>

0800c08c <_printf_common>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	4616      	mov	r6, r2
 800c092:	4699      	mov	r9, r3
 800c094:	688a      	ldr	r2, [r1, #8]
 800c096:	690b      	ldr	r3, [r1, #16]
 800c098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c09c:	4293      	cmp	r3, r2
 800c09e:	bfb8      	it	lt
 800c0a0:	4613      	movlt	r3, r2
 800c0a2:	6033      	str	r3, [r6, #0]
 800c0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	b10a      	cbz	r2, 800c0b2 <_printf_common+0x26>
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	0699      	lsls	r1, r3, #26
 800c0b6:	bf42      	ittt	mi
 800c0b8:	6833      	ldrmi	r3, [r6, #0]
 800c0ba:	3302      	addmi	r3, #2
 800c0bc:	6033      	strmi	r3, [r6, #0]
 800c0be:	6825      	ldr	r5, [r4, #0]
 800c0c0:	f015 0506 	ands.w	r5, r5, #6
 800c0c4:	d106      	bne.n	800c0d4 <_printf_common+0x48>
 800c0c6:	f104 0a19 	add.w	sl, r4, #25
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	6832      	ldr	r2, [r6, #0]
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	42ab      	cmp	r3, r5
 800c0d2:	dc26      	bgt.n	800c122 <_printf_common+0x96>
 800c0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0d8:	1e13      	subs	r3, r2, #0
 800c0da:	6822      	ldr	r2, [r4, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	2301      	movne	r3, #1
 800c0e0:	0692      	lsls	r2, r2, #26
 800c0e2:	d42b      	bmi.n	800c13c <_printf_common+0xb0>
 800c0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	47c0      	blx	r8
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d01e      	beq.n	800c130 <_printf_common+0xa4>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	6922      	ldr	r2, [r4, #16]
 800c0f6:	f003 0306 	and.w	r3, r3, #6
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	bf02      	ittt	eq
 800c0fe:	68e5      	ldreq	r5, [r4, #12]
 800c100:	6833      	ldreq	r3, [r6, #0]
 800c102:	1aed      	subeq	r5, r5, r3
 800c104:	68a3      	ldr	r3, [r4, #8]
 800c106:	bf0c      	ite	eq
 800c108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c10c:	2500      	movne	r5, #0
 800c10e:	4293      	cmp	r3, r2
 800c110:	bfc4      	itt	gt
 800c112:	1a9b      	subgt	r3, r3, r2
 800c114:	18ed      	addgt	r5, r5, r3
 800c116:	2600      	movs	r6, #0
 800c118:	341a      	adds	r4, #26
 800c11a:	42b5      	cmp	r5, r6
 800c11c:	d11a      	bne.n	800c154 <_printf_common+0xc8>
 800c11e:	2000      	movs	r0, #0
 800c120:	e008      	b.n	800c134 <_printf_common+0xa8>
 800c122:	2301      	movs	r3, #1
 800c124:	4652      	mov	r2, sl
 800c126:	4649      	mov	r1, r9
 800c128:	4638      	mov	r0, r7
 800c12a:	47c0      	blx	r8
 800c12c:	3001      	adds	r0, #1
 800c12e:	d103      	bne.n	800c138 <_printf_common+0xac>
 800c130:	f04f 30ff 	mov.w	r0, #4294967295
 800c134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c138:	3501      	adds	r5, #1
 800c13a:	e7c6      	b.n	800c0ca <_printf_common+0x3e>
 800c13c:	18e1      	adds	r1, r4, r3
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	2030      	movs	r0, #48	; 0x30
 800c142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c146:	4422      	add	r2, r4
 800c148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c150:	3302      	adds	r3, #2
 800c152:	e7c7      	b.n	800c0e4 <_printf_common+0x58>
 800c154:	2301      	movs	r3, #1
 800c156:	4622      	mov	r2, r4
 800c158:	4649      	mov	r1, r9
 800c15a:	4638      	mov	r0, r7
 800c15c:	47c0      	blx	r8
 800c15e:	3001      	adds	r0, #1
 800c160:	d0e6      	beq.n	800c130 <_printf_common+0xa4>
 800c162:	3601      	adds	r6, #1
 800c164:	e7d9      	b.n	800c11a <_printf_common+0x8e>
	...

0800c168 <_printf_i>:
 800c168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c16c:	7e0f      	ldrb	r7, [r1, #24]
 800c16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c170:	2f78      	cmp	r7, #120	; 0x78
 800c172:	4691      	mov	r9, r2
 800c174:	4680      	mov	r8, r0
 800c176:	460c      	mov	r4, r1
 800c178:	469a      	mov	sl, r3
 800c17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c17e:	d807      	bhi.n	800c190 <_printf_i+0x28>
 800c180:	2f62      	cmp	r7, #98	; 0x62
 800c182:	d80a      	bhi.n	800c19a <_printf_i+0x32>
 800c184:	2f00      	cmp	r7, #0
 800c186:	f000 80d4 	beq.w	800c332 <_printf_i+0x1ca>
 800c18a:	2f58      	cmp	r7, #88	; 0x58
 800c18c:	f000 80c0 	beq.w	800c310 <_printf_i+0x1a8>
 800c190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c198:	e03a      	b.n	800c210 <_printf_i+0xa8>
 800c19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c19e:	2b15      	cmp	r3, #21
 800c1a0:	d8f6      	bhi.n	800c190 <_printf_i+0x28>
 800c1a2:	a101      	add	r1, pc, #4	; (adr r1, 800c1a8 <_printf_i+0x40>)
 800c1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1a8:	0800c201 	.word	0x0800c201
 800c1ac:	0800c215 	.word	0x0800c215
 800c1b0:	0800c191 	.word	0x0800c191
 800c1b4:	0800c191 	.word	0x0800c191
 800c1b8:	0800c191 	.word	0x0800c191
 800c1bc:	0800c191 	.word	0x0800c191
 800c1c0:	0800c215 	.word	0x0800c215
 800c1c4:	0800c191 	.word	0x0800c191
 800c1c8:	0800c191 	.word	0x0800c191
 800c1cc:	0800c191 	.word	0x0800c191
 800c1d0:	0800c191 	.word	0x0800c191
 800c1d4:	0800c319 	.word	0x0800c319
 800c1d8:	0800c241 	.word	0x0800c241
 800c1dc:	0800c2d3 	.word	0x0800c2d3
 800c1e0:	0800c191 	.word	0x0800c191
 800c1e4:	0800c191 	.word	0x0800c191
 800c1e8:	0800c33b 	.word	0x0800c33b
 800c1ec:	0800c191 	.word	0x0800c191
 800c1f0:	0800c241 	.word	0x0800c241
 800c1f4:	0800c191 	.word	0x0800c191
 800c1f8:	0800c191 	.word	0x0800c191
 800c1fc:	0800c2db 	.word	0x0800c2db
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	1d1a      	adds	r2, r3, #4
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	602a      	str	r2, [r5, #0]
 800c208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c210:	2301      	movs	r3, #1
 800c212:	e09f      	b.n	800c354 <_printf_i+0x1ec>
 800c214:	6820      	ldr	r0, [r4, #0]
 800c216:	682b      	ldr	r3, [r5, #0]
 800c218:	0607      	lsls	r7, r0, #24
 800c21a:	f103 0104 	add.w	r1, r3, #4
 800c21e:	6029      	str	r1, [r5, #0]
 800c220:	d501      	bpl.n	800c226 <_printf_i+0xbe>
 800c222:	681e      	ldr	r6, [r3, #0]
 800c224:	e003      	b.n	800c22e <_printf_i+0xc6>
 800c226:	0646      	lsls	r6, r0, #25
 800c228:	d5fb      	bpl.n	800c222 <_printf_i+0xba>
 800c22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c22e:	2e00      	cmp	r6, #0
 800c230:	da03      	bge.n	800c23a <_printf_i+0xd2>
 800c232:	232d      	movs	r3, #45	; 0x2d
 800c234:	4276      	negs	r6, r6
 800c236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c23a:	485a      	ldr	r0, [pc, #360]	; (800c3a4 <_printf_i+0x23c>)
 800c23c:	230a      	movs	r3, #10
 800c23e:	e012      	b.n	800c266 <_printf_i+0xfe>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	6820      	ldr	r0, [r4, #0]
 800c244:	1d19      	adds	r1, r3, #4
 800c246:	6029      	str	r1, [r5, #0]
 800c248:	0605      	lsls	r5, r0, #24
 800c24a:	d501      	bpl.n	800c250 <_printf_i+0xe8>
 800c24c:	681e      	ldr	r6, [r3, #0]
 800c24e:	e002      	b.n	800c256 <_printf_i+0xee>
 800c250:	0641      	lsls	r1, r0, #25
 800c252:	d5fb      	bpl.n	800c24c <_printf_i+0xe4>
 800c254:	881e      	ldrh	r6, [r3, #0]
 800c256:	4853      	ldr	r0, [pc, #332]	; (800c3a4 <_printf_i+0x23c>)
 800c258:	2f6f      	cmp	r7, #111	; 0x6f
 800c25a:	bf0c      	ite	eq
 800c25c:	2308      	moveq	r3, #8
 800c25e:	230a      	movne	r3, #10
 800c260:	2100      	movs	r1, #0
 800c262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c266:	6865      	ldr	r5, [r4, #4]
 800c268:	60a5      	str	r5, [r4, #8]
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	bfa2      	ittt	ge
 800c26e:	6821      	ldrge	r1, [r4, #0]
 800c270:	f021 0104 	bicge.w	r1, r1, #4
 800c274:	6021      	strge	r1, [r4, #0]
 800c276:	b90e      	cbnz	r6, 800c27c <_printf_i+0x114>
 800c278:	2d00      	cmp	r5, #0
 800c27a:	d04b      	beq.n	800c314 <_printf_i+0x1ac>
 800c27c:	4615      	mov	r5, r2
 800c27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c282:	fb03 6711 	mls	r7, r3, r1, r6
 800c286:	5dc7      	ldrb	r7, [r0, r7]
 800c288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c28c:	4637      	mov	r7, r6
 800c28e:	42bb      	cmp	r3, r7
 800c290:	460e      	mov	r6, r1
 800c292:	d9f4      	bls.n	800c27e <_printf_i+0x116>
 800c294:	2b08      	cmp	r3, #8
 800c296:	d10b      	bne.n	800c2b0 <_printf_i+0x148>
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	07de      	lsls	r6, r3, #31
 800c29c:	d508      	bpl.n	800c2b0 <_printf_i+0x148>
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	6861      	ldr	r1, [r4, #4]
 800c2a2:	4299      	cmp	r1, r3
 800c2a4:	bfde      	ittt	le
 800c2a6:	2330      	movle	r3, #48	; 0x30
 800c2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2b0:	1b52      	subs	r2, r2, r5
 800c2b2:	6122      	str	r2, [r4, #16]
 800c2b4:	f8cd a000 	str.w	sl, [sp]
 800c2b8:	464b      	mov	r3, r9
 800c2ba:	aa03      	add	r2, sp, #12
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f7ff fee4 	bl	800c08c <_printf_common>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d14a      	bne.n	800c35e <_printf_i+0x1f6>
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	b004      	add	sp, #16
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	f043 0320 	orr.w	r3, r3, #32
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	4833      	ldr	r0, [pc, #204]	; (800c3a8 <_printf_i+0x240>)
 800c2dc:	2778      	movs	r7, #120	; 0x78
 800c2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	6829      	ldr	r1, [r5, #0]
 800c2e6:	061f      	lsls	r7, r3, #24
 800c2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2ec:	d402      	bmi.n	800c2f4 <_printf_i+0x18c>
 800c2ee:	065f      	lsls	r7, r3, #25
 800c2f0:	bf48      	it	mi
 800c2f2:	b2b6      	uxthmi	r6, r6
 800c2f4:	07df      	lsls	r7, r3, #31
 800c2f6:	bf48      	it	mi
 800c2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800c2fc:	6029      	str	r1, [r5, #0]
 800c2fe:	bf48      	it	mi
 800c300:	6023      	strmi	r3, [r4, #0]
 800c302:	b91e      	cbnz	r6, 800c30c <_printf_i+0x1a4>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	f023 0320 	bic.w	r3, r3, #32
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	2310      	movs	r3, #16
 800c30e:	e7a7      	b.n	800c260 <_printf_i+0xf8>
 800c310:	4824      	ldr	r0, [pc, #144]	; (800c3a4 <_printf_i+0x23c>)
 800c312:	e7e4      	b.n	800c2de <_printf_i+0x176>
 800c314:	4615      	mov	r5, r2
 800c316:	e7bd      	b.n	800c294 <_printf_i+0x12c>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	6826      	ldr	r6, [r4, #0]
 800c31c:	6961      	ldr	r1, [r4, #20]
 800c31e:	1d18      	adds	r0, r3, #4
 800c320:	6028      	str	r0, [r5, #0]
 800c322:	0635      	lsls	r5, r6, #24
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	d501      	bpl.n	800c32c <_printf_i+0x1c4>
 800c328:	6019      	str	r1, [r3, #0]
 800c32a:	e002      	b.n	800c332 <_printf_i+0x1ca>
 800c32c:	0670      	lsls	r0, r6, #25
 800c32e:	d5fb      	bpl.n	800c328 <_printf_i+0x1c0>
 800c330:	8019      	strh	r1, [r3, #0]
 800c332:	2300      	movs	r3, #0
 800c334:	6123      	str	r3, [r4, #16]
 800c336:	4615      	mov	r5, r2
 800c338:	e7bc      	b.n	800c2b4 <_printf_i+0x14c>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	1d1a      	adds	r2, r3, #4
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	681d      	ldr	r5, [r3, #0]
 800c342:	6862      	ldr	r2, [r4, #4]
 800c344:	2100      	movs	r1, #0
 800c346:	4628      	mov	r0, r5
 800c348:	f7f3 ff42 	bl	80001d0 <memchr>
 800c34c:	b108      	cbz	r0, 800c352 <_printf_i+0x1ea>
 800c34e:	1b40      	subs	r0, r0, r5
 800c350:	6060      	str	r0, [r4, #4]
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	6123      	str	r3, [r4, #16]
 800c356:	2300      	movs	r3, #0
 800c358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c35c:	e7aa      	b.n	800c2b4 <_printf_i+0x14c>
 800c35e:	6923      	ldr	r3, [r4, #16]
 800c360:	462a      	mov	r2, r5
 800c362:	4649      	mov	r1, r9
 800c364:	4640      	mov	r0, r8
 800c366:	47d0      	blx	sl
 800c368:	3001      	adds	r0, #1
 800c36a:	d0ad      	beq.n	800c2c8 <_printf_i+0x160>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	079b      	lsls	r3, r3, #30
 800c370:	d413      	bmi.n	800c39a <_printf_i+0x232>
 800c372:	68e0      	ldr	r0, [r4, #12]
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	4298      	cmp	r0, r3
 800c378:	bfb8      	it	lt
 800c37a:	4618      	movlt	r0, r3
 800c37c:	e7a6      	b.n	800c2cc <_printf_i+0x164>
 800c37e:	2301      	movs	r3, #1
 800c380:	4632      	mov	r2, r6
 800c382:	4649      	mov	r1, r9
 800c384:	4640      	mov	r0, r8
 800c386:	47d0      	blx	sl
 800c388:	3001      	adds	r0, #1
 800c38a:	d09d      	beq.n	800c2c8 <_printf_i+0x160>
 800c38c:	3501      	adds	r5, #1
 800c38e:	68e3      	ldr	r3, [r4, #12]
 800c390:	9903      	ldr	r1, [sp, #12]
 800c392:	1a5b      	subs	r3, r3, r1
 800c394:	42ab      	cmp	r3, r5
 800c396:	dcf2      	bgt.n	800c37e <_printf_i+0x216>
 800c398:	e7eb      	b.n	800c372 <_printf_i+0x20a>
 800c39a:	2500      	movs	r5, #0
 800c39c:	f104 0619 	add.w	r6, r4, #25
 800c3a0:	e7f5      	b.n	800c38e <_printf_i+0x226>
 800c3a2:	bf00      	nop
 800c3a4:	0800f53e 	.word	0x0800f53e
 800c3a8:	0800f54f 	.word	0x0800f54f

0800c3ac <std>:
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ba:	6083      	str	r3, [r0, #8]
 800c3bc:	8181      	strh	r1, [r0, #12]
 800c3be:	6643      	str	r3, [r0, #100]	; 0x64
 800c3c0:	81c2      	strh	r2, [r0, #14]
 800c3c2:	6183      	str	r3, [r0, #24]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	2208      	movs	r2, #8
 800c3c8:	305c      	adds	r0, #92	; 0x5c
 800c3ca:	f000 f902 	bl	800c5d2 <memset>
 800c3ce:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <std+0x38>)
 800c3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <std+0x3c>)
 800c3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3d6:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <std+0x40>)
 800c3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3da:	4b05      	ldr	r3, [pc, #20]	; (800c3f0 <std+0x44>)
 800c3dc:	6224      	str	r4, [r4, #32]
 800c3de:	6323      	str	r3, [r4, #48]	; 0x30
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800c54d 	.word	0x0800c54d
 800c3e8:	0800c56f 	.word	0x0800c56f
 800c3ec:	0800c5a7 	.word	0x0800c5a7
 800c3f0:	0800c5cb 	.word	0x0800c5cb

0800c3f4 <stdio_exit_handler>:
 800c3f4:	4a02      	ldr	r2, [pc, #8]	; (800c400 <stdio_exit_handler+0xc>)
 800c3f6:	4903      	ldr	r1, [pc, #12]	; (800c404 <stdio_exit_handler+0x10>)
 800c3f8:	4803      	ldr	r0, [pc, #12]	; (800c408 <stdio_exit_handler+0x14>)
 800c3fa:	f000 b869 	b.w	800c4d0 <_fwalk_sglue>
 800c3fe:	bf00      	nop
 800c400:	2000003c 	.word	0x2000003c
 800c404:	0800e141 	.word	0x0800e141
 800c408:	20000048 	.word	0x20000048

0800c40c <cleanup_stdio>:
 800c40c:	6841      	ldr	r1, [r0, #4]
 800c40e:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <cleanup_stdio+0x34>)
 800c410:	4299      	cmp	r1, r3
 800c412:	b510      	push	{r4, lr}
 800c414:	4604      	mov	r4, r0
 800c416:	d001      	beq.n	800c41c <cleanup_stdio+0x10>
 800c418:	f001 fe92 	bl	800e140 <_fflush_r>
 800c41c:	68a1      	ldr	r1, [r4, #8]
 800c41e:	4b09      	ldr	r3, [pc, #36]	; (800c444 <cleanup_stdio+0x38>)
 800c420:	4299      	cmp	r1, r3
 800c422:	d002      	beq.n	800c42a <cleanup_stdio+0x1e>
 800c424:	4620      	mov	r0, r4
 800c426:	f001 fe8b 	bl	800e140 <_fflush_r>
 800c42a:	68e1      	ldr	r1, [r4, #12]
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <cleanup_stdio+0x3c>)
 800c42e:	4299      	cmp	r1, r3
 800c430:	d004      	beq.n	800c43c <cleanup_stdio+0x30>
 800c432:	4620      	mov	r0, r4
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f001 be82 	b.w	800e140 <_fflush_r>
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	bf00      	nop
 800c440:	200052c0 	.word	0x200052c0
 800c444:	20005328 	.word	0x20005328
 800c448:	20005390 	.word	0x20005390

0800c44c <global_stdio_init.part.0>:
 800c44c:	b510      	push	{r4, lr}
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <global_stdio_init.part.0+0x30>)
 800c450:	4c0b      	ldr	r4, [pc, #44]	; (800c480 <global_stdio_init.part.0+0x34>)
 800c452:	4a0c      	ldr	r2, [pc, #48]	; (800c484 <global_stdio_init.part.0+0x38>)
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	4620      	mov	r0, r4
 800c458:	2200      	movs	r2, #0
 800c45a:	2104      	movs	r1, #4
 800c45c:	f7ff ffa6 	bl	800c3ac <std>
 800c460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c464:	2201      	movs	r2, #1
 800c466:	2109      	movs	r1, #9
 800c468:	f7ff ffa0 	bl	800c3ac <std>
 800c46c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c470:	2202      	movs	r2, #2
 800c472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c476:	2112      	movs	r1, #18
 800c478:	f7ff bf98 	b.w	800c3ac <std>
 800c47c:	200053f8 	.word	0x200053f8
 800c480:	200052c0 	.word	0x200052c0
 800c484:	0800c3f5 	.word	0x0800c3f5

0800c488 <__sfp_lock_acquire>:
 800c488:	4801      	ldr	r0, [pc, #4]	; (800c490 <__sfp_lock_acquire+0x8>)
 800c48a:	f000 b975 	b.w	800c778 <__retarget_lock_acquire_recursive>
 800c48e:	bf00      	nop
 800c490:	20005401 	.word	0x20005401

0800c494 <__sfp_lock_release>:
 800c494:	4801      	ldr	r0, [pc, #4]	; (800c49c <__sfp_lock_release+0x8>)
 800c496:	f000 b970 	b.w	800c77a <__retarget_lock_release_recursive>
 800c49a:	bf00      	nop
 800c49c:	20005401 	.word	0x20005401

0800c4a0 <__sinit>:
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	f7ff fff0 	bl	800c488 <__sfp_lock_acquire>
 800c4a8:	6a23      	ldr	r3, [r4, #32]
 800c4aa:	b11b      	cbz	r3, 800c4b4 <__sinit+0x14>
 800c4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b0:	f7ff bff0 	b.w	800c494 <__sfp_lock_release>
 800c4b4:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <__sinit+0x28>)
 800c4b6:	6223      	str	r3, [r4, #32]
 800c4b8:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <__sinit+0x2c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1f5      	bne.n	800c4ac <__sinit+0xc>
 800c4c0:	f7ff ffc4 	bl	800c44c <global_stdio_init.part.0>
 800c4c4:	e7f2      	b.n	800c4ac <__sinit+0xc>
 800c4c6:	bf00      	nop
 800c4c8:	0800c40d 	.word	0x0800c40d
 800c4cc:	200053f8 	.word	0x200053f8

0800c4d0 <_fwalk_sglue>:
 800c4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	4688      	mov	r8, r1
 800c4d8:	4614      	mov	r4, r2
 800c4da:	2600      	movs	r6, #0
 800c4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800c4e4:	d505      	bpl.n	800c4f2 <_fwalk_sglue+0x22>
 800c4e6:	6824      	ldr	r4, [r4, #0]
 800c4e8:	2c00      	cmp	r4, #0
 800c4ea:	d1f7      	bne.n	800c4dc <_fwalk_sglue+0xc>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f2:	89ab      	ldrh	r3, [r5, #12]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d907      	bls.n	800c508 <_fwalk_sglue+0x38>
 800c4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	d003      	beq.n	800c508 <_fwalk_sglue+0x38>
 800c500:	4629      	mov	r1, r5
 800c502:	4638      	mov	r0, r7
 800c504:	47c0      	blx	r8
 800c506:	4306      	orrs	r6, r0
 800c508:	3568      	adds	r5, #104	; 0x68
 800c50a:	e7e9      	b.n	800c4e0 <_fwalk_sglue+0x10>

0800c50c <siprintf>:
 800c50c:	b40e      	push	{r1, r2, r3}
 800c50e:	b500      	push	{lr}
 800c510:	b09c      	sub	sp, #112	; 0x70
 800c512:	ab1d      	add	r3, sp, #116	; 0x74
 800c514:	9002      	str	r0, [sp, #8]
 800c516:	9006      	str	r0, [sp, #24]
 800c518:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c51c:	4809      	ldr	r0, [pc, #36]	; (800c544 <siprintf+0x38>)
 800c51e:	9107      	str	r1, [sp, #28]
 800c520:	9104      	str	r1, [sp, #16]
 800c522:	4909      	ldr	r1, [pc, #36]	; (800c548 <siprintf+0x3c>)
 800c524:	f853 2b04 	ldr.w	r2, [r3], #4
 800c528:	9105      	str	r1, [sp, #20]
 800c52a:	6800      	ldr	r0, [r0, #0]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	a902      	add	r1, sp, #8
 800c530:	f001 fc82 	bl	800de38 <_svfiprintf_r>
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	2200      	movs	r2, #0
 800c538:	701a      	strb	r2, [r3, #0]
 800c53a:	b01c      	add	sp, #112	; 0x70
 800c53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c540:	b003      	add	sp, #12
 800c542:	4770      	bx	lr
 800c544:	20000094 	.word	0x20000094
 800c548:	ffff0208 	.word	0xffff0208

0800c54c <__sread>:
 800c54c:	b510      	push	{r4, lr}
 800c54e:	460c      	mov	r4, r1
 800c550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c554:	f000 f8c2 	bl	800c6dc <_read_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	bfab      	itete	ge
 800c55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c55e:	89a3      	ldrhlt	r3, [r4, #12]
 800c560:	181b      	addge	r3, r3, r0
 800c562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c566:	bfac      	ite	ge
 800c568:	6563      	strge	r3, [r4, #84]	; 0x54
 800c56a:	81a3      	strhlt	r3, [r4, #12]
 800c56c:	bd10      	pop	{r4, pc}

0800c56e <__swrite>:
 800c56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c572:	461f      	mov	r7, r3
 800c574:	898b      	ldrh	r3, [r1, #12]
 800c576:	05db      	lsls	r3, r3, #23
 800c578:	4605      	mov	r5, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	4616      	mov	r6, r2
 800c57e:	d505      	bpl.n	800c58c <__swrite+0x1e>
 800c580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c584:	2302      	movs	r3, #2
 800c586:	2200      	movs	r2, #0
 800c588:	f000 f896 	bl	800c6b8 <_lseek_r>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	4632      	mov	r2, r6
 800c59a:	463b      	mov	r3, r7
 800c59c:	4628      	mov	r0, r5
 800c59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a2:	f000 b8ad 	b.w	800c700 <_write_r>

0800c5a6 <__sseek>:
 800c5a6:	b510      	push	{r4, lr}
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ae:	f000 f883 	bl	800c6b8 <_lseek_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	bf15      	itete	ne
 800c5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5c2:	81a3      	strheq	r3, [r4, #12]
 800c5c4:	bf18      	it	ne
 800c5c6:	81a3      	strhne	r3, [r4, #12]
 800c5c8:	bd10      	pop	{r4, pc}

0800c5ca <__sclose>:
 800c5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ce:	f000 b80d 	b.w	800c5ec <_close_r>

0800c5d2 <memset>:
 800c5d2:	4402      	add	r2, r0
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d100      	bne.n	800c5dc <memset+0xa>
 800c5da:	4770      	bx	lr
 800c5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e0:	e7f9      	b.n	800c5d6 <memset+0x4>
	...

0800c5e4 <_localeconv_r>:
 800c5e4:	4800      	ldr	r0, [pc, #0]	; (800c5e8 <_localeconv_r+0x4>)
 800c5e6:	4770      	bx	lr
 800c5e8:	20000188 	.word	0x20000188

0800c5ec <_close_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d06      	ldr	r5, [pc, #24]	; (800c608 <_close_r+0x1c>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	602b      	str	r3, [r5, #0]
 800c5f8:	f7f7 f86f 	bl	80036da <_close>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_close_r+0x1a>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	b103      	cbz	r3, 800c606 <_close_r+0x1a>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	200053fc 	.word	0x200053fc

0800c60c <_reclaim_reent>:
 800c60c:	4b29      	ldr	r3, [pc, #164]	; (800c6b4 <_reclaim_reent+0xa8>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4283      	cmp	r3, r0
 800c612:	b570      	push	{r4, r5, r6, lr}
 800c614:	4604      	mov	r4, r0
 800c616:	d04b      	beq.n	800c6b0 <_reclaim_reent+0xa4>
 800c618:	69c3      	ldr	r3, [r0, #28]
 800c61a:	b143      	cbz	r3, 800c62e <_reclaim_reent+0x22>
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d144      	bne.n	800c6ac <_reclaim_reent+0xa0>
 800c622:	69e3      	ldr	r3, [r4, #28]
 800c624:	6819      	ldr	r1, [r3, #0]
 800c626:	b111      	cbz	r1, 800c62e <_reclaim_reent+0x22>
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 ff2f 	bl	800d48c <_free_r>
 800c62e:	6961      	ldr	r1, [r4, #20]
 800c630:	b111      	cbz	r1, 800c638 <_reclaim_reent+0x2c>
 800c632:	4620      	mov	r0, r4
 800c634:	f000 ff2a 	bl	800d48c <_free_r>
 800c638:	69e1      	ldr	r1, [r4, #28]
 800c63a:	b111      	cbz	r1, 800c642 <_reclaim_reent+0x36>
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 ff25 	bl	800d48c <_free_r>
 800c642:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c644:	b111      	cbz	r1, 800c64c <_reclaim_reent+0x40>
 800c646:	4620      	mov	r0, r4
 800c648:	f000 ff20 	bl	800d48c <_free_r>
 800c64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c64e:	b111      	cbz	r1, 800c656 <_reclaim_reent+0x4a>
 800c650:	4620      	mov	r0, r4
 800c652:	f000 ff1b 	bl	800d48c <_free_r>
 800c656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c658:	b111      	cbz	r1, 800c660 <_reclaim_reent+0x54>
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 ff16 	bl	800d48c <_free_r>
 800c660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c662:	b111      	cbz	r1, 800c66a <_reclaim_reent+0x5e>
 800c664:	4620      	mov	r0, r4
 800c666:	f000 ff11 	bl	800d48c <_free_r>
 800c66a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c66c:	b111      	cbz	r1, 800c674 <_reclaim_reent+0x68>
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 ff0c 	bl	800d48c <_free_r>
 800c674:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c676:	b111      	cbz	r1, 800c67e <_reclaim_reent+0x72>
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 ff07 	bl	800d48c <_free_r>
 800c67e:	6a23      	ldr	r3, [r4, #32]
 800c680:	b1b3      	cbz	r3, 800c6b0 <_reclaim_reent+0xa4>
 800c682:	4620      	mov	r0, r4
 800c684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c688:	4718      	bx	r3
 800c68a:	5949      	ldr	r1, [r1, r5]
 800c68c:	b941      	cbnz	r1, 800c6a0 <_reclaim_reent+0x94>
 800c68e:	3504      	adds	r5, #4
 800c690:	69e3      	ldr	r3, [r4, #28]
 800c692:	2d80      	cmp	r5, #128	; 0x80
 800c694:	68d9      	ldr	r1, [r3, #12]
 800c696:	d1f8      	bne.n	800c68a <_reclaim_reent+0x7e>
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 fef7 	bl	800d48c <_free_r>
 800c69e:	e7c0      	b.n	800c622 <_reclaim_reent+0x16>
 800c6a0:	680e      	ldr	r6, [r1, #0]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 fef2 	bl	800d48c <_free_r>
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	e7ef      	b.n	800c68c <_reclaim_reent+0x80>
 800c6ac:	2500      	movs	r5, #0
 800c6ae:	e7ef      	b.n	800c690 <_reclaim_reent+0x84>
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20000094 	.word	0x20000094

0800c6b8 <_lseek_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d07      	ldr	r5, [pc, #28]	; (800c6d8 <_lseek_r+0x20>)
 800c6bc:	4604      	mov	r4, r0
 800c6be:	4608      	mov	r0, r1
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f7f7 f82e 	bl	8003728 <_lseek>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_lseek_r+0x1e>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_lseek_r+0x1e>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	200053fc 	.word	0x200053fc

0800c6dc <_read_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d07      	ldr	r5, [pc, #28]	; (800c6fc <_read_r+0x20>)
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f6 ffbc 	bl	8003668 <_read>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_read_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_read_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	200053fc 	.word	0x200053fc

0800c700 <_write_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	; (800c720 <_write_r+0x20>)
 800c704:	4604      	mov	r4, r0
 800c706:	4608      	mov	r0, r1
 800c708:	4611      	mov	r1, r2
 800c70a:	2200      	movs	r2, #0
 800c70c:	602a      	str	r2, [r5, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	f7f6 ffc7 	bl	80036a2 <_write>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	d102      	bne.n	800c71e <_write_r+0x1e>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b103      	cbz	r3, 800c71e <_write_r+0x1e>
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	200053fc 	.word	0x200053fc

0800c724 <__errno>:
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <__errno+0x8>)
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	20000094 	.word	0x20000094

0800c730 <__libc_init_array>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4d0d      	ldr	r5, [pc, #52]	; (800c768 <__libc_init_array+0x38>)
 800c734:	4c0d      	ldr	r4, [pc, #52]	; (800c76c <__libc_init_array+0x3c>)
 800c736:	1b64      	subs	r4, r4, r5
 800c738:	10a4      	asrs	r4, r4, #2
 800c73a:	2600      	movs	r6, #0
 800c73c:	42a6      	cmp	r6, r4
 800c73e:	d109      	bne.n	800c754 <__libc_init_array+0x24>
 800c740:	4d0b      	ldr	r5, [pc, #44]	; (800c770 <__libc_init_array+0x40>)
 800c742:	4c0c      	ldr	r4, [pc, #48]	; (800c774 <__libc_init_array+0x44>)
 800c744:	f002 f892 	bl	800e86c <_init>
 800c748:	1b64      	subs	r4, r4, r5
 800c74a:	10a4      	asrs	r4, r4, #2
 800c74c:	2600      	movs	r6, #0
 800c74e:	42a6      	cmp	r6, r4
 800c750:	d105      	bne.n	800c75e <__libc_init_array+0x2e>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	f855 3b04 	ldr.w	r3, [r5], #4
 800c758:	4798      	blx	r3
 800c75a:	3601      	adds	r6, #1
 800c75c:	e7ee      	b.n	800c73c <__libc_init_array+0xc>
 800c75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c762:	4798      	blx	r3
 800c764:	3601      	adds	r6, #1
 800c766:	e7f2      	b.n	800c74e <__libc_init_array+0x1e>
 800c768:	0800f8a4 	.word	0x0800f8a4
 800c76c:	0800f8a4 	.word	0x0800f8a4
 800c770:	0800f8a4 	.word	0x0800f8a4
 800c774:	0800f8a8 	.word	0x0800f8a8

0800c778 <__retarget_lock_acquire_recursive>:
 800c778:	4770      	bx	lr

0800c77a <__retarget_lock_release_recursive>:
 800c77a:	4770      	bx	lr

0800c77c <memcpy>:
 800c77c:	440a      	add	r2, r1
 800c77e:	4291      	cmp	r1, r2
 800c780:	f100 33ff 	add.w	r3, r0, #4294967295
 800c784:	d100      	bne.n	800c788 <memcpy+0xc>
 800c786:	4770      	bx	lr
 800c788:	b510      	push	{r4, lr}
 800c78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c78e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c792:	4291      	cmp	r1, r2
 800c794:	d1f9      	bne.n	800c78a <memcpy+0xe>
 800c796:	bd10      	pop	{r4, pc}

0800c798 <quorem>:
 800c798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	6903      	ldr	r3, [r0, #16]
 800c79e:	690c      	ldr	r4, [r1, #16]
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	db7e      	blt.n	800c8a4 <quorem+0x10c>
 800c7a6:	3c01      	subs	r4, #1
 800c7a8:	f101 0814 	add.w	r8, r1, #20
 800c7ac:	f100 0514 	add.w	r5, r0, #20
 800c7b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c7c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7ce:	d331      	bcc.n	800c834 <quorem+0x9c>
 800c7d0:	f04f 0e00 	mov.w	lr, #0
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	46ac      	mov	ip, r5
 800c7d8:	46f2      	mov	sl, lr
 800c7da:	f850 2b04 	ldr.w	r2, [r0], #4
 800c7de:	b293      	uxth	r3, r2
 800c7e0:	fb06 e303 	mla	r3, r6, r3, lr
 800c7e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c7e8:	0c1a      	lsrs	r2, r3, #16
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	ebaa 0303 	sub.w	r3, sl, r3
 800c7f0:	f8dc a000 	ldr.w	sl, [ip]
 800c7f4:	fa13 f38a 	uxtah	r3, r3, sl
 800c7f8:	fb06 220e 	mla	r2, r6, lr, r2
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	9b00      	ldr	r3, [sp, #0]
 800c800:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c804:	b292      	uxth	r2, r2
 800c806:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c80a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c80e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c812:	4581      	cmp	r9, r0
 800c814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c818:	f84c 3b04 	str.w	r3, [ip], #4
 800c81c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c820:	d2db      	bcs.n	800c7da <quorem+0x42>
 800c822:	f855 300b 	ldr.w	r3, [r5, fp]
 800c826:	b92b      	cbnz	r3, 800c834 <quorem+0x9c>
 800c828:	9b01      	ldr	r3, [sp, #4]
 800c82a:	3b04      	subs	r3, #4
 800c82c:	429d      	cmp	r5, r3
 800c82e:	461a      	mov	r2, r3
 800c830:	d32c      	bcc.n	800c88c <quorem+0xf4>
 800c832:	613c      	str	r4, [r7, #16]
 800c834:	4638      	mov	r0, r7
 800c836:	f001 f9a5 	bl	800db84 <__mcmp>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	db22      	blt.n	800c884 <quorem+0xec>
 800c83e:	3601      	adds	r6, #1
 800c840:	4629      	mov	r1, r5
 800c842:	2000      	movs	r0, #0
 800c844:	f858 2b04 	ldr.w	r2, [r8], #4
 800c848:	f8d1 c000 	ldr.w	ip, [r1]
 800c84c:	b293      	uxth	r3, r2
 800c84e:	1ac3      	subs	r3, r0, r3
 800c850:	0c12      	lsrs	r2, r2, #16
 800c852:	fa13 f38c 	uxtah	r3, r3, ip
 800c856:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c85a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c85e:	b29b      	uxth	r3, r3
 800c860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c864:	45c1      	cmp	r9, r8
 800c866:	f841 3b04 	str.w	r3, [r1], #4
 800c86a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c86e:	d2e9      	bcs.n	800c844 <quorem+0xac>
 800c870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c874:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c878:	b922      	cbnz	r2, 800c884 <quorem+0xec>
 800c87a:	3b04      	subs	r3, #4
 800c87c:	429d      	cmp	r5, r3
 800c87e:	461a      	mov	r2, r3
 800c880:	d30a      	bcc.n	800c898 <quorem+0x100>
 800c882:	613c      	str	r4, [r7, #16]
 800c884:	4630      	mov	r0, r6
 800c886:	b003      	add	sp, #12
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88c:	6812      	ldr	r2, [r2, #0]
 800c88e:	3b04      	subs	r3, #4
 800c890:	2a00      	cmp	r2, #0
 800c892:	d1ce      	bne.n	800c832 <quorem+0x9a>
 800c894:	3c01      	subs	r4, #1
 800c896:	e7c9      	b.n	800c82c <quorem+0x94>
 800c898:	6812      	ldr	r2, [r2, #0]
 800c89a:	3b04      	subs	r3, #4
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	d1f0      	bne.n	800c882 <quorem+0xea>
 800c8a0:	3c01      	subs	r4, #1
 800c8a2:	e7eb      	b.n	800c87c <quorem+0xe4>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e7ee      	b.n	800c886 <quorem+0xee>

0800c8a8 <_dtoa_r>:
 800c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ac:	ed2d 8b04 	vpush	{d8-d9}
 800c8b0:	69c5      	ldr	r5, [r0, #28]
 800c8b2:	b093      	sub	sp, #76	; 0x4c
 800c8b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c8b8:	ec57 6b10 	vmov	r6, r7, d0
 800c8bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c8c0:	9107      	str	r1, [sp, #28]
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	920a      	str	r2, [sp, #40]	; 0x28
 800c8c6:	930d      	str	r3, [sp, #52]	; 0x34
 800c8c8:	b975      	cbnz	r5, 800c8e8 <_dtoa_r+0x40>
 800c8ca:	2010      	movs	r0, #16
 800c8cc:	f000 fe2a 	bl	800d524 <malloc>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	61e0      	str	r0, [r4, #28]
 800c8d4:	b920      	cbnz	r0, 800c8e0 <_dtoa_r+0x38>
 800c8d6:	4bae      	ldr	r3, [pc, #696]	; (800cb90 <_dtoa_r+0x2e8>)
 800c8d8:	21ef      	movs	r1, #239	; 0xef
 800c8da:	48ae      	ldr	r0, [pc, #696]	; (800cb94 <_dtoa_r+0x2ec>)
 800c8dc:	f001 fc82 	bl	800e1e4 <__assert_func>
 800c8e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8e4:	6005      	str	r5, [r0, #0]
 800c8e6:	60c5      	str	r5, [r0, #12]
 800c8e8:	69e3      	ldr	r3, [r4, #28]
 800c8ea:	6819      	ldr	r1, [r3, #0]
 800c8ec:	b151      	cbz	r1, 800c904 <_dtoa_r+0x5c>
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	604a      	str	r2, [r1, #4]
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4093      	lsls	r3, r2
 800c8f6:	608b      	str	r3, [r1, #8]
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 ff07 	bl	800d70c <_Bfree>
 800c8fe:	69e3      	ldr	r3, [r4, #28]
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	1e3b      	subs	r3, r7, #0
 800c906:	bfbb      	ittet	lt
 800c908:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c90c:	9303      	strlt	r3, [sp, #12]
 800c90e:	2300      	movge	r3, #0
 800c910:	2201      	movlt	r2, #1
 800c912:	bfac      	ite	ge
 800c914:	f8c8 3000 	strge.w	r3, [r8]
 800c918:	f8c8 2000 	strlt.w	r2, [r8]
 800c91c:	4b9e      	ldr	r3, [pc, #632]	; (800cb98 <_dtoa_r+0x2f0>)
 800c91e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c922:	ea33 0308 	bics.w	r3, r3, r8
 800c926:	d11b      	bne.n	800c960 <_dtoa_r+0xb8>
 800c928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c92a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c934:	4333      	orrs	r3, r6
 800c936:	f000 8593 	beq.w	800d460 <_dtoa_r+0xbb8>
 800c93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c93c:	b963      	cbnz	r3, 800c958 <_dtoa_r+0xb0>
 800c93e:	4b97      	ldr	r3, [pc, #604]	; (800cb9c <_dtoa_r+0x2f4>)
 800c940:	e027      	b.n	800c992 <_dtoa_r+0xea>
 800c942:	4b97      	ldr	r3, [pc, #604]	; (800cba0 <_dtoa_r+0x2f8>)
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	3308      	adds	r3, #8
 800c948:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	9800      	ldr	r0, [sp, #0]
 800c94e:	b013      	add	sp, #76	; 0x4c
 800c950:	ecbd 8b04 	vpop	{d8-d9}
 800c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c958:	4b90      	ldr	r3, [pc, #576]	; (800cb9c <_dtoa_r+0x2f4>)
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	3303      	adds	r3, #3
 800c95e:	e7f3      	b.n	800c948 <_dtoa_r+0xa0>
 800c960:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c964:	2200      	movs	r2, #0
 800c966:	ec51 0b17 	vmov	r0, r1, d7
 800c96a:	eeb0 8a47 	vmov.f32	s16, s14
 800c96e:	eef0 8a67 	vmov.f32	s17, s15
 800c972:	2300      	movs	r3, #0
 800c974:	f7f4 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c978:	4681      	mov	r9, r0
 800c97a:	b160      	cbz	r0, 800c996 <_dtoa_r+0xee>
 800c97c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c97e:	2301      	movs	r3, #1
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8568 	beq.w	800d45a <_dtoa_r+0xbb2>
 800c98a:	4b86      	ldr	r3, [pc, #536]	; (800cba4 <_dtoa_r+0x2fc>)
 800c98c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	3b01      	subs	r3, #1
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	e7da      	b.n	800c94c <_dtoa_r+0xa4>
 800c996:	aa10      	add	r2, sp, #64	; 0x40
 800c998:	a911      	add	r1, sp, #68	; 0x44
 800c99a:	4620      	mov	r0, r4
 800c99c:	eeb0 0a48 	vmov.f32	s0, s16
 800c9a0:	eef0 0a68 	vmov.f32	s1, s17
 800c9a4:	f001 f994 	bl	800dcd0 <__d2b>
 800c9a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	d07f      	beq.n	800cab2 <_dtoa_r+0x20a>
 800c9b2:	ee18 3a90 	vmov	r3, s17
 800c9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c9be:	ec51 0b18 	vmov	r0, r1, d8
 800c9c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c9ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	4b75      	ldr	r3, [pc, #468]	; (800cba8 <_dtoa_r+0x300>)
 800c9d4:	f7f3 fc58 	bl	8000288 <__aeabi_dsub>
 800c9d8:	a367      	add	r3, pc, #412	; (adr r3, 800cb78 <_dtoa_r+0x2d0>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fe0b 	bl	80005f8 <__aeabi_dmul>
 800c9e2:	a367      	add	r3, pc, #412	; (adr r3, 800cb80 <_dtoa_r+0x2d8>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc50 	bl	800028c <__adddf3>
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	460f      	mov	r7, r1
 800c9f2:	f7f3 fd97 	bl	8000524 <__aeabi_i2d>
 800c9f6:	a364      	add	r3, pc, #400	; (adr r3, 800cb88 <_dtoa_r+0x2e0>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fc40 	bl	800028c <__adddf3>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	f7f4 f8a2 	bl	8000b58 <__aeabi_d2iz>
 800ca14:	2200      	movs	r2, #0
 800ca16:	4683      	mov	fp, r0
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	4639      	mov	r1, r7
 800ca1e:	f7f4 f85d 	bl	8000adc <__aeabi_dcmplt>
 800ca22:	b148      	cbz	r0, 800ca38 <_dtoa_r+0x190>
 800ca24:	4658      	mov	r0, fp
 800ca26:	f7f3 fd7d 	bl	8000524 <__aeabi_i2d>
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	f7f4 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca32:	b908      	cbnz	r0, 800ca38 <_dtoa_r+0x190>
 800ca34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca38:	f1bb 0f16 	cmp.w	fp, #22
 800ca3c:	d857      	bhi.n	800caee <_dtoa_r+0x246>
 800ca3e:	4b5b      	ldr	r3, [pc, #364]	; (800cbac <_dtoa_r+0x304>)
 800ca40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	ec51 0b18 	vmov	r0, r1, d8
 800ca4c:	f7f4 f846 	bl	8000adc <__aeabi_dcmplt>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d04e      	beq.n	800caf2 <_dtoa_r+0x24a>
 800ca54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca58:	2300      	movs	r3, #0
 800ca5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ca5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca5e:	1b5b      	subs	r3, r3, r5
 800ca60:	1e5a      	subs	r2, r3, #1
 800ca62:	bf45      	ittet	mi
 800ca64:	f1c3 0301 	rsbmi	r3, r3, #1
 800ca68:	9305      	strmi	r3, [sp, #20]
 800ca6a:	2300      	movpl	r3, #0
 800ca6c:	2300      	movmi	r3, #0
 800ca6e:	9206      	str	r2, [sp, #24]
 800ca70:	bf54      	ite	pl
 800ca72:	9305      	strpl	r3, [sp, #20]
 800ca74:	9306      	strmi	r3, [sp, #24]
 800ca76:	f1bb 0f00 	cmp.w	fp, #0
 800ca7a:	db3c      	blt.n	800caf6 <_dtoa_r+0x24e>
 800ca7c:	9b06      	ldr	r3, [sp, #24]
 800ca7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ca82:	445b      	add	r3, fp
 800ca84:	9306      	str	r3, [sp, #24]
 800ca86:	2300      	movs	r3, #0
 800ca88:	9308      	str	r3, [sp, #32]
 800ca8a:	9b07      	ldr	r3, [sp, #28]
 800ca8c:	2b09      	cmp	r3, #9
 800ca8e:	d868      	bhi.n	800cb62 <_dtoa_r+0x2ba>
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	bfc4      	itt	gt
 800ca94:	3b04      	subgt	r3, #4
 800ca96:	9307      	strgt	r3, [sp, #28]
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ca9e:	bfcc      	ite	gt
 800caa0:	2500      	movgt	r5, #0
 800caa2:	2501      	movle	r5, #1
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	f200 8085 	bhi.w	800cbb4 <_dtoa_r+0x30c>
 800caaa:	e8df f003 	tbb	[pc, r3]
 800caae:	3b2e      	.short	0x3b2e
 800cab0:	5839      	.short	0x5839
 800cab2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cab6:	441d      	add	r5, r3
 800cab8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	bfc1      	itttt	gt
 800cac0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cac4:	fa08 f803 	lslgt.w	r8, r8, r3
 800cac8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cacc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cad0:	bfd6      	itet	le
 800cad2:	f1c3 0320 	rsble	r3, r3, #32
 800cad6:	ea48 0003 	orrgt.w	r0, r8, r3
 800cada:	fa06 f003 	lslle.w	r0, r6, r3
 800cade:	f7f3 fd11 	bl	8000504 <__aeabi_ui2d>
 800cae2:	2201      	movs	r2, #1
 800cae4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cae8:	3d01      	subs	r5, #1
 800caea:	920e      	str	r2, [sp, #56]	; 0x38
 800caec:	e76f      	b.n	800c9ce <_dtoa_r+0x126>
 800caee:	2301      	movs	r3, #1
 800caf0:	e7b3      	b.n	800ca5a <_dtoa_r+0x1b2>
 800caf2:	900c      	str	r0, [sp, #48]	; 0x30
 800caf4:	e7b2      	b.n	800ca5c <_dtoa_r+0x1b4>
 800caf6:	9b05      	ldr	r3, [sp, #20]
 800caf8:	eba3 030b 	sub.w	r3, r3, fp
 800cafc:	9305      	str	r3, [sp, #20]
 800cafe:	f1cb 0300 	rsb	r3, fp, #0
 800cb02:	9308      	str	r3, [sp, #32]
 800cb04:	2300      	movs	r3, #0
 800cb06:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb08:	e7bf      	b.n	800ca8a <_dtoa_r+0x1e2>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dc52      	bgt.n	800cbba <_dtoa_r+0x312>
 800cb14:	2301      	movs	r3, #1
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	920a      	str	r2, [sp, #40]	; 0x28
 800cb1e:	e00b      	b.n	800cb38 <_dtoa_r+0x290>
 800cb20:	2301      	movs	r3, #1
 800cb22:	e7f3      	b.n	800cb0c <_dtoa_r+0x264>
 800cb24:	2300      	movs	r3, #0
 800cb26:	9309      	str	r3, [sp, #36]	; 0x24
 800cb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2a:	445b      	add	r3, fp
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	bfb8      	it	lt
 800cb36:	2301      	movlt	r3, #1
 800cb38:	69e0      	ldr	r0, [r4, #28]
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	2204      	movs	r2, #4
 800cb3e:	f102 0614 	add.w	r6, r2, #20
 800cb42:	429e      	cmp	r6, r3
 800cb44:	d93d      	bls.n	800cbc2 <_dtoa_r+0x31a>
 800cb46:	6041      	str	r1, [r0, #4]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fd9f 	bl	800d68c <_Balloc>
 800cb4e:	9000      	str	r0, [sp, #0]
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d139      	bne.n	800cbc8 <_dtoa_r+0x320>
 800cb54:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <_dtoa_r+0x308>)
 800cb56:	4602      	mov	r2, r0
 800cb58:	f240 11af 	movw	r1, #431	; 0x1af
 800cb5c:	e6bd      	b.n	800c8da <_dtoa_r+0x32>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e7e1      	b.n	800cb26 <_dtoa_r+0x27e>
 800cb62:	2501      	movs	r5, #1
 800cb64:	2300      	movs	r3, #0
 800cb66:	9307      	str	r3, [sp, #28]
 800cb68:	9509      	str	r5, [sp, #36]	; 0x24
 800cb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6e:	9301      	str	r3, [sp, #4]
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	2200      	movs	r2, #0
 800cb74:	2312      	movs	r3, #18
 800cb76:	e7d1      	b.n	800cb1c <_dtoa_r+0x274>
 800cb78:	636f4361 	.word	0x636f4361
 800cb7c:	3fd287a7 	.word	0x3fd287a7
 800cb80:	8b60c8b3 	.word	0x8b60c8b3
 800cb84:	3fc68a28 	.word	0x3fc68a28
 800cb88:	509f79fb 	.word	0x509f79fb
 800cb8c:	3fd34413 	.word	0x3fd34413
 800cb90:	0800f56d 	.word	0x0800f56d
 800cb94:	0800f584 	.word	0x0800f584
 800cb98:	7ff00000 	.word	0x7ff00000
 800cb9c:	0800f569 	.word	0x0800f569
 800cba0:	0800f560 	.word	0x0800f560
 800cba4:	0800f53d 	.word	0x0800f53d
 800cba8:	3ff80000 	.word	0x3ff80000
 800cbac:	0800f670 	.word	0x0800f670
 800cbb0:	0800f5dc 	.word	0x0800f5dc
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb8:	e7d7      	b.n	800cb6a <_dtoa_r+0x2c2>
 800cbba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	9304      	str	r3, [sp, #16]
 800cbc0:	e7ba      	b.n	800cb38 <_dtoa_r+0x290>
 800cbc2:	3101      	adds	r1, #1
 800cbc4:	0052      	lsls	r2, r2, #1
 800cbc6:	e7ba      	b.n	800cb3e <_dtoa_r+0x296>
 800cbc8:	69e3      	ldr	r3, [r4, #28]
 800cbca:	9a00      	ldr	r2, [sp, #0]
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	9b04      	ldr	r3, [sp, #16]
 800cbd0:	2b0e      	cmp	r3, #14
 800cbd2:	f200 80a8 	bhi.w	800cd26 <_dtoa_r+0x47e>
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	f000 80a5 	beq.w	800cd26 <_dtoa_r+0x47e>
 800cbdc:	f1bb 0f00 	cmp.w	fp, #0
 800cbe0:	dd38      	ble.n	800cc54 <_dtoa_r+0x3ac>
 800cbe2:	4bc0      	ldr	r3, [pc, #768]	; (800cee4 <_dtoa_r+0x63c>)
 800cbe4:	f00b 020f 	and.w	r2, fp, #15
 800cbe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cbf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cbf4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cbf8:	d019      	beq.n	800cc2e <_dtoa_r+0x386>
 800cbfa:	4bbb      	ldr	r3, [pc, #748]	; (800cee8 <_dtoa_r+0x640>)
 800cbfc:	ec51 0b18 	vmov	r0, r1, d8
 800cc00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc04:	f7f3 fe22 	bl	800084c <__aeabi_ddiv>
 800cc08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc0c:	f008 080f 	and.w	r8, r8, #15
 800cc10:	2503      	movs	r5, #3
 800cc12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cee8 <_dtoa_r+0x640>
 800cc16:	f1b8 0f00 	cmp.w	r8, #0
 800cc1a:	d10a      	bne.n	800cc32 <_dtoa_r+0x38a>
 800cc1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc20:	4632      	mov	r2, r6
 800cc22:	463b      	mov	r3, r7
 800cc24:	f7f3 fe12 	bl	800084c <__aeabi_ddiv>
 800cc28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc2c:	e02b      	b.n	800cc86 <_dtoa_r+0x3de>
 800cc2e:	2502      	movs	r5, #2
 800cc30:	e7ef      	b.n	800cc12 <_dtoa_r+0x36a>
 800cc32:	f018 0f01 	tst.w	r8, #1
 800cc36:	d008      	beq.n	800cc4a <_dtoa_r+0x3a2>
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cc40:	f7f3 fcda 	bl	80005f8 <__aeabi_dmul>
 800cc44:	3501      	adds	r5, #1
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc4e:	f109 0908 	add.w	r9, r9, #8
 800cc52:	e7e0      	b.n	800cc16 <_dtoa_r+0x36e>
 800cc54:	f000 809f 	beq.w	800cd96 <_dtoa_r+0x4ee>
 800cc58:	f1cb 0600 	rsb	r6, fp, #0
 800cc5c:	4ba1      	ldr	r3, [pc, #644]	; (800cee4 <_dtoa_r+0x63c>)
 800cc5e:	4fa2      	ldr	r7, [pc, #648]	; (800cee8 <_dtoa_r+0x640>)
 800cc60:	f006 020f 	and.w	r2, r6, #15
 800cc64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	f7f3 fcc2 	bl	80005f8 <__aeabi_dmul>
 800cc74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc78:	1136      	asrs	r6, r6, #4
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	2502      	movs	r5, #2
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	d17e      	bne.n	800cd80 <_dtoa_r+0x4d8>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1d0      	bne.n	800cc28 <_dtoa_r+0x380>
 800cc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 8084 	beq.w	800cd9a <_dtoa_r+0x4f2>
 800cc92:	4b96      	ldr	r3, [pc, #600]	; (800ceec <_dtoa_r+0x644>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	4640      	mov	r0, r8
 800cc98:	4649      	mov	r1, r9
 800cc9a:	f7f3 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d07b      	beq.n	800cd9a <_dtoa_r+0x4f2>
 800cca2:	9b04      	ldr	r3, [sp, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d078      	beq.n	800cd9a <_dtoa_r+0x4f2>
 800cca8:	9b01      	ldr	r3, [sp, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	dd39      	ble.n	800cd22 <_dtoa_r+0x47a>
 800ccae:	4b90      	ldr	r3, [pc, #576]	; (800cef0 <_dtoa_r+0x648>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccbe:	9e01      	ldr	r6, [sp, #4]
 800ccc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccca:	4628      	mov	r0, r5
 800cccc:	f7f3 fc2a 	bl	8000524 <__aeabi_i2d>
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	464b      	mov	r3, r9
 800ccd4:	f7f3 fc90 	bl	80005f8 <__aeabi_dmul>
 800ccd8:	4b86      	ldr	r3, [pc, #536]	; (800cef4 <_dtoa_r+0x64c>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7f3 fad6 	bl	800028c <__adddf3>
 800cce0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cce8:	9303      	str	r3, [sp, #12]
 800ccea:	2e00      	cmp	r6, #0
 800ccec:	d158      	bne.n	800cda0 <_dtoa_r+0x4f8>
 800ccee:	4b82      	ldr	r3, [pc, #520]	; (800cef8 <_dtoa_r+0x650>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	4649      	mov	r1, r9
 800ccf6:	f7f3 fac7 	bl	8000288 <__aeabi_dsub>
 800ccfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccfe:	4680      	mov	r8, r0
 800cd00:	4689      	mov	r9, r1
 800cd02:	f7f3 ff09 	bl	8000b18 <__aeabi_dcmpgt>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	f040 8296 	bne.w	800d238 <_dtoa_r+0x990>
 800cd0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cd10:	4640      	mov	r0, r8
 800cd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd16:	4649      	mov	r1, r9
 800cd18:	f7f3 fee0 	bl	8000adc <__aeabi_dcmplt>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	f040 8289 	bne.w	800d234 <_dtoa_r+0x98c>
 800cd22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f2c0 814e 	blt.w	800cfca <_dtoa_r+0x722>
 800cd2e:	f1bb 0f0e 	cmp.w	fp, #14
 800cd32:	f300 814a 	bgt.w	800cfca <_dtoa_r+0x722>
 800cd36:	4b6b      	ldr	r3, [pc, #428]	; (800cee4 <_dtoa_r+0x63c>)
 800cd38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f280 80dc 	bge.w	800cf00 <_dtoa_r+0x658>
 800cd48:	9b04      	ldr	r3, [sp, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f300 80d8 	bgt.w	800cf00 <_dtoa_r+0x658>
 800cd50:	f040 826f 	bne.w	800d232 <_dtoa_r+0x98a>
 800cd54:	4b68      	ldr	r3, [pc, #416]	; (800cef8 <_dtoa_r+0x650>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	4640      	mov	r0, r8
 800cd5a:	4649      	mov	r1, r9
 800cd5c:	f7f3 fc4c 	bl	80005f8 <__aeabi_dmul>
 800cd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd64:	f7f3 fece 	bl	8000b04 <__aeabi_dcmpge>
 800cd68:	9e04      	ldr	r6, [sp, #16]
 800cd6a:	4637      	mov	r7, r6
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f040 8245 	bne.w	800d1fc <_dtoa_r+0x954>
 800cd72:	9d00      	ldr	r5, [sp, #0]
 800cd74:	2331      	movs	r3, #49	; 0x31
 800cd76:	f805 3b01 	strb.w	r3, [r5], #1
 800cd7a:	f10b 0b01 	add.w	fp, fp, #1
 800cd7e:	e241      	b.n	800d204 <_dtoa_r+0x95c>
 800cd80:	07f2      	lsls	r2, r6, #31
 800cd82:	d505      	bpl.n	800cd90 <_dtoa_r+0x4e8>
 800cd84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd88:	f7f3 fc36 	bl	80005f8 <__aeabi_dmul>
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	2301      	movs	r3, #1
 800cd90:	1076      	asrs	r6, r6, #1
 800cd92:	3708      	adds	r7, #8
 800cd94:	e773      	b.n	800cc7e <_dtoa_r+0x3d6>
 800cd96:	2502      	movs	r5, #2
 800cd98:	e775      	b.n	800cc86 <_dtoa_r+0x3de>
 800cd9a:	9e04      	ldr	r6, [sp, #16]
 800cd9c:	465f      	mov	r7, fp
 800cd9e:	e792      	b.n	800ccc6 <_dtoa_r+0x41e>
 800cda0:	9900      	ldr	r1, [sp, #0]
 800cda2:	4b50      	ldr	r3, [pc, #320]	; (800cee4 <_dtoa_r+0x63c>)
 800cda4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cda8:	4431      	add	r1, r6
 800cdaa:	9102      	str	r1, [sp, #8]
 800cdac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdae:	eeb0 9a47 	vmov.f32	s18, s14
 800cdb2:	eef0 9a67 	vmov.f32	s19, s15
 800cdb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cdba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	d044      	beq.n	800ce4c <_dtoa_r+0x5a4>
 800cdc2:	494e      	ldr	r1, [pc, #312]	; (800cefc <_dtoa_r+0x654>)
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	f7f3 fd41 	bl	800084c <__aeabi_ddiv>
 800cdca:	ec53 2b19 	vmov	r2, r3, d9
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	9d00      	ldr	r5, [sp, #0]
 800cdd4:	ec41 0b19 	vmov	d9, r0, r1
 800cdd8:	4649      	mov	r1, r9
 800cdda:	4640      	mov	r0, r8
 800cddc:	f7f3 febc 	bl	8000b58 <__aeabi_d2iz>
 800cde0:	4606      	mov	r6, r0
 800cde2:	f7f3 fb9f 	bl	8000524 <__aeabi_i2d>
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	4640      	mov	r0, r8
 800cdec:	4649      	mov	r1, r9
 800cdee:	f7f3 fa4b 	bl	8000288 <__aeabi_dsub>
 800cdf2:	3630      	adds	r6, #48	; 0x30
 800cdf4:	f805 6b01 	strb.w	r6, [r5], #1
 800cdf8:	ec53 2b19 	vmov	r2, r3, d9
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	f7f3 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d164      	bne.n	800ced2 <_dtoa_r+0x62a>
 800ce08:	4642      	mov	r2, r8
 800ce0a:	464b      	mov	r3, r9
 800ce0c:	4937      	ldr	r1, [pc, #220]	; (800ceec <_dtoa_r+0x644>)
 800ce0e:	2000      	movs	r0, #0
 800ce10:	f7f3 fa3a 	bl	8000288 <__aeabi_dsub>
 800ce14:	ec53 2b19 	vmov	r2, r3, d9
 800ce18:	f7f3 fe60 	bl	8000adc <__aeabi_dcmplt>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	f040 80b6 	bne.w	800cf8e <_dtoa_r+0x6e6>
 800ce22:	9b02      	ldr	r3, [sp, #8]
 800ce24:	429d      	cmp	r5, r3
 800ce26:	f43f af7c 	beq.w	800cd22 <_dtoa_r+0x47a>
 800ce2a:	4b31      	ldr	r3, [pc, #196]	; (800cef0 <_dtoa_r+0x648>)
 800ce2c:	ec51 0b19 	vmov	r0, r1, d9
 800ce30:	2200      	movs	r2, #0
 800ce32:	f7f3 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ce36:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <_dtoa_r+0x648>)
 800ce38:	ec41 0b19 	vmov	d9, r0, r1
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4640      	mov	r0, r8
 800ce40:	4649      	mov	r1, r9
 800ce42:	f7f3 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ce46:	4680      	mov	r8, r0
 800ce48:	4689      	mov	r9, r1
 800ce4a:	e7c5      	b.n	800cdd8 <_dtoa_r+0x530>
 800ce4c:	ec51 0b17 	vmov	r0, r1, d7
 800ce50:	f7f3 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ce54:	9b02      	ldr	r3, [sp, #8]
 800ce56:	9d00      	ldr	r5, [sp, #0]
 800ce58:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce5a:	ec41 0b19 	vmov	d9, r0, r1
 800ce5e:	4649      	mov	r1, r9
 800ce60:	4640      	mov	r0, r8
 800ce62:	f7f3 fe79 	bl	8000b58 <__aeabi_d2iz>
 800ce66:	4606      	mov	r6, r0
 800ce68:	f7f3 fb5c 	bl	8000524 <__aeabi_i2d>
 800ce6c:	3630      	adds	r6, #48	; 0x30
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4640      	mov	r0, r8
 800ce74:	4649      	mov	r1, r9
 800ce76:	f7f3 fa07 	bl	8000288 <__aeabi_dsub>
 800ce7a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce7e:	9b02      	ldr	r3, [sp, #8]
 800ce80:	429d      	cmp	r5, r3
 800ce82:	4680      	mov	r8, r0
 800ce84:	4689      	mov	r9, r1
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	d124      	bne.n	800ced6 <_dtoa_r+0x62e>
 800ce8c:	4b1b      	ldr	r3, [pc, #108]	; (800cefc <_dtoa_r+0x654>)
 800ce8e:	ec51 0b19 	vmov	r0, r1, d9
 800ce92:	f7f3 f9fb 	bl	800028c <__adddf3>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	f7f3 fe3b 	bl	8000b18 <__aeabi_dcmpgt>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d173      	bne.n	800cf8e <_dtoa_r+0x6e6>
 800cea6:	ec53 2b19 	vmov	r2, r3, d9
 800ceaa:	4914      	ldr	r1, [pc, #80]	; (800cefc <_dtoa_r+0x654>)
 800ceac:	2000      	movs	r0, #0
 800ceae:	f7f3 f9eb 	bl	8000288 <__aeabi_dsub>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 fe0f 	bl	8000adc <__aeabi_dcmplt>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	f43f af2f 	beq.w	800cd22 <_dtoa_r+0x47a>
 800cec4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cec6:	1e6b      	subs	r3, r5, #1
 800cec8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cece:	2b30      	cmp	r3, #48	; 0x30
 800ced0:	d0f8      	beq.n	800cec4 <_dtoa_r+0x61c>
 800ced2:	46bb      	mov	fp, r7
 800ced4:	e04a      	b.n	800cf6c <_dtoa_r+0x6c4>
 800ced6:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <_dtoa_r+0x648>)
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	4680      	mov	r8, r0
 800cede:	4689      	mov	r9, r1
 800cee0:	e7bd      	b.n	800ce5e <_dtoa_r+0x5b6>
 800cee2:	bf00      	nop
 800cee4:	0800f670 	.word	0x0800f670
 800cee8:	0800f648 	.word	0x0800f648
 800ceec:	3ff00000 	.word	0x3ff00000
 800cef0:	40240000 	.word	0x40240000
 800cef4:	401c0000 	.word	0x401c0000
 800cef8:	40140000 	.word	0x40140000
 800cefc:	3fe00000 	.word	0x3fe00000
 800cf00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cf04:	9d00      	ldr	r5, [sp, #0]
 800cf06:	4642      	mov	r2, r8
 800cf08:	464b      	mov	r3, r9
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	f7f3 fc9d 	bl	800084c <__aeabi_ddiv>
 800cf12:	f7f3 fe21 	bl	8000b58 <__aeabi_d2iz>
 800cf16:	9001      	str	r0, [sp, #4]
 800cf18:	f7f3 fb04 	bl	8000524 <__aeabi_i2d>
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	464b      	mov	r3, r9
 800cf20:	f7f3 fb6a 	bl	80005f8 <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4630      	mov	r0, r6
 800cf2a:	4639      	mov	r1, r7
 800cf2c:	f7f3 f9ac 	bl	8000288 <__aeabi_dsub>
 800cf30:	9e01      	ldr	r6, [sp, #4]
 800cf32:	9f04      	ldr	r7, [sp, #16]
 800cf34:	3630      	adds	r6, #48	; 0x30
 800cf36:	f805 6b01 	strb.w	r6, [r5], #1
 800cf3a:	9e00      	ldr	r6, [sp, #0]
 800cf3c:	1bae      	subs	r6, r5, r6
 800cf3e:	42b7      	cmp	r7, r6
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	d134      	bne.n	800cfb0 <_dtoa_r+0x708>
 800cf46:	f7f3 f9a1 	bl	800028c <__adddf3>
 800cf4a:	4642      	mov	r2, r8
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	4606      	mov	r6, r0
 800cf50:	460f      	mov	r7, r1
 800cf52:	f7f3 fde1 	bl	8000b18 <__aeabi_dcmpgt>
 800cf56:	b9c8      	cbnz	r0, 800cf8c <_dtoa_r+0x6e4>
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	4639      	mov	r1, r7
 800cf60:	f7f3 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf64:	b110      	cbz	r0, 800cf6c <_dtoa_r+0x6c4>
 800cf66:	9b01      	ldr	r3, [sp, #4]
 800cf68:	07db      	lsls	r3, r3, #31
 800cf6a:	d40f      	bmi.n	800cf8c <_dtoa_r+0x6e4>
 800cf6c:	4651      	mov	r1, sl
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 fbcc 	bl	800d70c <_Bfree>
 800cf74:	2300      	movs	r3, #0
 800cf76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf78:	702b      	strb	r3, [r5, #0]
 800cf7a:	f10b 0301 	add.w	r3, fp, #1
 800cf7e:	6013      	str	r3, [r2, #0]
 800cf80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f43f ace2 	beq.w	800c94c <_dtoa_r+0xa4>
 800cf88:	601d      	str	r5, [r3, #0]
 800cf8a:	e4df      	b.n	800c94c <_dtoa_r+0xa4>
 800cf8c:	465f      	mov	r7, fp
 800cf8e:	462b      	mov	r3, r5
 800cf90:	461d      	mov	r5, r3
 800cf92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf96:	2a39      	cmp	r2, #57	; 0x39
 800cf98:	d106      	bne.n	800cfa8 <_dtoa_r+0x700>
 800cf9a:	9a00      	ldr	r2, [sp, #0]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d1f7      	bne.n	800cf90 <_dtoa_r+0x6e8>
 800cfa0:	9900      	ldr	r1, [sp, #0]
 800cfa2:	2230      	movs	r2, #48	; 0x30
 800cfa4:	3701      	adds	r7, #1
 800cfa6:	700a      	strb	r2, [r1, #0]
 800cfa8:	781a      	ldrb	r2, [r3, #0]
 800cfaa:	3201      	adds	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	e790      	b.n	800ced2 <_dtoa_r+0x62a>
 800cfb0:	4ba3      	ldr	r3, [pc, #652]	; (800d240 <_dtoa_r+0x998>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f7f3 fb20 	bl	80005f8 <__aeabi_dmul>
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2300      	movs	r3, #0
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	f7f3 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d09e      	beq.n	800cf06 <_dtoa_r+0x65e>
 800cfc8:	e7d0      	b.n	800cf6c <_dtoa_r+0x6c4>
 800cfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfcc:	2a00      	cmp	r2, #0
 800cfce:	f000 80ca 	beq.w	800d166 <_dtoa_r+0x8be>
 800cfd2:	9a07      	ldr	r2, [sp, #28]
 800cfd4:	2a01      	cmp	r2, #1
 800cfd6:	f300 80ad 	bgt.w	800d134 <_dtoa_r+0x88c>
 800cfda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfdc:	2a00      	cmp	r2, #0
 800cfde:	f000 80a5 	beq.w	800d12c <_dtoa_r+0x884>
 800cfe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cfe6:	9e08      	ldr	r6, [sp, #32]
 800cfe8:	9d05      	ldr	r5, [sp, #20]
 800cfea:	9a05      	ldr	r2, [sp, #20]
 800cfec:	441a      	add	r2, r3
 800cfee:	9205      	str	r2, [sp, #20]
 800cff0:	9a06      	ldr	r2, [sp, #24]
 800cff2:	2101      	movs	r1, #1
 800cff4:	441a      	add	r2, r3
 800cff6:	4620      	mov	r0, r4
 800cff8:	9206      	str	r2, [sp, #24]
 800cffa:	f000 fc3d 	bl	800d878 <__i2b>
 800cffe:	4607      	mov	r7, r0
 800d000:	b165      	cbz	r5, 800d01c <_dtoa_r+0x774>
 800d002:	9b06      	ldr	r3, [sp, #24]
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd09      	ble.n	800d01c <_dtoa_r+0x774>
 800d008:	42ab      	cmp	r3, r5
 800d00a:	9a05      	ldr	r2, [sp, #20]
 800d00c:	bfa8      	it	ge
 800d00e:	462b      	movge	r3, r5
 800d010:	1ad2      	subs	r2, r2, r3
 800d012:	9205      	str	r2, [sp, #20]
 800d014:	9a06      	ldr	r2, [sp, #24]
 800d016:	1aed      	subs	r5, r5, r3
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	9306      	str	r3, [sp, #24]
 800d01c:	9b08      	ldr	r3, [sp, #32]
 800d01e:	b1f3      	cbz	r3, 800d05e <_dtoa_r+0x7b6>
 800d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80a3 	beq.w	800d16e <_dtoa_r+0x8c6>
 800d028:	2e00      	cmp	r6, #0
 800d02a:	dd10      	ble.n	800d04e <_dtoa_r+0x7a6>
 800d02c:	4639      	mov	r1, r7
 800d02e:	4632      	mov	r2, r6
 800d030:	4620      	mov	r0, r4
 800d032:	f000 fce1 	bl	800d9f8 <__pow5mult>
 800d036:	4652      	mov	r2, sl
 800d038:	4601      	mov	r1, r0
 800d03a:	4607      	mov	r7, r0
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fc31 	bl	800d8a4 <__multiply>
 800d042:	4651      	mov	r1, sl
 800d044:	4680      	mov	r8, r0
 800d046:	4620      	mov	r0, r4
 800d048:	f000 fb60 	bl	800d70c <_Bfree>
 800d04c:	46c2      	mov	sl, r8
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	1b9a      	subs	r2, r3, r6
 800d052:	d004      	beq.n	800d05e <_dtoa_r+0x7b6>
 800d054:	4651      	mov	r1, sl
 800d056:	4620      	mov	r0, r4
 800d058:	f000 fcce 	bl	800d9f8 <__pow5mult>
 800d05c:	4682      	mov	sl, r0
 800d05e:	2101      	movs	r1, #1
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fc09 	bl	800d878 <__i2b>
 800d066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d068:	2b00      	cmp	r3, #0
 800d06a:	4606      	mov	r6, r0
 800d06c:	f340 8081 	ble.w	800d172 <_dtoa_r+0x8ca>
 800d070:	461a      	mov	r2, r3
 800d072:	4601      	mov	r1, r0
 800d074:	4620      	mov	r0, r4
 800d076:	f000 fcbf 	bl	800d9f8 <__pow5mult>
 800d07a:	9b07      	ldr	r3, [sp, #28]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	4606      	mov	r6, r0
 800d080:	dd7a      	ble.n	800d178 <_dtoa_r+0x8d0>
 800d082:	f04f 0800 	mov.w	r8, #0
 800d086:	6933      	ldr	r3, [r6, #16]
 800d088:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d08c:	6918      	ldr	r0, [r3, #16]
 800d08e:	f000 fba5 	bl	800d7dc <__hi0bits>
 800d092:	f1c0 0020 	rsb	r0, r0, #32
 800d096:	9b06      	ldr	r3, [sp, #24]
 800d098:	4418      	add	r0, r3
 800d09a:	f010 001f 	ands.w	r0, r0, #31
 800d09e:	f000 8094 	beq.w	800d1ca <_dtoa_r+0x922>
 800d0a2:	f1c0 0320 	rsb	r3, r0, #32
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	f340 8085 	ble.w	800d1b6 <_dtoa_r+0x90e>
 800d0ac:	9b05      	ldr	r3, [sp, #20]
 800d0ae:	f1c0 001c 	rsb	r0, r0, #28
 800d0b2:	4403      	add	r3, r0
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	9b06      	ldr	r3, [sp, #24]
 800d0b8:	4403      	add	r3, r0
 800d0ba:	4405      	add	r5, r0
 800d0bc:	9306      	str	r3, [sp, #24]
 800d0be:	9b05      	ldr	r3, [sp, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	dd05      	ble.n	800d0d0 <_dtoa_r+0x828>
 800d0c4:	4651      	mov	r1, sl
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fcef 	bl	800daac <__lshift>
 800d0ce:	4682      	mov	sl, r0
 800d0d0:	9b06      	ldr	r3, [sp, #24]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd05      	ble.n	800d0e2 <_dtoa_r+0x83a>
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 fce6 	bl	800daac <__lshift>
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d072      	beq.n	800d1ce <_dtoa_r+0x926>
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	f000 fd4a 	bl	800db84 <__mcmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	da6c      	bge.n	800d1ce <_dtoa_r+0x926>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4651      	mov	r1, sl
 800d0f8:	220a      	movs	r2, #10
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 fb28 	bl	800d750 <__multadd>
 800d100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d102:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d106:	4682      	mov	sl, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 81b0 	beq.w	800d46e <_dtoa_r+0xbc6>
 800d10e:	2300      	movs	r3, #0
 800d110:	4639      	mov	r1, r7
 800d112:	220a      	movs	r2, #10
 800d114:	4620      	mov	r0, r4
 800d116:	f000 fb1b 	bl	800d750 <__multadd>
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	4607      	mov	r7, r0
 800d120:	f300 8096 	bgt.w	800d250 <_dtoa_r+0x9a8>
 800d124:	9b07      	ldr	r3, [sp, #28]
 800d126:	2b02      	cmp	r3, #2
 800d128:	dc59      	bgt.n	800d1de <_dtoa_r+0x936>
 800d12a:	e091      	b.n	800d250 <_dtoa_r+0x9a8>
 800d12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d12e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d132:	e758      	b.n	800cfe6 <_dtoa_r+0x73e>
 800d134:	9b04      	ldr	r3, [sp, #16]
 800d136:	1e5e      	subs	r6, r3, #1
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	42b3      	cmp	r3, r6
 800d13c:	bfbf      	itttt	lt
 800d13e:	9b08      	ldrlt	r3, [sp, #32]
 800d140:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d142:	9608      	strlt	r6, [sp, #32]
 800d144:	1af3      	sublt	r3, r6, r3
 800d146:	bfb4      	ite	lt
 800d148:	18d2      	addlt	r2, r2, r3
 800d14a:	1b9e      	subge	r6, r3, r6
 800d14c:	9b04      	ldr	r3, [sp, #16]
 800d14e:	bfbc      	itt	lt
 800d150:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d152:	2600      	movlt	r6, #0
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfb7      	itett	lt
 800d158:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d15c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d160:	1a9d      	sublt	r5, r3, r2
 800d162:	2300      	movlt	r3, #0
 800d164:	e741      	b.n	800cfea <_dtoa_r+0x742>
 800d166:	9e08      	ldr	r6, [sp, #32]
 800d168:	9d05      	ldr	r5, [sp, #20]
 800d16a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d16c:	e748      	b.n	800d000 <_dtoa_r+0x758>
 800d16e:	9a08      	ldr	r2, [sp, #32]
 800d170:	e770      	b.n	800d054 <_dtoa_r+0x7ac>
 800d172:	9b07      	ldr	r3, [sp, #28]
 800d174:	2b01      	cmp	r3, #1
 800d176:	dc19      	bgt.n	800d1ac <_dtoa_r+0x904>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	b9bb      	cbnz	r3, 800d1ac <_dtoa_r+0x904>
 800d17c:	9b03      	ldr	r3, [sp, #12]
 800d17e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d182:	b99b      	cbnz	r3, 800d1ac <_dtoa_r+0x904>
 800d184:	9b03      	ldr	r3, [sp, #12]
 800d186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d18a:	0d1b      	lsrs	r3, r3, #20
 800d18c:	051b      	lsls	r3, r3, #20
 800d18e:	b183      	cbz	r3, 800d1b2 <_dtoa_r+0x90a>
 800d190:	9b05      	ldr	r3, [sp, #20]
 800d192:	3301      	adds	r3, #1
 800d194:	9305      	str	r3, [sp, #20]
 800d196:	9b06      	ldr	r3, [sp, #24]
 800d198:	3301      	adds	r3, #1
 800d19a:	9306      	str	r3, [sp, #24]
 800d19c:	f04f 0801 	mov.w	r8, #1
 800d1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f47f af6f 	bne.w	800d086 <_dtoa_r+0x7de>
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	e774      	b.n	800d096 <_dtoa_r+0x7ee>
 800d1ac:	f04f 0800 	mov.w	r8, #0
 800d1b0:	e7f6      	b.n	800d1a0 <_dtoa_r+0x8f8>
 800d1b2:	4698      	mov	r8, r3
 800d1b4:	e7f4      	b.n	800d1a0 <_dtoa_r+0x8f8>
 800d1b6:	d082      	beq.n	800d0be <_dtoa_r+0x816>
 800d1b8:	9a05      	ldr	r2, [sp, #20]
 800d1ba:	331c      	adds	r3, #28
 800d1bc:	441a      	add	r2, r3
 800d1be:	9205      	str	r2, [sp, #20]
 800d1c0:	9a06      	ldr	r2, [sp, #24]
 800d1c2:	441a      	add	r2, r3
 800d1c4:	441d      	add	r5, r3
 800d1c6:	9206      	str	r2, [sp, #24]
 800d1c8:	e779      	b.n	800d0be <_dtoa_r+0x816>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	e7f4      	b.n	800d1b8 <_dtoa_r+0x910>
 800d1ce:	9b04      	ldr	r3, [sp, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dc37      	bgt.n	800d244 <_dtoa_r+0x99c>
 800d1d4:	9b07      	ldr	r3, [sp, #28]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	dd34      	ble.n	800d244 <_dtoa_r+0x99c>
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	b963      	cbnz	r3, 800d1fc <_dtoa_r+0x954>
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	2205      	movs	r2, #5
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f000 fab2 	bl	800d750 <__multadd>
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	f000 fcc7 	bl	800db84 <__mcmp>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f73f adbb 	bgt.w	800cd72 <_dtoa_r+0x4ca>
 800d1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fe:	9d00      	ldr	r5, [sp, #0]
 800d200:	ea6f 0b03 	mvn.w	fp, r3
 800d204:	f04f 0800 	mov.w	r8, #0
 800d208:	4631      	mov	r1, r6
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 fa7e 	bl	800d70c <_Bfree>
 800d210:	2f00      	cmp	r7, #0
 800d212:	f43f aeab 	beq.w	800cf6c <_dtoa_r+0x6c4>
 800d216:	f1b8 0f00 	cmp.w	r8, #0
 800d21a:	d005      	beq.n	800d228 <_dtoa_r+0x980>
 800d21c:	45b8      	cmp	r8, r7
 800d21e:	d003      	beq.n	800d228 <_dtoa_r+0x980>
 800d220:	4641      	mov	r1, r8
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fa72 	bl	800d70c <_Bfree>
 800d228:	4639      	mov	r1, r7
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 fa6e 	bl	800d70c <_Bfree>
 800d230:	e69c      	b.n	800cf6c <_dtoa_r+0x6c4>
 800d232:	2600      	movs	r6, #0
 800d234:	4637      	mov	r7, r6
 800d236:	e7e1      	b.n	800d1fc <_dtoa_r+0x954>
 800d238:	46bb      	mov	fp, r7
 800d23a:	4637      	mov	r7, r6
 800d23c:	e599      	b.n	800cd72 <_dtoa_r+0x4ca>
 800d23e:	bf00      	nop
 800d240:	40240000 	.word	0x40240000
 800d244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d246:	2b00      	cmp	r3, #0
 800d248:	f000 80c8 	beq.w	800d3dc <_dtoa_r+0xb34>
 800d24c:	9b04      	ldr	r3, [sp, #16]
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	2d00      	cmp	r5, #0
 800d252:	dd05      	ble.n	800d260 <_dtoa_r+0x9b8>
 800d254:	4639      	mov	r1, r7
 800d256:	462a      	mov	r2, r5
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 fc27 	bl	800daac <__lshift>
 800d25e:	4607      	mov	r7, r0
 800d260:	f1b8 0f00 	cmp.w	r8, #0
 800d264:	d05b      	beq.n	800d31e <_dtoa_r+0xa76>
 800d266:	6879      	ldr	r1, [r7, #4]
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fa0f 	bl	800d68c <_Balloc>
 800d26e:	4605      	mov	r5, r0
 800d270:	b928      	cbnz	r0, 800d27e <_dtoa_r+0x9d6>
 800d272:	4b83      	ldr	r3, [pc, #524]	; (800d480 <_dtoa_r+0xbd8>)
 800d274:	4602      	mov	r2, r0
 800d276:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d27a:	f7ff bb2e 	b.w	800c8da <_dtoa_r+0x32>
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	3202      	adds	r2, #2
 800d282:	0092      	lsls	r2, r2, #2
 800d284:	f107 010c 	add.w	r1, r7, #12
 800d288:	300c      	adds	r0, #12
 800d28a:	f7ff fa77 	bl	800c77c <memcpy>
 800d28e:	2201      	movs	r2, #1
 800d290:	4629      	mov	r1, r5
 800d292:	4620      	mov	r0, r4
 800d294:	f000 fc0a 	bl	800daac <__lshift>
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	9304      	str	r3, [sp, #16]
 800d29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	9308      	str	r3, [sp, #32]
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	46b8      	mov	r8, r7
 800d2ae:	9306      	str	r3, [sp, #24]
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	9b04      	ldr	r3, [sp, #16]
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	f7ff fa6c 	bl	800c798 <quorem>
 800d2c0:	4641      	mov	r1, r8
 800d2c2:	9002      	str	r0, [sp, #8]
 800d2c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d2c8:	4650      	mov	r0, sl
 800d2ca:	f000 fc5b 	bl	800db84 <__mcmp>
 800d2ce:	463a      	mov	r2, r7
 800d2d0:	9005      	str	r0, [sp, #20]
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fc71 	bl	800dbbc <__mdiff>
 800d2da:	68c2      	ldr	r2, [r0, #12]
 800d2dc:	4605      	mov	r5, r0
 800d2de:	bb02      	cbnz	r2, 800d322 <_dtoa_r+0xa7a>
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f000 fc4e 	bl	800db84 <__mcmp>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f0:	f000 fa0c 	bl	800d70c <_Bfree>
 800d2f4:	9b07      	ldr	r3, [sp, #28]
 800d2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f8:	9d04      	ldr	r5, [sp, #16]
 800d2fa:	ea43 0102 	orr.w	r1, r3, r2
 800d2fe:	9b06      	ldr	r3, [sp, #24]
 800d300:	4319      	orrs	r1, r3
 800d302:	d110      	bne.n	800d326 <_dtoa_r+0xa7e>
 800d304:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d308:	d029      	beq.n	800d35e <_dtoa_r+0xab6>
 800d30a:	9b05      	ldr	r3, [sp, #20]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dd02      	ble.n	800d316 <_dtoa_r+0xa6e>
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	f883 9000 	strb.w	r9, [r3]
 800d31c:	e774      	b.n	800d208 <_dtoa_r+0x960>
 800d31e:	4638      	mov	r0, r7
 800d320:	e7ba      	b.n	800d298 <_dtoa_r+0x9f0>
 800d322:	2201      	movs	r2, #1
 800d324:	e7e1      	b.n	800d2ea <_dtoa_r+0xa42>
 800d326:	9b05      	ldr	r3, [sp, #20]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	db04      	blt.n	800d336 <_dtoa_r+0xa8e>
 800d32c:	9907      	ldr	r1, [sp, #28]
 800d32e:	430b      	orrs	r3, r1
 800d330:	9906      	ldr	r1, [sp, #24]
 800d332:	430b      	orrs	r3, r1
 800d334:	d120      	bne.n	800d378 <_dtoa_r+0xad0>
 800d336:	2a00      	cmp	r2, #0
 800d338:	dded      	ble.n	800d316 <_dtoa_r+0xa6e>
 800d33a:	4651      	mov	r1, sl
 800d33c:	2201      	movs	r2, #1
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 fbb4 	bl	800daac <__lshift>
 800d344:	4631      	mov	r1, r6
 800d346:	4682      	mov	sl, r0
 800d348:	f000 fc1c 	bl	800db84 <__mcmp>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	dc03      	bgt.n	800d358 <_dtoa_r+0xab0>
 800d350:	d1e1      	bne.n	800d316 <_dtoa_r+0xa6e>
 800d352:	f019 0f01 	tst.w	r9, #1
 800d356:	d0de      	beq.n	800d316 <_dtoa_r+0xa6e>
 800d358:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d35c:	d1d8      	bne.n	800d310 <_dtoa_r+0xa68>
 800d35e:	9a01      	ldr	r2, [sp, #4]
 800d360:	2339      	movs	r3, #57	; 0x39
 800d362:	7013      	strb	r3, [r2, #0]
 800d364:	462b      	mov	r3, r5
 800d366:	461d      	mov	r5, r3
 800d368:	3b01      	subs	r3, #1
 800d36a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d36e:	2a39      	cmp	r2, #57	; 0x39
 800d370:	d06c      	beq.n	800d44c <_dtoa_r+0xba4>
 800d372:	3201      	adds	r2, #1
 800d374:	701a      	strb	r2, [r3, #0]
 800d376:	e747      	b.n	800d208 <_dtoa_r+0x960>
 800d378:	2a00      	cmp	r2, #0
 800d37a:	dd07      	ble.n	800d38c <_dtoa_r+0xae4>
 800d37c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d380:	d0ed      	beq.n	800d35e <_dtoa_r+0xab6>
 800d382:	9a01      	ldr	r2, [sp, #4]
 800d384:	f109 0301 	add.w	r3, r9, #1
 800d388:	7013      	strb	r3, [r2, #0]
 800d38a:	e73d      	b.n	800d208 <_dtoa_r+0x960>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	9a08      	ldr	r2, [sp, #32]
 800d390:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d394:	4293      	cmp	r3, r2
 800d396:	d043      	beq.n	800d420 <_dtoa_r+0xb78>
 800d398:	4651      	mov	r1, sl
 800d39a:	2300      	movs	r3, #0
 800d39c:	220a      	movs	r2, #10
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 f9d6 	bl	800d750 <__multadd>
 800d3a4:	45b8      	cmp	r8, r7
 800d3a6:	4682      	mov	sl, r0
 800d3a8:	f04f 0300 	mov.w	r3, #0
 800d3ac:	f04f 020a 	mov.w	r2, #10
 800d3b0:	4641      	mov	r1, r8
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	d107      	bne.n	800d3c6 <_dtoa_r+0xb1e>
 800d3b6:	f000 f9cb 	bl	800d750 <__multadd>
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	4607      	mov	r7, r0
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	9304      	str	r3, [sp, #16]
 800d3c4:	e775      	b.n	800d2b2 <_dtoa_r+0xa0a>
 800d3c6:	f000 f9c3 	bl	800d750 <__multadd>
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	4680      	mov	r8, r0
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	220a      	movs	r2, #10
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f9bc 	bl	800d750 <__multadd>
 800d3d8:	4607      	mov	r7, r0
 800d3da:	e7f0      	b.n	800d3be <_dtoa_r+0xb16>
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	9d00      	ldr	r5, [sp, #0]
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4650      	mov	r0, sl
 800d3e6:	f7ff f9d7 	bl	800c798 <quorem>
 800d3ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	f805 9b01 	strb.w	r9, [r5], #1
 800d3f4:	1aea      	subs	r2, r5, r3
 800d3f6:	9b01      	ldr	r3, [sp, #4]
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	dd07      	ble.n	800d40c <_dtoa_r+0xb64>
 800d3fc:	4651      	mov	r1, sl
 800d3fe:	2300      	movs	r3, #0
 800d400:	220a      	movs	r2, #10
 800d402:	4620      	mov	r0, r4
 800d404:	f000 f9a4 	bl	800d750 <__multadd>
 800d408:	4682      	mov	sl, r0
 800d40a:	e7ea      	b.n	800d3e2 <_dtoa_r+0xb3a>
 800d40c:	9b01      	ldr	r3, [sp, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bfc8      	it	gt
 800d412:	461d      	movgt	r5, r3
 800d414:	9b00      	ldr	r3, [sp, #0]
 800d416:	bfd8      	it	le
 800d418:	2501      	movle	r5, #1
 800d41a:	441d      	add	r5, r3
 800d41c:	f04f 0800 	mov.w	r8, #0
 800d420:	4651      	mov	r1, sl
 800d422:	2201      	movs	r2, #1
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fb41 	bl	800daac <__lshift>
 800d42a:	4631      	mov	r1, r6
 800d42c:	4682      	mov	sl, r0
 800d42e:	f000 fba9 	bl	800db84 <__mcmp>
 800d432:	2800      	cmp	r0, #0
 800d434:	dc96      	bgt.n	800d364 <_dtoa_r+0xabc>
 800d436:	d102      	bne.n	800d43e <_dtoa_r+0xb96>
 800d438:	f019 0f01 	tst.w	r9, #1
 800d43c:	d192      	bne.n	800d364 <_dtoa_r+0xabc>
 800d43e:	462b      	mov	r3, r5
 800d440:	461d      	mov	r5, r3
 800d442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d446:	2a30      	cmp	r2, #48	; 0x30
 800d448:	d0fa      	beq.n	800d440 <_dtoa_r+0xb98>
 800d44a:	e6dd      	b.n	800d208 <_dtoa_r+0x960>
 800d44c:	9a00      	ldr	r2, [sp, #0]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d189      	bne.n	800d366 <_dtoa_r+0xabe>
 800d452:	f10b 0b01 	add.w	fp, fp, #1
 800d456:	2331      	movs	r3, #49	; 0x31
 800d458:	e796      	b.n	800d388 <_dtoa_r+0xae0>
 800d45a:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <_dtoa_r+0xbdc>)
 800d45c:	f7ff ba99 	b.w	800c992 <_dtoa_r+0xea>
 800d460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d462:	2b00      	cmp	r3, #0
 800d464:	f47f aa6d 	bne.w	800c942 <_dtoa_r+0x9a>
 800d468:	4b07      	ldr	r3, [pc, #28]	; (800d488 <_dtoa_r+0xbe0>)
 800d46a:	f7ff ba92 	b.w	800c992 <_dtoa_r+0xea>
 800d46e:	9b01      	ldr	r3, [sp, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	dcb5      	bgt.n	800d3e0 <_dtoa_r+0xb38>
 800d474:	9b07      	ldr	r3, [sp, #28]
 800d476:	2b02      	cmp	r3, #2
 800d478:	f73f aeb1 	bgt.w	800d1de <_dtoa_r+0x936>
 800d47c:	e7b0      	b.n	800d3e0 <_dtoa_r+0xb38>
 800d47e:	bf00      	nop
 800d480:	0800f5dc 	.word	0x0800f5dc
 800d484:	0800f53c 	.word	0x0800f53c
 800d488:	0800f560 	.word	0x0800f560

0800d48c <_free_r>:
 800d48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d48e:	2900      	cmp	r1, #0
 800d490:	d044      	beq.n	800d51c <_free_r+0x90>
 800d492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d496:	9001      	str	r0, [sp, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f1a1 0404 	sub.w	r4, r1, #4
 800d49e:	bfb8      	it	lt
 800d4a0:	18e4      	addlt	r4, r4, r3
 800d4a2:	f000 f8e7 	bl	800d674 <__malloc_lock>
 800d4a6:	4a1e      	ldr	r2, [pc, #120]	; (800d520 <_free_r+0x94>)
 800d4a8:	9801      	ldr	r0, [sp, #4]
 800d4aa:	6813      	ldr	r3, [r2, #0]
 800d4ac:	b933      	cbnz	r3, 800d4bc <_free_r+0x30>
 800d4ae:	6063      	str	r3, [r4, #4]
 800d4b0:	6014      	str	r4, [r2, #0]
 800d4b2:	b003      	add	sp, #12
 800d4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4b8:	f000 b8e2 	b.w	800d680 <__malloc_unlock>
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	d908      	bls.n	800d4d2 <_free_r+0x46>
 800d4c0:	6825      	ldr	r5, [r4, #0]
 800d4c2:	1961      	adds	r1, r4, r5
 800d4c4:	428b      	cmp	r3, r1
 800d4c6:	bf01      	itttt	eq
 800d4c8:	6819      	ldreq	r1, [r3, #0]
 800d4ca:	685b      	ldreq	r3, [r3, #4]
 800d4cc:	1949      	addeq	r1, r1, r5
 800d4ce:	6021      	streq	r1, [r4, #0]
 800d4d0:	e7ed      	b.n	800d4ae <_free_r+0x22>
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	b10b      	cbz	r3, 800d4dc <_free_r+0x50>
 800d4d8:	42a3      	cmp	r3, r4
 800d4da:	d9fa      	bls.n	800d4d2 <_free_r+0x46>
 800d4dc:	6811      	ldr	r1, [r2, #0]
 800d4de:	1855      	adds	r5, r2, r1
 800d4e0:	42a5      	cmp	r5, r4
 800d4e2:	d10b      	bne.n	800d4fc <_free_r+0x70>
 800d4e4:	6824      	ldr	r4, [r4, #0]
 800d4e6:	4421      	add	r1, r4
 800d4e8:	1854      	adds	r4, r2, r1
 800d4ea:	42a3      	cmp	r3, r4
 800d4ec:	6011      	str	r1, [r2, #0]
 800d4ee:	d1e0      	bne.n	800d4b2 <_free_r+0x26>
 800d4f0:	681c      	ldr	r4, [r3, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	6053      	str	r3, [r2, #4]
 800d4f6:	440c      	add	r4, r1
 800d4f8:	6014      	str	r4, [r2, #0]
 800d4fa:	e7da      	b.n	800d4b2 <_free_r+0x26>
 800d4fc:	d902      	bls.n	800d504 <_free_r+0x78>
 800d4fe:	230c      	movs	r3, #12
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	e7d6      	b.n	800d4b2 <_free_r+0x26>
 800d504:	6825      	ldr	r5, [r4, #0]
 800d506:	1961      	adds	r1, r4, r5
 800d508:	428b      	cmp	r3, r1
 800d50a:	bf04      	itt	eq
 800d50c:	6819      	ldreq	r1, [r3, #0]
 800d50e:	685b      	ldreq	r3, [r3, #4]
 800d510:	6063      	str	r3, [r4, #4]
 800d512:	bf04      	itt	eq
 800d514:	1949      	addeq	r1, r1, r5
 800d516:	6021      	streq	r1, [r4, #0]
 800d518:	6054      	str	r4, [r2, #4]
 800d51a:	e7ca      	b.n	800d4b2 <_free_r+0x26>
 800d51c:	b003      	add	sp, #12
 800d51e:	bd30      	pop	{r4, r5, pc}
 800d520:	20005404 	.word	0x20005404

0800d524 <malloc>:
 800d524:	4b02      	ldr	r3, [pc, #8]	; (800d530 <malloc+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f000 b823 	b.w	800d574 <_malloc_r>
 800d52e:	bf00      	nop
 800d530:	20000094 	.word	0x20000094

0800d534 <sbrk_aligned>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	4e0e      	ldr	r6, [pc, #56]	; (800d570 <sbrk_aligned+0x3c>)
 800d538:	460c      	mov	r4, r1
 800d53a:	6831      	ldr	r1, [r6, #0]
 800d53c:	4605      	mov	r5, r0
 800d53e:	b911      	cbnz	r1, 800d546 <sbrk_aligned+0x12>
 800d540:	f000 fe40 	bl	800e1c4 <_sbrk_r>
 800d544:	6030      	str	r0, [r6, #0]
 800d546:	4621      	mov	r1, r4
 800d548:	4628      	mov	r0, r5
 800d54a:	f000 fe3b 	bl	800e1c4 <_sbrk_r>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d00a      	beq.n	800d568 <sbrk_aligned+0x34>
 800d552:	1cc4      	adds	r4, r0, #3
 800d554:	f024 0403 	bic.w	r4, r4, #3
 800d558:	42a0      	cmp	r0, r4
 800d55a:	d007      	beq.n	800d56c <sbrk_aligned+0x38>
 800d55c:	1a21      	subs	r1, r4, r0
 800d55e:	4628      	mov	r0, r5
 800d560:	f000 fe30 	bl	800e1c4 <_sbrk_r>
 800d564:	3001      	adds	r0, #1
 800d566:	d101      	bne.n	800d56c <sbrk_aligned+0x38>
 800d568:	f04f 34ff 	mov.w	r4, #4294967295
 800d56c:	4620      	mov	r0, r4
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	20005408 	.word	0x20005408

0800d574 <_malloc_r>:
 800d574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d578:	1ccd      	adds	r5, r1, #3
 800d57a:	f025 0503 	bic.w	r5, r5, #3
 800d57e:	3508      	adds	r5, #8
 800d580:	2d0c      	cmp	r5, #12
 800d582:	bf38      	it	cc
 800d584:	250c      	movcc	r5, #12
 800d586:	2d00      	cmp	r5, #0
 800d588:	4607      	mov	r7, r0
 800d58a:	db01      	blt.n	800d590 <_malloc_r+0x1c>
 800d58c:	42a9      	cmp	r1, r5
 800d58e:	d905      	bls.n	800d59c <_malloc_r+0x28>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	2600      	movs	r6, #0
 800d596:	4630      	mov	r0, r6
 800d598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d670 <_malloc_r+0xfc>
 800d5a0:	f000 f868 	bl	800d674 <__malloc_lock>
 800d5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a8:	461c      	mov	r4, r3
 800d5aa:	bb5c      	cbnz	r4, 800d604 <_malloc_r+0x90>
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4638      	mov	r0, r7
 800d5b0:	f7ff ffc0 	bl	800d534 <sbrk_aligned>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	d155      	bne.n	800d666 <_malloc_r+0xf2>
 800d5ba:	f8d8 4000 	ldr.w	r4, [r8]
 800d5be:	4626      	mov	r6, r4
 800d5c0:	2e00      	cmp	r6, #0
 800d5c2:	d145      	bne.n	800d650 <_malloc_r+0xdc>
 800d5c4:	2c00      	cmp	r4, #0
 800d5c6:	d048      	beq.n	800d65a <_malloc_r+0xe6>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	eb04 0903 	add.w	r9, r4, r3
 800d5d2:	f000 fdf7 	bl	800e1c4 <_sbrk_r>
 800d5d6:	4581      	cmp	r9, r0
 800d5d8:	d13f      	bne.n	800d65a <_malloc_r+0xe6>
 800d5da:	6821      	ldr	r1, [r4, #0]
 800d5dc:	1a6d      	subs	r5, r5, r1
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	f7ff ffa7 	bl	800d534 <sbrk_aligned>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d037      	beq.n	800d65a <_malloc_r+0xe6>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	442b      	add	r3, r5
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d038      	beq.n	800d66a <_malloc_r+0xf6>
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	42a2      	cmp	r2, r4
 800d5fc:	d12b      	bne.n	800d656 <_malloc_r+0xe2>
 800d5fe:	2200      	movs	r2, #0
 800d600:	605a      	str	r2, [r3, #4]
 800d602:	e00f      	b.n	800d624 <_malloc_r+0xb0>
 800d604:	6822      	ldr	r2, [r4, #0]
 800d606:	1b52      	subs	r2, r2, r5
 800d608:	d41f      	bmi.n	800d64a <_malloc_r+0xd6>
 800d60a:	2a0b      	cmp	r2, #11
 800d60c:	d917      	bls.n	800d63e <_malloc_r+0xca>
 800d60e:	1961      	adds	r1, r4, r5
 800d610:	42a3      	cmp	r3, r4
 800d612:	6025      	str	r5, [r4, #0]
 800d614:	bf18      	it	ne
 800d616:	6059      	strne	r1, [r3, #4]
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	bf08      	it	eq
 800d61c:	f8c8 1000 	streq.w	r1, [r8]
 800d620:	5162      	str	r2, [r4, r5]
 800d622:	604b      	str	r3, [r1, #4]
 800d624:	4638      	mov	r0, r7
 800d626:	f104 060b 	add.w	r6, r4, #11
 800d62a:	f000 f829 	bl	800d680 <__malloc_unlock>
 800d62e:	f026 0607 	bic.w	r6, r6, #7
 800d632:	1d23      	adds	r3, r4, #4
 800d634:	1af2      	subs	r2, r6, r3
 800d636:	d0ae      	beq.n	800d596 <_malloc_r+0x22>
 800d638:	1b9b      	subs	r3, r3, r6
 800d63a:	50a3      	str	r3, [r4, r2]
 800d63c:	e7ab      	b.n	800d596 <_malloc_r+0x22>
 800d63e:	42a3      	cmp	r3, r4
 800d640:	6862      	ldr	r2, [r4, #4]
 800d642:	d1dd      	bne.n	800d600 <_malloc_r+0x8c>
 800d644:	f8c8 2000 	str.w	r2, [r8]
 800d648:	e7ec      	b.n	800d624 <_malloc_r+0xb0>
 800d64a:	4623      	mov	r3, r4
 800d64c:	6864      	ldr	r4, [r4, #4]
 800d64e:	e7ac      	b.n	800d5aa <_malloc_r+0x36>
 800d650:	4634      	mov	r4, r6
 800d652:	6876      	ldr	r6, [r6, #4]
 800d654:	e7b4      	b.n	800d5c0 <_malloc_r+0x4c>
 800d656:	4613      	mov	r3, r2
 800d658:	e7cc      	b.n	800d5f4 <_malloc_r+0x80>
 800d65a:	230c      	movs	r3, #12
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	4638      	mov	r0, r7
 800d660:	f000 f80e 	bl	800d680 <__malloc_unlock>
 800d664:	e797      	b.n	800d596 <_malloc_r+0x22>
 800d666:	6025      	str	r5, [r4, #0]
 800d668:	e7dc      	b.n	800d624 <_malloc_r+0xb0>
 800d66a:	605b      	str	r3, [r3, #4]
 800d66c:	deff      	udf	#255	; 0xff
 800d66e:	bf00      	nop
 800d670:	20005404 	.word	0x20005404

0800d674 <__malloc_lock>:
 800d674:	4801      	ldr	r0, [pc, #4]	; (800d67c <__malloc_lock+0x8>)
 800d676:	f7ff b87f 	b.w	800c778 <__retarget_lock_acquire_recursive>
 800d67a:	bf00      	nop
 800d67c:	20005400 	.word	0x20005400

0800d680 <__malloc_unlock>:
 800d680:	4801      	ldr	r0, [pc, #4]	; (800d688 <__malloc_unlock+0x8>)
 800d682:	f7ff b87a 	b.w	800c77a <__retarget_lock_release_recursive>
 800d686:	bf00      	nop
 800d688:	20005400 	.word	0x20005400

0800d68c <_Balloc>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	69c6      	ldr	r6, [r0, #28]
 800d690:	4604      	mov	r4, r0
 800d692:	460d      	mov	r5, r1
 800d694:	b976      	cbnz	r6, 800d6b4 <_Balloc+0x28>
 800d696:	2010      	movs	r0, #16
 800d698:	f7ff ff44 	bl	800d524 <malloc>
 800d69c:	4602      	mov	r2, r0
 800d69e:	61e0      	str	r0, [r4, #28]
 800d6a0:	b920      	cbnz	r0, 800d6ac <_Balloc+0x20>
 800d6a2:	4b18      	ldr	r3, [pc, #96]	; (800d704 <_Balloc+0x78>)
 800d6a4:	4818      	ldr	r0, [pc, #96]	; (800d708 <_Balloc+0x7c>)
 800d6a6:	216b      	movs	r1, #107	; 0x6b
 800d6a8:	f000 fd9c 	bl	800e1e4 <__assert_func>
 800d6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6b0:	6006      	str	r6, [r0, #0]
 800d6b2:	60c6      	str	r6, [r0, #12]
 800d6b4:	69e6      	ldr	r6, [r4, #28]
 800d6b6:	68f3      	ldr	r3, [r6, #12]
 800d6b8:	b183      	cbz	r3, 800d6dc <_Balloc+0x50>
 800d6ba:	69e3      	ldr	r3, [r4, #28]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6c2:	b9b8      	cbnz	r0, 800d6f4 <_Balloc+0x68>
 800d6c4:	2101      	movs	r1, #1
 800d6c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d6ca:	1d72      	adds	r2, r6, #5
 800d6cc:	0092      	lsls	r2, r2, #2
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 fda6 	bl	800e220 <_calloc_r>
 800d6d4:	b160      	cbz	r0, 800d6f0 <_Balloc+0x64>
 800d6d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6da:	e00e      	b.n	800d6fa <_Balloc+0x6e>
 800d6dc:	2221      	movs	r2, #33	; 0x21
 800d6de:	2104      	movs	r1, #4
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 fd9d 	bl	800e220 <_calloc_r>
 800d6e6:	69e3      	ldr	r3, [r4, #28]
 800d6e8:	60f0      	str	r0, [r6, #12]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1e4      	bne.n	800d6ba <_Balloc+0x2e>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	6802      	ldr	r2, [r0, #0]
 800d6f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d700:	e7f7      	b.n	800d6f2 <_Balloc+0x66>
 800d702:	bf00      	nop
 800d704:	0800f56d 	.word	0x0800f56d
 800d708:	0800f5ed 	.word	0x0800f5ed

0800d70c <_Bfree>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	69c6      	ldr	r6, [r0, #28]
 800d710:	4605      	mov	r5, r0
 800d712:	460c      	mov	r4, r1
 800d714:	b976      	cbnz	r6, 800d734 <_Bfree+0x28>
 800d716:	2010      	movs	r0, #16
 800d718:	f7ff ff04 	bl	800d524 <malloc>
 800d71c:	4602      	mov	r2, r0
 800d71e:	61e8      	str	r0, [r5, #28]
 800d720:	b920      	cbnz	r0, 800d72c <_Bfree+0x20>
 800d722:	4b09      	ldr	r3, [pc, #36]	; (800d748 <_Bfree+0x3c>)
 800d724:	4809      	ldr	r0, [pc, #36]	; (800d74c <_Bfree+0x40>)
 800d726:	218f      	movs	r1, #143	; 0x8f
 800d728:	f000 fd5c 	bl	800e1e4 <__assert_func>
 800d72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d730:	6006      	str	r6, [r0, #0]
 800d732:	60c6      	str	r6, [r0, #12]
 800d734:	b13c      	cbz	r4, 800d746 <_Bfree+0x3a>
 800d736:	69eb      	ldr	r3, [r5, #28]
 800d738:	6862      	ldr	r2, [r4, #4]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d740:	6021      	str	r1, [r4, #0]
 800d742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d746:	bd70      	pop	{r4, r5, r6, pc}
 800d748:	0800f56d 	.word	0x0800f56d
 800d74c:	0800f5ed 	.word	0x0800f5ed

0800d750 <__multadd>:
 800d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d754:	690d      	ldr	r5, [r1, #16]
 800d756:	4607      	mov	r7, r0
 800d758:	460c      	mov	r4, r1
 800d75a:	461e      	mov	r6, r3
 800d75c:	f101 0c14 	add.w	ip, r1, #20
 800d760:	2000      	movs	r0, #0
 800d762:	f8dc 3000 	ldr.w	r3, [ip]
 800d766:	b299      	uxth	r1, r3
 800d768:	fb02 6101 	mla	r1, r2, r1, r6
 800d76c:	0c1e      	lsrs	r6, r3, #16
 800d76e:	0c0b      	lsrs	r3, r1, #16
 800d770:	fb02 3306 	mla	r3, r2, r6, r3
 800d774:	b289      	uxth	r1, r1
 800d776:	3001      	adds	r0, #1
 800d778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d77c:	4285      	cmp	r5, r0
 800d77e:	f84c 1b04 	str.w	r1, [ip], #4
 800d782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d786:	dcec      	bgt.n	800d762 <__multadd+0x12>
 800d788:	b30e      	cbz	r6, 800d7ce <__multadd+0x7e>
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	42ab      	cmp	r3, r5
 800d78e:	dc19      	bgt.n	800d7c4 <__multadd+0x74>
 800d790:	6861      	ldr	r1, [r4, #4]
 800d792:	4638      	mov	r0, r7
 800d794:	3101      	adds	r1, #1
 800d796:	f7ff ff79 	bl	800d68c <_Balloc>
 800d79a:	4680      	mov	r8, r0
 800d79c:	b928      	cbnz	r0, 800d7aa <__multadd+0x5a>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	4b0c      	ldr	r3, [pc, #48]	; (800d7d4 <__multadd+0x84>)
 800d7a2:	480d      	ldr	r0, [pc, #52]	; (800d7d8 <__multadd+0x88>)
 800d7a4:	21ba      	movs	r1, #186	; 0xba
 800d7a6:	f000 fd1d 	bl	800e1e4 <__assert_func>
 800d7aa:	6922      	ldr	r2, [r4, #16]
 800d7ac:	3202      	adds	r2, #2
 800d7ae:	f104 010c 	add.w	r1, r4, #12
 800d7b2:	0092      	lsls	r2, r2, #2
 800d7b4:	300c      	adds	r0, #12
 800d7b6:	f7fe ffe1 	bl	800c77c <memcpy>
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4638      	mov	r0, r7
 800d7be:	f7ff ffa5 	bl	800d70c <_Bfree>
 800d7c2:	4644      	mov	r4, r8
 800d7c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	615e      	str	r6, [r3, #20]
 800d7cc:	6125      	str	r5, [r4, #16]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d4:	0800f5dc 	.word	0x0800f5dc
 800d7d8:	0800f5ed 	.word	0x0800f5ed

0800d7dc <__hi0bits>:
 800d7dc:	0c03      	lsrs	r3, r0, #16
 800d7de:	041b      	lsls	r3, r3, #16
 800d7e0:	b9d3      	cbnz	r3, 800d818 <__hi0bits+0x3c>
 800d7e2:	0400      	lsls	r0, r0, #16
 800d7e4:	2310      	movs	r3, #16
 800d7e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7ea:	bf04      	itt	eq
 800d7ec:	0200      	lsleq	r0, r0, #8
 800d7ee:	3308      	addeq	r3, #8
 800d7f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7f4:	bf04      	itt	eq
 800d7f6:	0100      	lsleq	r0, r0, #4
 800d7f8:	3304      	addeq	r3, #4
 800d7fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7fe:	bf04      	itt	eq
 800d800:	0080      	lsleq	r0, r0, #2
 800d802:	3302      	addeq	r3, #2
 800d804:	2800      	cmp	r0, #0
 800d806:	db05      	blt.n	800d814 <__hi0bits+0x38>
 800d808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d80c:	f103 0301 	add.w	r3, r3, #1
 800d810:	bf08      	it	eq
 800d812:	2320      	moveq	r3, #32
 800d814:	4618      	mov	r0, r3
 800d816:	4770      	bx	lr
 800d818:	2300      	movs	r3, #0
 800d81a:	e7e4      	b.n	800d7e6 <__hi0bits+0xa>

0800d81c <__lo0bits>:
 800d81c:	6803      	ldr	r3, [r0, #0]
 800d81e:	f013 0207 	ands.w	r2, r3, #7
 800d822:	d00c      	beq.n	800d83e <__lo0bits+0x22>
 800d824:	07d9      	lsls	r1, r3, #31
 800d826:	d422      	bmi.n	800d86e <__lo0bits+0x52>
 800d828:	079a      	lsls	r2, r3, #30
 800d82a:	bf49      	itett	mi
 800d82c:	085b      	lsrmi	r3, r3, #1
 800d82e:	089b      	lsrpl	r3, r3, #2
 800d830:	6003      	strmi	r3, [r0, #0]
 800d832:	2201      	movmi	r2, #1
 800d834:	bf5c      	itt	pl
 800d836:	6003      	strpl	r3, [r0, #0]
 800d838:	2202      	movpl	r2, #2
 800d83a:	4610      	mov	r0, r2
 800d83c:	4770      	bx	lr
 800d83e:	b299      	uxth	r1, r3
 800d840:	b909      	cbnz	r1, 800d846 <__lo0bits+0x2a>
 800d842:	0c1b      	lsrs	r3, r3, #16
 800d844:	2210      	movs	r2, #16
 800d846:	b2d9      	uxtb	r1, r3
 800d848:	b909      	cbnz	r1, 800d84e <__lo0bits+0x32>
 800d84a:	3208      	adds	r2, #8
 800d84c:	0a1b      	lsrs	r3, r3, #8
 800d84e:	0719      	lsls	r1, r3, #28
 800d850:	bf04      	itt	eq
 800d852:	091b      	lsreq	r3, r3, #4
 800d854:	3204      	addeq	r2, #4
 800d856:	0799      	lsls	r1, r3, #30
 800d858:	bf04      	itt	eq
 800d85a:	089b      	lsreq	r3, r3, #2
 800d85c:	3202      	addeq	r2, #2
 800d85e:	07d9      	lsls	r1, r3, #31
 800d860:	d403      	bmi.n	800d86a <__lo0bits+0x4e>
 800d862:	085b      	lsrs	r3, r3, #1
 800d864:	f102 0201 	add.w	r2, r2, #1
 800d868:	d003      	beq.n	800d872 <__lo0bits+0x56>
 800d86a:	6003      	str	r3, [r0, #0]
 800d86c:	e7e5      	b.n	800d83a <__lo0bits+0x1e>
 800d86e:	2200      	movs	r2, #0
 800d870:	e7e3      	b.n	800d83a <__lo0bits+0x1e>
 800d872:	2220      	movs	r2, #32
 800d874:	e7e1      	b.n	800d83a <__lo0bits+0x1e>
	...

0800d878 <__i2b>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	460c      	mov	r4, r1
 800d87c:	2101      	movs	r1, #1
 800d87e:	f7ff ff05 	bl	800d68c <_Balloc>
 800d882:	4602      	mov	r2, r0
 800d884:	b928      	cbnz	r0, 800d892 <__i2b+0x1a>
 800d886:	4b05      	ldr	r3, [pc, #20]	; (800d89c <__i2b+0x24>)
 800d888:	4805      	ldr	r0, [pc, #20]	; (800d8a0 <__i2b+0x28>)
 800d88a:	f240 1145 	movw	r1, #325	; 0x145
 800d88e:	f000 fca9 	bl	800e1e4 <__assert_func>
 800d892:	2301      	movs	r3, #1
 800d894:	6144      	str	r4, [r0, #20]
 800d896:	6103      	str	r3, [r0, #16]
 800d898:	bd10      	pop	{r4, pc}
 800d89a:	bf00      	nop
 800d89c:	0800f5dc 	.word	0x0800f5dc
 800d8a0:	0800f5ed 	.word	0x0800f5ed

0800d8a4 <__multiply>:
 800d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	4691      	mov	r9, r2
 800d8aa:	690a      	ldr	r2, [r1, #16]
 800d8ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	bfb8      	it	lt
 800d8b4:	460b      	movlt	r3, r1
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	bfbc      	itt	lt
 800d8ba:	464c      	movlt	r4, r9
 800d8bc:	4699      	movlt	r9, r3
 800d8be:	6927      	ldr	r7, [r4, #16]
 800d8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8c4:	68a3      	ldr	r3, [r4, #8]
 800d8c6:	6861      	ldr	r1, [r4, #4]
 800d8c8:	eb07 060a 	add.w	r6, r7, sl
 800d8cc:	42b3      	cmp	r3, r6
 800d8ce:	b085      	sub	sp, #20
 800d8d0:	bfb8      	it	lt
 800d8d2:	3101      	addlt	r1, #1
 800d8d4:	f7ff feda 	bl	800d68c <_Balloc>
 800d8d8:	b930      	cbnz	r0, 800d8e8 <__multiply+0x44>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	4b44      	ldr	r3, [pc, #272]	; (800d9f0 <__multiply+0x14c>)
 800d8de:	4845      	ldr	r0, [pc, #276]	; (800d9f4 <__multiply+0x150>)
 800d8e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d8e4:	f000 fc7e 	bl	800e1e4 <__assert_func>
 800d8e8:	f100 0514 	add.w	r5, r0, #20
 800d8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8f0:	462b      	mov	r3, r5
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4543      	cmp	r3, r8
 800d8f6:	d321      	bcc.n	800d93c <__multiply+0x98>
 800d8f8:	f104 0314 	add.w	r3, r4, #20
 800d8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d900:	f109 0314 	add.w	r3, r9, #20
 800d904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d908:	9202      	str	r2, [sp, #8]
 800d90a:	1b3a      	subs	r2, r7, r4
 800d90c:	3a15      	subs	r2, #21
 800d90e:	f022 0203 	bic.w	r2, r2, #3
 800d912:	3204      	adds	r2, #4
 800d914:	f104 0115 	add.w	r1, r4, #21
 800d918:	428f      	cmp	r7, r1
 800d91a:	bf38      	it	cc
 800d91c:	2204      	movcc	r2, #4
 800d91e:	9201      	str	r2, [sp, #4]
 800d920:	9a02      	ldr	r2, [sp, #8]
 800d922:	9303      	str	r3, [sp, #12]
 800d924:	429a      	cmp	r2, r3
 800d926:	d80c      	bhi.n	800d942 <__multiply+0x9e>
 800d928:	2e00      	cmp	r6, #0
 800d92a:	dd03      	ble.n	800d934 <__multiply+0x90>
 800d92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d930:	2b00      	cmp	r3, #0
 800d932:	d05b      	beq.n	800d9ec <__multiply+0x148>
 800d934:	6106      	str	r6, [r0, #16]
 800d936:	b005      	add	sp, #20
 800d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93c:	f843 2b04 	str.w	r2, [r3], #4
 800d940:	e7d8      	b.n	800d8f4 <__multiply+0x50>
 800d942:	f8b3 a000 	ldrh.w	sl, [r3]
 800d946:	f1ba 0f00 	cmp.w	sl, #0
 800d94a:	d024      	beq.n	800d996 <__multiply+0xf2>
 800d94c:	f104 0e14 	add.w	lr, r4, #20
 800d950:	46a9      	mov	r9, r5
 800d952:	f04f 0c00 	mov.w	ip, #0
 800d956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d95a:	f8d9 1000 	ldr.w	r1, [r9]
 800d95e:	fa1f fb82 	uxth.w	fp, r2
 800d962:	b289      	uxth	r1, r1
 800d964:	fb0a 110b 	mla	r1, sl, fp, r1
 800d968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d96c:	f8d9 2000 	ldr.w	r2, [r9]
 800d970:	4461      	add	r1, ip
 800d972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d976:	fb0a c20b 	mla	r2, sl, fp, ip
 800d97a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d97e:	b289      	uxth	r1, r1
 800d980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d984:	4577      	cmp	r7, lr
 800d986:	f849 1b04 	str.w	r1, [r9], #4
 800d98a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d98e:	d8e2      	bhi.n	800d956 <__multiply+0xb2>
 800d990:	9a01      	ldr	r2, [sp, #4]
 800d992:	f845 c002 	str.w	ip, [r5, r2]
 800d996:	9a03      	ldr	r2, [sp, #12]
 800d998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d99c:	3304      	adds	r3, #4
 800d99e:	f1b9 0f00 	cmp.w	r9, #0
 800d9a2:	d021      	beq.n	800d9e8 <__multiply+0x144>
 800d9a4:	6829      	ldr	r1, [r5, #0]
 800d9a6:	f104 0c14 	add.w	ip, r4, #20
 800d9aa:	46ae      	mov	lr, r5
 800d9ac:	f04f 0a00 	mov.w	sl, #0
 800d9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800d9b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9b8:	fb09 220b 	mla	r2, r9, fp, r2
 800d9bc:	4452      	add	r2, sl
 800d9be:	b289      	uxth	r1, r1
 800d9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9c4:	f84e 1b04 	str.w	r1, [lr], #4
 800d9c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d9cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9d0:	f8be 1000 	ldrh.w	r1, [lr]
 800d9d4:	fb09 110a 	mla	r1, r9, sl, r1
 800d9d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d9dc:	4567      	cmp	r7, ip
 800d9de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9e2:	d8e5      	bhi.n	800d9b0 <__multiply+0x10c>
 800d9e4:	9a01      	ldr	r2, [sp, #4]
 800d9e6:	50a9      	str	r1, [r5, r2]
 800d9e8:	3504      	adds	r5, #4
 800d9ea:	e799      	b.n	800d920 <__multiply+0x7c>
 800d9ec:	3e01      	subs	r6, #1
 800d9ee:	e79b      	b.n	800d928 <__multiply+0x84>
 800d9f0:	0800f5dc 	.word	0x0800f5dc
 800d9f4:	0800f5ed 	.word	0x0800f5ed

0800d9f8 <__pow5mult>:
 800d9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	f012 0203 	ands.w	r2, r2, #3
 800da02:	4606      	mov	r6, r0
 800da04:	460f      	mov	r7, r1
 800da06:	d007      	beq.n	800da18 <__pow5mult+0x20>
 800da08:	4c25      	ldr	r4, [pc, #148]	; (800daa0 <__pow5mult+0xa8>)
 800da0a:	3a01      	subs	r2, #1
 800da0c:	2300      	movs	r3, #0
 800da0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da12:	f7ff fe9d 	bl	800d750 <__multadd>
 800da16:	4607      	mov	r7, r0
 800da18:	10ad      	asrs	r5, r5, #2
 800da1a:	d03d      	beq.n	800da98 <__pow5mult+0xa0>
 800da1c:	69f4      	ldr	r4, [r6, #28]
 800da1e:	b97c      	cbnz	r4, 800da40 <__pow5mult+0x48>
 800da20:	2010      	movs	r0, #16
 800da22:	f7ff fd7f 	bl	800d524 <malloc>
 800da26:	4602      	mov	r2, r0
 800da28:	61f0      	str	r0, [r6, #28]
 800da2a:	b928      	cbnz	r0, 800da38 <__pow5mult+0x40>
 800da2c:	4b1d      	ldr	r3, [pc, #116]	; (800daa4 <__pow5mult+0xac>)
 800da2e:	481e      	ldr	r0, [pc, #120]	; (800daa8 <__pow5mult+0xb0>)
 800da30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800da34:	f000 fbd6 	bl	800e1e4 <__assert_func>
 800da38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da3c:	6004      	str	r4, [r0, #0]
 800da3e:	60c4      	str	r4, [r0, #12]
 800da40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800da44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da48:	b94c      	cbnz	r4, 800da5e <__pow5mult+0x66>
 800da4a:	f240 2171 	movw	r1, #625	; 0x271
 800da4e:	4630      	mov	r0, r6
 800da50:	f7ff ff12 	bl	800d878 <__i2b>
 800da54:	2300      	movs	r3, #0
 800da56:	f8c8 0008 	str.w	r0, [r8, #8]
 800da5a:	4604      	mov	r4, r0
 800da5c:	6003      	str	r3, [r0, #0]
 800da5e:	f04f 0900 	mov.w	r9, #0
 800da62:	07eb      	lsls	r3, r5, #31
 800da64:	d50a      	bpl.n	800da7c <__pow5mult+0x84>
 800da66:	4639      	mov	r1, r7
 800da68:	4622      	mov	r2, r4
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7ff ff1a 	bl	800d8a4 <__multiply>
 800da70:	4639      	mov	r1, r7
 800da72:	4680      	mov	r8, r0
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff fe49 	bl	800d70c <_Bfree>
 800da7a:	4647      	mov	r7, r8
 800da7c:	106d      	asrs	r5, r5, #1
 800da7e:	d00b      	beq.n	800da98 <__pow5mult+0xa0>
 800da80:	6820      	ldr	r0, [r4, #0]
 800da82:	b938      	cbnz	r0, 800da94 <__pow5mult+0x9c>
 800da84:	4622      	mov	r2, r4
 800da86:	4621      	mov	r1, r4
 800da88:	4630      	mov	r0, r6
 800da8a:	f7ff ff0b 	bl	800d8a4 <__multiply>
 800da8e:	6020      	str	r0, [r4, #0]
 800da90:	f8c0 9000 	str.w	r9, [r0]
 800da94:	4604      	mov	r4, r0
 800da96:	e7e4      	b.n	800da62 <__pow5mult+0x6a>
 800da98:	4638      	mov	r0, r7
 800da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da9e:	bf00      	nop
 800daa0:	0800f738 	.word	0x0800f738
 800daa4:	0800f56d 	.word	0x0800f56d
 800daa8:	0800f5ed 	.word	0x0800f5ed

0800daac <__lshift>:
 800daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab0:	460c      	mov	r4, r1
 800dab2:	6849      	ldr	r1, [r1, #4]
 800dab4:	6923      	ldr	r3, [r4, #16]
 800dab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daba:	68a3      	ldr	r3, [r4, #8]
 800dabc:	4607      	mov	r7, r0
 800dabe:	4691      	mov	r9, r2
 800dac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dac4:	f108 0601 	add.w	r6, r8, #1
 800dac8:	42b3      	cmp	r3, r6
 800daca:	db0b      	blt.n	800dae4 <__lshift+0x38>
 800dacc:	4638      	mov	r0, r7
 800dace:	f7ff fddd 	bl	800d68c <_Balloc>
 800dad2:	4605      	mov	r5, r0
 800dad4:	b948      	cbnz	r0, 800daea <__lshift+0x3e>
 800dad6:	4602      	mov	r2, r0
 800dad8:	4b28      	ldr	r3, [pc, #160]	; (800db7c <__lshift+0xd0>)
 800dada:	4829      	ldr	r0, [pc, #164]	; (800db80 <__lshift+0xd4>)
 800dadc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dae0:	f000 fb80 	bl	800e1e4 <__assert_func>
 800dae4:	3101      	adds	r1, #1
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	e7ee      	b.n	800dac8 <__lshift+0x1c>
 800daea:	2300      	movs	r3, #0
 800daec:	f100 0114 	add.w	r1, r0, #20
 800daf0:	f100 0210 	add.w	r2, r0, #16
 800daf4:	4618      	mov	r0, r3
 800daf6:	4553      	cmp	r3, sl
 800daf8:	db33      	blt.n	800db62 <__lshift+0xb6>
 800dafa:	6920      	ldr	r0, [r4, #16]
 800dafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db00:	f104 0314 	add.w	r3, r4, #20
 800db04:	f019 091f 	ands.w	r9, r9, #31
 800db08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db10:	d02b      	beq.n	800db6a <__lshift+0xbe>
 800db12:	f1c9 0e20 	rsb	lr, r9, #32
 800db16:	468a      	mov	sl, r1
 800db18:	2200      	movs	r2, #0
 800db1a:	6818      	ldr	r0, [r3, #0]
 800db1c:	fa00 f009 	lsl.w	r0, r0, r9
 800db20:	4310      	orrs	r0, r2
 800db22:	f84a 0b04 	str.w	r0, [sl], #4
 800db26:	f853 2b04 	ldr.w	r2, [r3], #4
 800db2a:	459c      	cmp	ip, r3
 800db2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db30:	d8f3      	bhi.n	800db1a <__lshift+0x6e>
 800db32:	ebac 0304 	sub.w	r3, ip, r4
 800db36:	3b15      	subs	r3, #21
 800db38:	f023 0303 	bic.w	r3, r3, #3
 800db3c:	3304      	adds	r3, #4
 800db3e:	f104 0015 	add.w	r0, r4, #21
 800db42:	4584      	cmp	ip, r0
 800db44:	bf38      	it	cc
 800db46:	2304      	movcc	r3, #4
 800db48:	50ca      	str	r2, [r1, r3]
 800db4a:	b10a      	cbz	r2, 800db50 <__lshift+0xa4>
 800db4c:	f108 0602 	add.w	r6, r8, #2
 800db50:	3e01      	subs	r6, #1
 800db52:	4638      	mov	r0, r7
 800db54:	612e      	str	r6, [r5, #16]
 800db56:	4621      	mov	r1, r4
 800db58:	f7ff fdd8 	bl	800d70c <_Bfree>
 800db5c:	4628      	mov	r0, r5
 800db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db62:	f842 0f04 	str.w	r0, [r2, #4]!
 800db66:	3301      	adds	r3, #1
 800db68:	e7c5      	b.n	800daf6 <__lshift+0x4a>
 800db6a:	3904      	subs	r1, #4
 800db6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db70:	f841 2f04 	str.w	r2, [r1, #4]!
 800db74:	459c      	cmp	ip, r3
 800db76:	d8f9      	bhi.n	800db6c <__lshift+0xc0>
 800db78:	e7ea      	b.n	800db50 <__lshift+0xa4>
 800db7a:	bf00      	nop
 800db7c:	0800f5dc 	.word	0x0800f5dc
 800db80:	0800f5ed 	.word	0x0800f5ed

0800db84 <__mcmp>:
 800db84:	b530      	push	{r4, r5, lr}
 800db86:	6902      	ldr	r2, [r0, #16]
 800db88:	690c      	ldr	r4, [r1, #16]
 800db8a:	1b12      	subs	r2, r2, r4
 800db8c:	d10e      	bne.n	800dbac <__mcmp+0x28>
 800db8e:	f100 0314 	add.w	r3, r0, #20
 800db92:	3114      	adds	r1, #20
 800db94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dba4:	42a5      	cmp	r5, r4
 800dba6:	d003      	beq.n	800dbb0 <__mcmp+0x2c>
 800dba8:	d305      	bcc.n	800dbb6 <__mcmp+0x32>
 800dbaa:	2201      	movs	r2, #1
 800dbac:	4610      	mov	r0, r2
 800dbae:	bd30      	pop	{r4, r5, pc}
 800dbb0:	4283      	cmp	r3, r0
 800dbb2:	d3f3      	bcc.n	800db9c <__mcmp+0x18>
 800dbb4:	e7fa      	b.n	800dbac <__mcmp+0x28>
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbba:	e7f7      	b.n	800dbac <__mcmp+0x28>

0800dbbc <__mdiff>:
 800dbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	4690      	mov	r8, r2
 800dbca:	f7ff ffdb 	bl	800db84 <__mcmp>
 800dbce:	1e05      	subs	r5, r0, #0
 800dbd0:	d110      	bne.n	800dbf4 <__mdiff+0x38>
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff fd59 	bl	800d68c <_Balloc>
 800dbda:	b930      	cbnz	r0, 800dbea <__mdiff+0x2e>
 800dbdc:	4b3a      	ldr	r3, [pc, #232]	; (800dcc8 <__mdiff+0x10c>)
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f240 2137 	movw	r1, #567	; 0x237
 800dbe4:	4839      	ldr	r0, [pc, #228]	; (800dccc <__mdiff+0x110>)
 800dbe6:	f000 fafd 	bl	800e1e4 <__assert_func>
 800dbea:	2301      	movs	r3, #1
 800dbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf4:	bfa4      	itt	ge
 800dbf6:	4643      	movge	r3, r8
 800dbf8:	46a0      	movge	r8, r4
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc00:	bfa6      	itte	ge
 800dc02:	461c      	movge	r4, r3
 800dc04:	2500      	movge	r5, #0
 800dc06:	2501      	movlt	r5, #1
 800dc08:	f7ff fd40 	bl	800d68c <_Balloc>
 800dc0c:	b920      	cbnz	r0, 800dc18 <__mdiff+0x5c>
 800dc0e:	4b2e      	ldr	r3, [pc, #184]	; (800dcc8 <__mdiff+0x10c>)
 800dc10:	4602      	mov	r2, r0
 800dc12:	f240 2145 	movw	r1, #581	; 0x245
 800dc16:	e7e5      	b.n	800dbe4 <__mdiff+0x28>
 800dc18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc1c:	6926      	ldr	r6, [r4, #16]
 800dc1e:	60c5      	str	r5, [r0, #12]
 800dc20:	f104 0914 	add.w	r9, r4, #20
 800dc24:	f108 0514 	add.w	r5, r8, #20
 800dc28:	f100 0e14 	add.w	lr, r0, #20
 800dc2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc34:	f108 0210 	add.w	r2, r8, #16
 800dc38:	46f2      	mov	sl, lr
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc44:	fa11 f88b 	uxtah	r8, r1, fp
 800dc48:	b299      	uxth	r1, r3
 800dc4a:	0c1b      	lsrs	r3, r3, #16
 800dc4c:	eba8 0801 	sub.w	r8, r8, r1
 800dc50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc58:	fa1f f888 	uxth.w	r8, r8
 800dc5c:	1419      	asrs	r1, r3, #16
 800dc5e:	454e      	cmp	r6, r9
 800dc60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc64:	f84a 3b04 	str.w	r3, [sl], #4
 800dc68:	d8e8      	bhi.n	800dc3c <__mdiff+0x80>
 800dc6a:	1b33      	subs	r3, r6, r4
 800dc6c:	3b15      	subs	r3, #21
 800dc6e:	f023 0303 	bic.w	r3, r3, #3
 800dc72:	3304      	adds	r3, #4
 800dc74:	3415      	adds	r4, #21
 800dc76:	42a6      	cmp	r6, r4
 800dc78:	bf38      	it	cc
 800dc7a:	2304      	movcc	r3, #4
 800dc7c:	441d      	add	r5, r3
 800dc7e:	4473      	add	r3, lr
 800dc80:	469e      	mov	lr, r3
 800dc82:	462e      	mov	r6, r5
 800dc84:	4566      	cmp	r6, ip
 800dc86:	d30e      	bcc.n	800dca6 <__mdiff+0xea>
 800dc88:	f10c 0203 	add.w	r2, ip, #3
 800dc8c:	1b52      	subs	r2, r2, r5
 800dc8e:	f022 0203 	bic.w	r2, r2, #3
 800dc92:	3d03      	subs	r5, #3
 800dc94:	45ac      	cmp	ip, r5
 800dc96:	bf38      	it	cc
 800dc98:	2200      	movcc	r2, #0
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dca0:	b17a      	cbz	r2, 800dcc2 <__mdiff+0x106>
 800dca2:	6107      	str	r7, [r0, #16]
 800dca4:	e7a4      	b.n	800dbf0 <__mdiff+0x34>
 800dca6:	f856 8b04 	ldr.w	r8, [r6], #4
 800dcaa:	fa11 f288 	uxtah	r2, r1, r8
 800dcae:	1414      	asrs	r4, r2, #16
 800dcb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcb4:	b292      	uxth	r2, r2
 800dcb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dcba:	f84e 2b04 	str.w	r2, [lr], #4
 800dcbe:	1421      	asrs	r1, r4, #16
 800dcc0:	e7e0      	b.n	800dc84 <__mdiff+0xc8>
 800dcc2:	3f01      	subs	r7, #1
 800dcc4:	e7ea      	b.n	800dc9c <__mdiff+0xe0>
 800dcc6:	bf00      	nop
 800dcc8:	0800f5dc 	.word	0x0800f5dc
 800dccc:	0800f5ed 	.word	0x0800f5ed

0800dcd0 <__d2b>:
 800dcd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	ec59 8b10 	vmov	r8, r9, d0
 800dcdc:	4616      	mov	r6, r2
 800dcde:	f7ff fcd5 	bl	800d68c <_Balloc>
 800dce2:	4604      	mov	r4, r0
 800dce4:	b930      	cbnz	r0, 800dcf4 <__d2b+0x24>
 800dce6:	4602      	mov	r2, r0
 800dce8:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <__d2b+0xac>)
 800dcea:	4825      	ldr	r0, [pc, #148]	; (800dd80 <__d2b+0xb0>)
 800dcec:	f240 310f 	movw	r1, #783	; 0x30f
 800dcf0:	f000 fa78 	bl	800e1e4 <__assert_func>
 800dcf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dcf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dcfc:	bb2d      	cbnz	r5, 800dd4a <__d2b+0x7a>
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	f1b8 0300 	subs.w	r3, r8, #0
 800dd04:	d026      	beq.n	800dd54 <__d2b+0x84>
 800dd06:	4668      	mov	r0, sp
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	f7ff fd87 	bl	800d81c <__lo0bits>
 800dd0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd12:	b1e8      	cbz	r0, 800dd50 <__d2b+0x80>
 800dd14:	f1c0 0320 	rsb	r3, r0, #32
 800dd18:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	40c2      	lsrs	r2, r0
 800dd20:	6163      	str	r3, [r4, #20]
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	9b01      	ldr	r3, [sp, #4]
 800dd26:	61a3      	str	r3, [r4, #24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bf14      	ite	ne
 800dd2c:	2202      	movne	r2, #2
 800dd2e:	2201      	moveq	r2, #1
 800dd30:	6122      	str	r2, [r4, #16]
 800dd32:	b1bd      	cbz	r5, 800dd64 <__d2b+0x94>
 800dd34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd38:	4405      	add	r5, r0
 800dd3a:	603d      	str	r5, [r7, #0]
 800dd3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd40:	6030      	str	r0, [r6, #0]
 800dd42:	4620      	mov	r0, r4
 800dd44:	b003      	add	sp, #12
 800dd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd4e:	e7d6      	b.n	800dcfe <__d2b+0x2e>
 800dd50:	6161      	str	r1, [r4, #20]
 800dd52:	e7e7      	b.n	800dd24 <__d2b+0x54>
 800dd54:	a801      	add	r0, sp, #4
 800dd56:	f7ff fd61 	bl	800d81c <__lo0bits>
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	6163      	str	r3, [r4, #20]
 800dd5e:	3020      	adds	r0, #32
 800dd60:	2201      	movs	r2, #1
 800dd62:	e7e5      	b.n	800dd30 <__d2b+0x60>
 800dd64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd6c:	6038      	str	r0, [r7, #0]
 800dd6e:	6918      	ldr	r0, [r3, #16]
 800dd70:	f7ff fd34 	bl	800d7dc <__hi0bits>
 800dd74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd78:	e7e2      	b.n	800dd40 <__d2b+0x70>
 800dd7a:	bf00      	nop
 800dd7c:	0800f5dc 	.word	0x0800f5dc
 800dd80:	0800f5ed 	.word	0x0800f5ed

0800dd84 <__ssputs_r>:
 800dd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd88:	688e      	ldr	r6, [r1, #8]
 800dd8a:	461f      	mov	r7, r3
 800dd8c:	42be      	cmp	r6, r7
 800dd8e:	680b      	ldr	r3, [r1, #0]
 800dd90:	4682      	mov	sl, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	4690      	mov	r8, r2
 800dd96:	d82c      	bhi.n	800ddf2 <__ssputs_r+0x6e>
 800dd98:	898a      	ldrh	r2, [r1, #12]
 800dd9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd9e:	d026      	beq.n	800ddee <__ssputs_r+0x6a>
 800dda0:	6965      	ldr	r5, [r4, #20]
 800dda2:	6909      	ldr	r1, [r1, #16]
 800dda4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dda8:	eba3 0901 	sub.w	r9, r3, r1
 800ddac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddb0:	1c7b      	adds	r3, r7, #1
 800ddb2:	444b      	add	r3, r9
 800ddb4:	106d      	asrs	r5, r5, #1
 800ddb6:	429d      	cmp	r5, r3
 800ddb8:	bf38      	it	cc
 800ddba:	461d      	movcc	r5, r3
 800ddbc:	0553      	lsls	r3, r2, #21
 800ddbe:	d527      	bpl.n	800de10 <__ssputs_r+0x8c>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7ff fbd7 	bl	800d574 <_malloc_r>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	b360      	cbz	r0, 800de24 <__ssputs_r+0xa0>
 800ddca:	6921      	ldr	r1, [r4, #16]
 800ddcc:	464a      	mov	r2, r9
 800ddce:	f7fe fcd5 	bl	800c77c <memcpy>
 800ddd2:	89a3      	ldrh	r3, [r4, #12]
 800ddd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dddc:	81a3      	strh	r3, [r4, #12]
 800ddde:	6126      	str	r6, [r4, #16]
 800dde0:	6165      	str	r5, [r4, #20]
 800dde2:	444e      	add	r6, r9
 800dde4:	eba5 0509 	sub.w	r5, r5, r9
 800dde8:	6026      	str	r6, [r4, #0]
 800ddea:	60a5      	str	r5, [r4, #8]
 800ddec:	463e      	mov	r6, r7
 800ddee:	42be      	cmp	r6, r7
 800ddf0:	d900      	bls.n	800ddf4 <__ssputs_r+0x70>
 800ddf2:	463e      	mov	r6, r7
 800ddf4:	6820      	ldr	r0, [r4, #0]
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	4641      	mov	r1, r8
 800ddfa:	f000 f9c9 	bl	800e190 <memmove>
 800ddfe:	68a3      	ldr	r3, [r4, #8]
 800de00:	1b9b      	subs	r3, r3, r6
 800de02:	60a3      	str	r3, [r4, #8]
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	4433      	add	r3, r6
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	2000      	movs	r0, #0
 800de0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de10:	462a      	mov	r2, r5
 800de12:	f000 fa2d 	bl	800e270 <_realloc_r>
 800de16:	4606      	mov	r6, r0
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1e0      	bne.n	800ddde <__ssputs_r+0x5a>
 800de1c:	6921      	ldr	r1, [r4, #16]
 800de1e:	4650      	mov	r0, sl
 800de20:	f7ff fb34 	bl	800d48c <_free_r>
 800de24:	230c      	movs	r3, #12
 800de26:	f8ca 3000 	str.w	r3, [sl]
 800de2a:	89a3      	ldrh	r3, [r4, #12]
 800de2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	f04f 30ff 	mov.w	r0, #4294967295
 800de36:	e7e9      	b.n	800de0c <__ssputs_r+0x88>

0800de38 <_svfiprintf_r>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	4698      	mov	r8, r3
 800de3e:	898b      	ldrh	r3, [r1, #12]
 800de40:	061b      	lsls	r3, r3, #24
 800de42:	b09d      	sub	sp, #116	; 0x74
 800de44:	4607      	mov	r7, r0
 800de46:	460d      	mov	r5, r1
 800de48:	4614      	mov	r4, r2
 800de4a:	d50e      	bpl.n	800de6a <_svfiprintf_r+0x32>
 800de4c:	690b      	ldr	r3, [r1, #16]
 800de4e:	b963      	cbnz	r3, 800de6a <_svfiprintf_r+0x32>
 800de50:	2140      	movs	r1, #64	; 0x40
 800de52:	f7ff fb8f 	bl	800d574 <_malloc_r>
 800de56:	6028      	str	r0, [r5, #0]
 800de58:	6128      	str	r0, [r5, #16]
 800de5a:	b920      	cbnz	r0, 800de66 <_svfiprintf_r+0x2e>
 800de5c:	230c      	movs	r3, #12
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
 800de64:	e0d0      	b.n	800e008 <_svfiprintf_r+0x1d0>
 800de66:	2340      	movs	r3, #64	; 0x40
 800de68:	616b      	str	r3, [r5, #20]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9309      	str	r3, [sp, #36]	; 0x24
 800de6e:	2320      	movs	r3, #32
 800de70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de74:	f8cd 800c 	str.w	r8, [sp, #12]
 800de78:	2330      	movs	r3, #48	; 0x30
 800de7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e020 <_svfiprintf_r+0x1e8>
 800de7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de82:	f04f 0901 	mov.w	r9, #1
 800de86:	4623      	mov	r3, r4
 800de88:	469a      	mov	sl, r3
 800de8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de8e:	b10a      	cbz	r2, 800de94 <_svfiprintf_r+0x5c>
 800de90:	2a25      	cmp	r2, #37	; 0x25
 800de92:	d1f9      	bne.n	800de88 <_svfiprintf_r+0x50>
 800de94:	ebba 0b04 	subs.w	fp, sl, r4
 800de98:	d00b      	beq.n	800deb2 <_svfiprintf_r+0x7a>
 800de9a:	465b      	mov	r3, fp
 800de9c:	4622      	mov	r2, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	4638      	mov	r0, r7
 800dea2:	f7ff ff6f 	bl	800dd84 <__ssputs_r>
 800dea6:	3001      	adds	r0, #1
 800dea8:	f000 80a9 	beq.w	800dffe <_svfiprintf_r+0x1c6>
 800deac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deae:	445a      	add	r2, fp
 800deb0:	9209      	str	r2, [sp, #36]	; 0x24
 800deb2:	f89a 3000 	ldrb.w	r3, [sl]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f000 80a1 	beq.w	800dffe <_svfiprintf_r+0x1c6>
 800debc:	2300      	movs	r3, #0
 800debe:	f04f 32ff 	mov.w	r2, #4294967295
 800dec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dec6:	f10a 0a01 	add.w	sl, sl, #1
 800deca:	9304      	str	r3, [sp, #16]
 800decc:	9307      	str	r3, [sp, #28]
 800dece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ded2:	931a      	str	r3, [sp, #104]	; 0x68
 800ded4:	4654      	mov	r4, sl
 800ded6:	2205      	movs	r2, #5
 800ded8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dedc:	4850      	ldr	r0, [pc, #320]	; (800e020 <_svfiprintf_r+0x1e8>)
 800dede:	f7f2 f977 	bl	80001d0 <memchr>
 800dee2:	9a04      	ldr	r2, [sp, #16]
 800dee4:	b9d8      	cbnz	r0, 800df1e <_svfiprintf_r+0xe6>
 800dee6:	06d0      	lsls	r0, r2, #27
 800dee8:	bf44      	itt	mi
 800deea:	2320      	movmi	r3, #32
 800deec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def0:	0711      	lsls	r1, r2, #28
 800def2:	bf44      	itt	mi
 800def4:	232b      	movmi	r3, #43	; 0x2b
 800def6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defa:	f89a 3000 	ldrb.w	r3, [sl]
 800defe:	2b2a      	cmp	r3, #42	; 0x2a
 800df00:	d015      	beq.n	800df2e <_svfiprintf_r+0xf6>
 800df02:	9a07      	ldr	r2, [sp, #28]
 800df04:	4654      	mov	r4, sl
 800df06:	2000      	movs	r0, #0
 800df08:	f04f 0c0a 	mov.w	ip, #10
 800df0c:	4621      	mov	r1, r4
 800df0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df12:	3b30      	subs	r3, #48	; 0x30
 800df14:	2b09      	cmp	r3, #9
 800df16:	d94d      	bls.n	800dfb4 <_svfiprintf_r+0x17c>
 800df18:	b1b0      	cbz	r0, 800df48 <_svfiprintf_r+0x110>
 800df1a:	9207      	str	r2, [sp, #28]
 800df1c:	e014      	b.n	800df48 <_svfiprintf_r+0x110>
 800df1e:	eba0 0308 	sub.w	r3, r0, r8
 800df22:	fa09 f303 	lsl.w	r3, r9, r3
 800df26:	4313      	orrs	r3, r2
 800df28:	9304      	str	r3, [sp, #16]
 800df2a:	46a2      	mov	sl, r4
 800df2c:	e7d2      	b.n	800ded4 <_svfiprintf_r+0x9c>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	1d19      	adds	r1, r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	9103      	str	r1, [sp, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfbb      	ittet	lt
 800df3a:	425b      	neglt	r3, r3
 800df3c:	f042 0202 	orrlt.w	r2, r2, #2
 800df40:	9307      	strge	r3, [sp, #28]
 800df42:	9307      	strlt	r3, [sp, #28]
 800df44:	bfb8      	it	lt
 800df46:	9204      	strlt	r2, [sp, #16]
 800df48:	7823      	ldrb	r3, [r4, #0]
 800df4a:	2b2e      	cmp	r3, #46	; 0x2e
 800df4c:	d10c      	bne.n	800df68 <_svfiprintf_r+0x130>
 800df4e:	7863      	ldrb	r3, [r4, #1]
 800df50:	2b2a      	cmp	r3, #42	; 0x2a
 800df52:	d134      	bne.n	800dfbe <_svfiprintf_r+0x186>
 800df54:	9b03      	ldr	r3, [sp, #12]
 800df56:	1d1a      	adds	r2, r3, #4
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	9203      	str	r2, [sp, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	bfb8      	it	lt
 800df60:	f04f 33ff 	movlt.w	r3, #4294967295
 800df64:	3402      	adds	r4, #2
 800df66:	9305      	str	r3, [sp, #20]
 800df68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e030 <_svfiprintf_r+0x1f8>
 800df6c:	7821      	ldrb	r1, [r4, #0]
 800df6e:	2203      	movs	r2, #3
 800df70:	4650      	mov	r0, sl
 800df72:	f7f2 f92d 	bl	80001d0 <memchr>
 800df76:	b138      	cbz	r0, 800df88 <_svfiprintf_r+0x150>
 800df78:	9b04      	ldr	r3, [sp, #16]
 800df7a:	eba0 000a 	sub.w	r0, r0, sl
 800df7e:	2240      	movs	r2, #64	; 0x40
 800df80:	4082      	lsls	r2, r0
 800df82:	4313      	orrs	r3, r2
 800df84:	3401      	adds	r4, #1
 800df86:	9304      	str	r3, [sp, #16]
 800df88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df8c:	4825      	ldr	r0, [pc, #148]	; (800e024 <_svfiprintf_r+0x1ec>)
 800df8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df92:	2206      	movs	r2, #6
 800df94:	f7f2 f91c 	bl	80001d0 <memchr>
 800df98:	2800      	cmp	r0, #0
 800df9a:	d038      	beq.n	800e00e <_svfiprintf_r+0x1d6>
 800df9c:	4b22      	ldr	r3, [pc, #136]	; (800e028 <_svfiprintf_r+0x1f0>)
 800df9e:	bb1b      	cbnz	r3, 800dfe8 <_svfiprintf_r+0x1b0>
 800dfa0:	9b03      	ldr	r3, [sp, #12]
 800dfa2:	3307      	adds	r3, #7
 800dfa4:	f023 0307 	bic.w	r3, r3, #7
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	9303      	str	r3, [sp, #12]
 800dfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfae:	4433      	add	r3, r6
 800dfb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb2:	e768      	b.n	800de86 <_svfiprintf_r+0x4e>
 800dfb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfb8:	460c      	mov	r4, r1
 800dfba:	2001      	movs	r0, #1
 800dfbc:	e7a6      	b.n	800df0c <_svfiprintf_r+0xd4>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	3401      	adds	r4, #1
 800dfc2:	9305      	str	r3, [sp, #20]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f04f 0c0a 	mov.w	ip, #10
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfd0:	3a30      	subs	r2, #48	; 0x30
 800dfd2:	2a09      	cmp	r2, #9
 800dfd4:	d903      	bls.n	800dfde <_svfiprintf_r+0x1a6>
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0c6      	beq.n	800df68 <_svfiprintf_r+0x130>
 800dfda:	9105      	str	r1, [sp, #20]
 800dfdc:	e7c4      	b.n	800df68 <_svfiprintf_r+0x130>
 800dfde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e7f0      	b.n	800dfca <_svfiprintf_r+0x192>
 800dfe8:	ab03      	add	r3, sp, #12
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	462a      	mov	r2, r5
 800dfee:	4b0f      	ldr	r3, [pc, #60]	; (800e02c <_svfiprintf_r+0x1f4>)
 800dff0:	a904      	add	r1, sp, #16
 800dff2:	4638      	mov	r0, r7
 800dff4:	f7fd fe14 	bl	800bc20 <_printf_float>
 800dff8:	1c42      	adds	r2, r0, #1
 800dffa:	4606      	mov	r6, r0
 800dffc:	d1d6      	bne.n	800dfac <_svfiprintf_r+0x174>
 800dffe:	89ab      	ldrh	r3, [r5, #12]
 800e000:	065b      	lsls	r3, r3, #25
 800e002:	f53f af2d 	bmi.w	800de60 <_svfiprintf_r+0x28>
 800e006:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e008:	b01d      	add	sp, #116	; 0x74
 800e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00e:	ab03      	add	r3, sp, #12
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	462a      	mov	r2, r5
 800e014:	4b05      	ldr	r3, [pc, #20]	; (800e02c <_svfiprintf_r+0x1f4>)
 800e016:	a904      	add	r1, sp, #16
 800e018:	4638      	mov	r0, r7
 800e01a:	f7fe f8a5 	bl	800c168 <_printf_i>
 800e01e:	e7eb      	b.n	800dff8 <_svfiprintf_r+0x1c0>
 800e020:	0800f744 	.word	0x0800f744
 800e024:	0800f74e 	.word	0x0800f74e
 800e028:	0800bc21 	.word	0x0800bc21
 800e02c:	0800dd85 	.word	0x0800dd85
 800e030:	0800f74a 	.word	0x0800f74a

0800e034 <__sflush_r>:
 800e034:	898a      	ldrh	r2, [r1, #12]
 800e036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03a:	4605      	mov	r5, r0
 800e03c:	0710      	lsls	r0, r2, #28
 800e03e:	460c      	mov	r4, r1
 800e040:	d458      	bmi.n	800e0f4 <__sflush_r+0xc0>
 800e042:	684b      	ldr	r3, [r1, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	dc05      	bgt.n	800e054 <__sflush_r+0x20>
 800e048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	dc02      	bgt.n	800e054 <__sflush_r+0x20>
 800e04e:	2000      	movs	r0, #0
 800e050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e056:	2e00      	cmp	r6, #0
 800e058:	d0f9      	beq.n	800e04e <__sflush_r+0x1a>
 800e05a:	2300      	movs	r3, #0
 800e05c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e060:	682f      	ldr	r7, [r5, #0]
 800e062:	6a21      	ldr	r1, [r4, #32]
 800e064:	602b      	str	r3, [r5, #0]
 800e066:	d032      	beq.n	800e0ce <__sflush_r+0x9a>
 800e068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e06a:	89a3      	ldrh	r3, [r4, #12]
 800e06c:	075a      	lsls	r2, r3, #29
 800e06e:	d505      	bpl.n	800e07c <__sflush_r+0x48>
 800e070:	6863      	ldr	r3, [r4, #4]
 800e072:	1ac0      	subs	r0, r0, r3
 800e074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e076:	b10b      	cbz	r3, 800e07c <__sflush_r+0x48>
 800e078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e07a:	1ac0      	subs	r0, r0, r3
 800e07c:	2300      	movs	r3, #0
 800e07e:	4602      	mov	r2, r0
 800e080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e082:	6a21      	ldr	r1, [r4, #32]
 800e084:	4628      	mov	r0, r5
 800e086:	47b0      	blx	r6
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	d106      	bne.n	800e09c <__sflush_r+0x68>
 800e08e:	6829      	ldr	r1, [r5, #0]
 800e090:	291d      	cmp	r1, #29
 800e092:	d82b      	bhi.n	800e0ec <__sflush_r+0xb8>
 800e094:	4a29      	ldr	r2, [pc, #164]	; (800e13c <__sflush_r+0x108>)
 800e096:	410a      	asrs	r2, r1
 800e098:	07d6      	lsls	r6, r2, #31
 800e09a:	d427      	bmi.n	800e0ec <__sflush_r+0xb8>
 800e09c:	2200      	movs	r2, #0
 800e09e:	6062      	str	r2, [r4, #4]
 800e0a0:	04d9      	lsls	r1, r3, #19
 800e0a2:	6922      	ldr	r2, [r4, #16]
 800e0a4:	6022      	str	r2, [r4, #0]
 800e0a6:	d504      	bpl.n	800e0b2 <__sflush_r+0x7e>
 800e0a8:	1c42      	adds	r2, r0, #1
 800e0aa:	d101      	bne.n	800e0b0 <__sflush_r+0x7c>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	b903      	cbnz	r3, 800e0b2 <__sflush_r+0x7e>
 800e0b0:	6560      	str	r0, [r4, #84]	; 0x54
 800e0b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0b4:	602f      	str	r7, [r5, #0]
 800e0b6:	2900      	cmp	r1, #0
 800e0b8:	d0c9      	beq.n	800e04e <__sflush_r+0x1a>
 800e0ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0be:	4299      	cmp	r1, r3
 800e0c0:	d002      	beq.n	800e0c8 <__sflush_r+0x94>
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f7ff f9e2 	bl	800d48c <_free_r>
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	6360      	str	r0, [r4, #52]	; 0x34
 800e0cc:	e7c0      	b.n	800e050 <__sflush_r+0x1c>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	47b0      	blx	r6
 800e0d4:	1c41      	adds	r1, r0, #1
 800e0d6:	d1c8      	bne.n	800e06a <__sflush_r+0x36>
 800e0d8:	682b      	ldr	r3, [r5, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0c5      	beq.n	800e06a <__sflush_r+0x36>
 800e0de:	2b1d      	cmp	r3, #29
 800e0e0:	d001      	beq.n	800e0e6 <__sflush_r+0xb2>
 800e0e2:	2b16      	cmp	r3, #22
 800e0e4:	d101      	bne.n	800e0ea <__sflush_r+0xb6>
 800e0e6:	602f      	str	r7, [r5, #0]
 800e0e8:	e7b1      	b.n	800e04e <__sflush_r+0x1a>
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f0:	81a3      	strh	r3, [r4, #12]
 800e0f2:	e7ad      	b.n	800e050 <__sflush_r+0x1c>
 800e0f4:	690f      	ldr	r7, [r1, #16]
 800e0f6:	2f00      	cmp	r7, #0
 800e0f8:	d0a9      	beq.n	800e04e <__sflush_r+0x1a>
 800e0fa:	0793      	lsls	r3, r2, #30
 800e0fc:	680e      	ldr	r6, [r1, #0]
 800e0fe:	bf08      	it	eq
 800e100:	694b      	ldreq	r3, [r1, #20]
 800e102:	600f      	str	r7, [r1, #0]
 800e104:	bf18      	it	ne
 800e106:	2300      	movne	r3, #0
 800e108:	eba6 0807 	sub.w	r8, r6, r7
 800e10c:	608b      	str	r3, [r1, #8]
 800e10e:	f1b8 0f00 	cmp.w	r8, #0
 800e112:	dd9c      	ble.n	800e04e <__sflush_r+0x1a>
 800e114:	6a21      	ldr	r1, [r4, #32]
 800e116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e118:	4643      	mov	r3, r8
 800e11a:	463a      	mov	r2, r7
 800e11c:	4628      	mov	r0, r5
 800e11e:	47b0      	blx	r6
 800e120:	2800      	cmp	r0, #0
 800e122:	dc06      	bgt.n	800e132 <__sflush_r+0xfe>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	e78e      	b.n	800e050 <__sflush_r+0x1c>
 800e132:	4407      	add	r7, r0
 800e134:	eba8 0800 	sub.w	r8, r8, r0
 800e138:	e7e9      	b.n	800e10e <__sflush_r+0xda>
 800e13a:	bf00      	nop
 800e13c:	dfbffffe 	.word	0xdfbffffe

0800e140 <_fflush_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	690b      	ldr	r3, [r1, #16]
 800e144:	4605      	mov	r5, r0
 800e146:	460c      	mov	r4, r1
 800e148:	b913      	cbnz	r3, 800e150 <_fflush_r+0x10>
 800e14a:	2500      	movs	r5, #0
 800e14c:	4628      	mov	r0, r5
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	b118      	cbz	r0, 800e15a <_fflush_r+0x1a>
 800e152:	6a03      	ldr	r3, [r0, #32]
 800e154:	b90b      	cbnz	r3, 800e15a <_fflush_r+0x1a>
 800e156:	f7fe f9a3 	bl	800c4a0 <__sinit>
 800e15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0f3      	beq.n	800e14a <_fflush_r+0xa>
 800e162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e164:	07d0      	lsls	r0, r2, #31
 800e166:	d404      	bmi.n	800e172 <_fflush_r+0x32>
 800e168:	0599      	lsls	r1, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_fflush_r+0x32>
 800e16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16e:	f7fe fb03 	bl	800c778 <__retarget_lock_acquire_recursive>
 800e172:	4628      	mov	r0, r5
 800e174:	4621      	mov	r1, r4
 800e176:	f7ff ff5d 	bl	800e034 <__sflush_r>
 800e17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e17c:	07da      	lsls	r2, r3, #31
 800e17e:	4605      	mov	r5, r0
 800e180:	d4e4      	bmi.n	800e14c <_fflush_r+0xc>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	059b      	lsls	r3, r3, #22
 800e186:	d4e1      	bmi.n	800e14c <_fflush_r+0xc>
 800e188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e18a:	f7fe faf6 	bl	800c77a <__retarget_lock_release_recursive>
 800e18e:	e7dd      	b.n	800e14c <_fflush_r+0xc>

0800e190 <memmove>:
 800e190:	4288      	cmp	r0, r1
 800e192:	b510      	push	{r4, lr}
 800e194:	eb01 0402 	add.w	r4, r1, r2
 800e198:	d902      	bls.n	800e1a0 <memmove+0x10>
 800e19a:	4284      	cmp	r4, r0
 800e19c:	4623      	mov	r3, r4
 800e19e:	d807      	bhi.n	800e1b0 <memmove+0x20>
 800e1a0:	1e43      	subs	r3, r0, #1
 800e1a2:	42a1      	cmp	r1, r4
 800e1a4:	d008      	beq.n	800e1b8 <memmove+0x28>
 800e1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1ae:	e7f8      	b.n	800e1a2 <memmove+0x12>
 800e1b0:	4402      	add	r2, r0
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	428a      	cmp	r2, r1
 800e1b6:	d100      	bne.n	800e1ba <memmove+0x2a>
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1c2:	e7f7      	b.n	800e1b4 <memmove+0x24>

0800e1c4 <_sbrk_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d06      	ldr	r5, [pc, #24]	; (800e1e0 <_sbrk_r+0x1c>)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f5 fab8 	bl	8003744 <_sbrk>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_sbrk_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_sbrk_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	200053fc 	.word	0x200053fc

0800e1e4 <__assert_func>:
 800e1e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1e6:	4614      	mov	r4, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4b09      	ldr	r3, [pc, #36]	; (800e210 <__assert_func+0x2c>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	68d8      	ldr	r0, [r3, #12]
 800e1f2:	b14c      	cbz	r4, 800e208 <__assert_func+0x24>
 800e1f4:	4b07      	ldr	r3, [pc, #28]	; (800e214 <__assert_func+0x30>)
 800e1f6:	9100      	str	r1, [sp, #0]
 800e1f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1fc:	4906      	ldr	r1, [pc, #24]	; (800e218 <__assert_func+0x34>)
 800e1fe:	462b      	mov	r3, r5
 800e200:	f000 f872 	bl	800e2e8 <fiprintf>
 800e204:	f000 f882 	bl	800e30c <abort>
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <__assert_func+0x38>)
 800e20a:	461c      	mov	r4, r3
 800e20c:	e7f3      	b.n	800e1f6 <__assert_func+0x12>
 800e20e:	bf00      	nop
 800e210:	20000094 	.word	0x20000094
 800e214:	0800f75f 	.word	0x0800f75f
 800e218:	0800f76c 	.word	0x0800f76c
 800e21c:	0800f79a 	.word	0x0800f79a

0800e220 <_calloc_r>:
 800e220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e222:	fba1 2402 	umull	r2, r4, r1, r2
 800e226:	b94c      	cbnz	r4, 800e23c <_calloc_r+0x1c>
 800e228:	4611      	mov	r1, r2
 800e22a:	9201      	str	r2, [sp, #4]
 800e22c:	f7ff f9a2 	bl	800d574 <_malloc_r>
 800e230:	9a01      	ldr	r2, [sp, #4]
 800e232:	4605      	mov	r5, r0
 800e234:	b930      	cbnz	r0, 800e244 <_calloc_r+0x24>
 800e236:	4628      	mov	r0, r5
 800e238:	b003      	add	sp, #12
 800e23a:	bd30      	pop	{r4, r5, pc}
 800e23c:	220c      	movs	r2, #12
 800e23e:	6002      	str	r2, [r0, #0]
 800e240:	2500      	movs	r5, #0
 800e242:	e7f8      	b.n	800e236 <_calloc_r+0x16>
 800e244:	4621      	mov	r1, r4
 800e246:	f7fe f9c4 	bl	800c5d2 <memset>
 800e24a:	e7f4      	b.n	800e236 <_calloc_r+0x16>

0800e24c <__ascii_mbtowc>:
 800e24c:	b082      	sub	sp, #8
 800e24e:	b901      	cbnz	r1, 800e252 <__ascii_mbtowc+0x6>
 800e250:	a901      	add	r1, sp, #4
 800e252:	b142      	cbz	r2, 800e266 <__ascii_mbtowc+0x1a>
 800e254:	b14b      	cbz	r3, 800e26a <__ascii_mbtowc+0x1e>
 800e256:	7813      	ldrb	r3, [r2, #0]
 800e258:	600b      	str	r3, [r1, #0]
 800e25a:	7812      	ldrb	r2, [r2, #0]
 800e25c:	1e10      	subs	r0, r2, #0
 800e25e:	bf18      	it	ne
 800e260:	2001      	movne	r0, #1
 800e262:	b002      	add	sp, #8
 800e264:	4770      	bx	lr
 800e266:	4610      	mov	r0, r2
 800e268:	e7fb      	b.n	800e262 <__ascii_mbtowc+0x16>
 800e26a:	f06f 0001 	mvn.w	r0, #1
 800e26e:	e7f8      	b.n	800e262 <__ascii_mbtowc+0x16>

0800e270 <_realloc_r>:
 800e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e274:	4680      	mov	r8, r0
 800e276:	4614      	mov	r4, r2
 800e278:	460e      	mov	r6, r1
 800e27a:	b921      	cbnz	r1, 800e286 <_realloc_r+0x16>
 800e27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e280:	4611      	mov	r1, r2
 800e282:	f7ff b977 	b.w	800d574 <_malloc_r>
 800e286:	b92a      	cbnz	r2, 800e294 <_realloc_r+0x24>
 800e288:	f7ff f900 	bl	800d48c <_free_r>
 800e28c:	4625      	mov	r5, r4
 800e28e:	4628      	mov	r0, r5
 800e290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e294:	f000 f841 	bl	800e31a <_malloc_usable_size_r>
 800e298:	4284      	cmp	r4, r0
 800e29a:	4607      	mov	r7, r0
 800e29c:	d802      	bhi.n	800e2a4 <_realloc_r+0x34>
 800e29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2a2:	d812      	bhi.n	800e2ca <_realloc_r+0x5a>
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f7ff f964 	bl	800d574 <_malloc_r>
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d0ed      	beq.n	800e28e <_realloc_r+0x1e>
 800e2b2:	42bc      	cmp	r4, r7
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4631      	mov	r1, r6
 800e2b8:	bf28      	it	cs
 800e2ba:	463a      	movcs	r2, r7
 800e2bc:	f7fe fa5e 	bl	800c77c <memcpy>
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	f7ff f8e2 	bl	800d48c <_free_r>
 800e2c8:	e7e1      	b.n	800e28e <_realloc_r+0x1e>
 800e2ca:	4635      	mov	r5, r6
 800e2cc:	e7df      	b.n	800e28e <_realloc_r+0x1e>

0800e2ce <__ascii_wctomb>:
 800e2ce:	b149      	cbz	r1, 800e2e4 <__ascii_wctomb+0x16>
 800e2d0:	2aff      	cmp	r2, #255	; 0xff
 800e2d2:	bf85      	ittet	hi
 800e2d4:	238a      	movhi	r3, #138	; 0x8a
 800e2d6:	6003      	strhi	r3, [r0, #0]
 800e2d8:	700a      	strbls	r2, [r1, #0]
 800e2da:	f04f 30ff 	movhi.w	r0, #4294967295
 800e2de:	bf98      	it	ls
 800e2e0:	2001      	movls	r0, #1
 800e2e2:	4770      	bx	lr
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	4770      	bx	lr

0800e2e8 <fiprintf>:
 800e2e8:	b40e      	push	{r1, r2, r3}
 800e2ea:	b503      	push	{r0, r1, lr}
 800e2ec:	4601      	mov	r1, r0
 800e2ee:	ab03      	add	r3, sp, #12
 800e2f0:	4805      	ldr	r0, [pc, #20]	; (800e308 <fiprintf+0x20>)
 800e2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2f6:	6800      	ldr	r0, [r0, #0]
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	f000 f83f 	bl	800e37c <_vfiprintf_r>
 800e2fe:	b002      	add	sp, #8
 800e300:	f85d eb04 	ldr.w	lr, [sp], #4
 800e304:	b003      	add	sp, #12
 800e306:	4770      	bx	lr
 800e308:	20000094 	.word	0x20000094

0800e30c <abort>:
 800e30c:	b508      	push	{r3, lr}
 800e30e:	2006      	movs	r0, #6
 800e310:	f000 fa0c 	bl	800e72c <raise>
 800e314:	2001      	movs	r0, #1
 800e316:	f7f5 f99d 	bl	8003654 <_exit>

0800e31a <_malloc_usable_size_r>:
 800e31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e31e:	1f18      	subs	r0, r3, #4
 800e320:	2b00      	cmp	r3, #0
 800e322:	bfbc      	itt	lt
 800e324:	580b      	ldrlt	r3, [r1, r0]
 800e326:	18c0      	addlt	r0, r0, r3
 800e328:	4770      	bx	lr

0800e32a <__sfputc_r>:
 800e32a:	6893      	ldr	r3, [r2, #8]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	b410      	push	{r4}
 800e332:	6093      	str	r3, [r2, #8]
 800e334:	da08      	bge.n	800e348 <__sfputc_r+0x1e>
 800e336:	6994      	ldr	r4, [r2, #24]
 800e338:	42a3      	cmp	r3, r4
 800e33a:	db01      	blt.n	800e340 <__sfputc_r+0x16>
 800e33c:	290a      	cmp	r1, #10
 800e33e:	d103      	bne.n	800e348 <__sfputc_r+0x1e>
 800e340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e344:	f000 b934 	b.w	800e5b0 <__swbuf_r>
 800e348:	6813      	ldr	r3, [r2, #0]
 800e34a:	1c58      	adds	r0, r3, #1
 800e34c:	6010      	str	r0, [r2, #0]
 800e34e:	7019      	strb	r1, [r3, #0]
 800e350:	4608      	mov	r0, r1
 800e352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <__sfputs_r>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	4614      	mov	r4, r2
 800e360:	18d5      	adds	r5, r2, r3
 800e362:	42ac      	cmp	r4, r5
 800e364:	d101      	bne.n	800e36a <__sfputs_r+0x12>
 800e366:	2000      	movs	r0, #0
 800e368:	e007      	b.n	800e37a <__sfputs_r+0x22>
 800e36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36e:	463a      	mov	r2, r7
 800e370:	4630      	mov	r0, r6
 800e372:	f7ff ffda 	bl	800e32a <__sfputc_r>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	d1f3      	bne.n	800e362 <__sfputs_r+0xa>
 800e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e37c <_vfiprintf_r>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	460d      	mov	r5, r1
 800e382:	b09d      	sub	sp, #116	; 0x74
 800e384:	4614      	mov	r4, r2
 800e386:	4698      	mov	r8, r3
 800e388:	4606      	mov	r6, r0
 800e38a:	b118      	cbz	r0, 800e394 <_vfiprintf_r+0x18>
 800e38c:	6a03      	ldr	r3, [r0, #32]
 800e38e:	b90b      	cbnz	r3, 800e394 <_vfiprintf_r+0x18>
 800e390:	f7fe f886 	bl	800c4a0 <__sinit>
 800e394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e396:	07d9      	lsls	r1, r3, #31
 800e398:	d405      	bmi.n	800e3a6 <_vfiprintf_r+0x2a>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	059a      	lsls	r2, r3, #22
 800e39e:	d402      	bmi.n	800e3a6 <_vfiprintf_r+0x2a>
 800e3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3a2:	f7fe f9e9 	bl	800c778 <__retarget_lock_acquire_recursive>
 800e3a6:	89ab      	ldrh	r3, [r5, #12]
 800e3a8:	071b      	lsls	r3, r3, #28
 800e3aa:	d501      	bpl.n	800e3b0 <_vfiprintf_r+0x34>
 800e3ac:	692b      	ldr	r3, [r5, #16]
 800e3ae:	b99b      	cbnz	r3, 800e3d8 <_vfiprintf_r+0x5c>
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f000 f93a 	bl	800e62c <__swsetup_r>
 800e3b8:	b170      	cbz	r0, 800e3d8 <_vfiprintf_r+0x5c>
 800e3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3bc:	07dc      	lsls	r4, r3, #31
 800e3be:	d504      	bpl.n	800e3ca <_vfiprintf_r+0x4e>
 800e3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c4:	b01d      	add	sp, #116	; 0x74
 800e3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	0598      	lsls	r0, r3, #22
 800e3ce:	d4f7      	bmi.n	800e3c0 <_vfiprintf_r+0x44>
 800e3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3d2:	f7fe f9d2 	bl	800c77a <__retarget_lock_release_recursive>
 800e3d6:	e7f3      	b.n	800e3c0 <_vfiprintf_r+0x44>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	9309      	str	r3, [sp, #36]	; 0x24
 800e3dc:	2320      	movs	r3, #32
 800e3de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3e6:	2330      	movs	r3, #48	; 0x30
 800e3e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e59c <_vfiprintf_r+0x220>
 800e3ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3f0:	f04f 0901 	mov.w	r9, #1
 800e3f4:	4623      	mov	r3, r4
 800e3f6:	469a      	mov	sl, r3
 800e3f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3fc:	b10a      	cbz	r2, 800e402 <_vfiprintf_r+0x86>
 800e3fe:	2a25      	cmp	r2, #37	; 0x25
 800e400:	d1f9      	bne.n	800e3f6 <_vfiprintf_r+0x7a>
 800e402:	ebba 0b04 	subs.w	fp, sl, r4
 800e406:	d00b      	beq.n	800e420 <_vfiprintf_r+0xa4>
 800e408:	465b      	mov	r3, fp
 800e40a:	4622      	mov	r2, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	4630      	mov	r0, r6
 800e410:	f7ff ffa2 	bl	800e358 <__sfputs_r>
 800e414:	3001      	adds	r0, #1
 800e416:	f000 80a9 	beq.w	800e56c <_vfiprintf_r+0x1f0>
 800e41a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e41c:	445a      	add	r2, fp
 800e41e:	9209      	str	r2, [sp, #36]	; 0x24
 800e420:	f89a 3000 	ldrb.w	r3, [sl]
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 80a1 	beq.w	800e56c <_vfiprintf_r+0x1f0>
 800e42a:	2300      	movs	r3, #0
 800e42c:	f04f 32ff 	mov.w	r2, #4294967295
 800e430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e434:	f10a 0a01 	add.w	sl, sl, #1
 800e438:	9304      	str	r3, [sp, #16]
 800e43a:	9307      	str	r3, [sp, #28]
 800e43c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e440:	931a      	str	r3, [sp, #104]	; 0x68
 800e442:	4654      	mov	r4, sl
 800e444:	2205      	movs	r2, #5
 800e446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e44a:	4854      	ldr	r0, [pc, #336]	; (800e59c <_vfiprintf_r+0x220>)
 800e44c:	f7f1 fec0 	bl	80001d0 <memchr>
 800e450:	9a04      	ldr	r2, [sp, #16]
 800e452:	b9d8      	cbnz	r0, 800e48c <_vfiprintf_r+0x110>
 800e454:	06d1      	lsls	r1, r2, #27
 800e456:	bf44      	itt	mi
 800e458:	2320      	movmi	r3, #32
 800e45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e45e:	0713      	lsls	r3, r2, #28
 800e460:	bf44      	itt	mi
 800e462:	232b      	movmi	r3, #43	; 0x2b
 800e464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e468:	f89a 3000 	ldrb.w	r3, [sl]
 800e46c:	2b2a      	cmp	r3, #42	; 0x2a
 800e46e:	d015      	beq.n	800e49c <_vfiprintf_r+0x120>
 800e470:	9a07      	ldr	r2, [sp, #28]
 800e472:	4654      	mov	r4, sl
 800e474:	2000      	movs	r0, #0
 800e476:	f04f 0c0a 	mov.w	ip, #10
 800e47a:	4621      	mov	r1, r4
 800e47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e480:	3b30      	subs	r3, #48	; 0x30
 800e482:	2b09      	cmp	r3, #9
 800e484:	d94d      	bls.n	800e522 <_vfiprintf_r+0x1a6>
 800e486:	b1b0      	cbz	r0, 800e4b6 <_vfiprintf_r+0x13a>
 800e488:	9207      	str	r2, [sp, #28]
 800e48a:	e014      	b.n	800e4b6 <_vfiprintf_r+0x13a>
 800e48c:	eba0 0308 	sub.w	r3, r0, r8
 800e490:	fa09 f303 	lsl.w	r3, r9, r3
 800e494:	4313      	orrs	r3, r2
 800e496:	9304      	str	r3, [sp, #16]
 800e498:	46a2      	mov	sl, r4
 800e49a:	e7d2      	b.n	800e442 <_vfiprintf_r+0xc6>
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	1d19      	adds	r1, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	9103      	str	r1, [sp, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	bfbb      	ittet	lt
 800e4a8:	425b      	neglt	r3, r3
 800e4aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ae:	9307      	strge	r3, [sp, #28]
 800e4b0:	9307      	strlt	r3, [sp, #28]
 800e4b2:	bfb8      	it	lt
 800e4b4:	9204      	strlt	r2, [sp, #16]
 800e4b6:	7823      	ldrb	r3, [r4, #0]
 800e4b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e4ba:	d10c      	bne.n	800e4d6 <_vfiprintf_r+0x15a>
 800e4bc:	7863      	ldrb	r3, [r4, #1]
 800e4be:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c0:	d134      	bne.n	800e52c <_vfiprintf_r+0x1b0>
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	1d1a      	adds	r2, r3, #4
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	9203      	str	r2, [sp, #12]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	bfb8      	it	lt
 800e4ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4d2:	3402      	adds	r4, #2
 800e4d4:	9305      	str	r3, [sp, #20]
 800e4d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e5ac <_vfiprintf_r+0x230>
 800e4da:	7821      	ldrb	r1, [r4, #0]
 800e4dc:	2203      	movs	r2, #3
 800e4de:	4650      	mov	r0, sl
 800e4e0:	f7f1 fe76 	bl	80001d0 <memchr>
 800e4e4:	b138      	cbz	r0, 800e4f6 <_vfiprintf_r+0x17a>
 800e4e6:	9b04      	ldr	r3, [sp, #16]
 800e4e8:	eba0 000a 	sub.w	r0, r0, sl
 800e4ec:	2240      	movs	r2, #64	; 0x40
 800e4ee:	4082      	lsls	r2, r0
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	3401      	adds	r4, #1
 800e4f4:	9304      	str	r3, [sp, #16]
 800e4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4fa:	4829      	ldr	r0, [pc, #164]	; (800e5a0 <_vfiprintf_r+0x224>)
 800e4fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e500:	2206      	movs	r2, #6
 800e502:	f7f1 fe65 	bl	80001d0 <memchr>
 800e506:	2800      	cmp	r0, #0
 800e508:	d03f      	beq.n	800e58a <_vfiprintf_r+0x20e>
 800e50a:	4b26      	ldr	r3, [pc, #152]	; (800e5a4 <_vfiprintf_r+0x228>)
 800e50c:	bb1b      	cbnz	r3, 800e556 <_vfiprintf_r+0x1da>
 800e50e:	9b03      	ldr	r3, [sp, #12]
 800e510:	3307      	adds	r3, #7
 800e512:	f023 0307 	bic.w	r3, r3, #7
 800e516:	3308      	adds	r3, #8
 800e518:	9303      	str	r3, [sp, #12]
 800e51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e51c:	443b      	add	r3, r7
 800e51e:	9309      	str	r3, [sp, #36]	; 0x24
 800e520:	e768      	b.n	800e3f4 <_vfiprintf_r+0x78>
 800e522:	fb0c 3202 	mla	r2, ip, r2, r3
 800e526:	460c      	mov	r4, r1
 800e528:	2001      	movs	r0, #1
 800e52a:	e7a6      	b.n	800e47a <_vfiprintf_r+0xfe>
 800e52c:	2300      	movs	r3, #0
 800e52e:	3401      	adds	r4, #1
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	4619      	mov	r1, r3
 800e534:	f04f 0c0a 	mov.w	ip, #10
 800e538:	4620      	mov	r0, r4
 800e53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e53e:	3a30      	subs	r2, #48	; 0x30
 800e540:	2a09      	cmp	r2, #9
 800e542:	d903      	bls.n	800e54c <_vfiprintf_r+0x1d0>
 800e544:	2b00      	cmp	r3, #0
 800e546:	d0c6      	beq.n	800e4d6 <_vfiprintf_r+0x15a>
 800e548:	9105      	str	r1, [sp, #20]
 800e54a:	e7c4      	b.n	800e4d6 <_vfiprintf_r+0x15a>
 800e54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e550:	4604      	mov	r4, r0
 800e552:	2301      	movs	r3, #1
 800e554:	e7f0      	b.n	800e538 <_vfiprintf_r+0x1bc>
 800e556:	ab03      	add	r3, sp, #12
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	462a      	mov	r2, r5
 800e55c:	4b12      	ldr	r3, [pc, #72]	; (800e5a8 <_vfiprintf_r+0x22c>)
 800e55e:	a904      	add	r1, sp, #16
 800e560:	4630      	mov	r0, r6
 800e562:	f7fd fb5d 	bl	800bc20 <_printf_float>
 800e566:	4607      	mov	r7, r0
 800e568:	1c78      	adds	r0, r7, #1
 800e56a:	d1d6      	bne.n	800e51a <_vfiprintf_r+0x19e>
 800e56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e56e:	07d9      	lsls	r1, r3, #31
 800e570:	d405      	bmi.n	800e57e <_vfiprintf_r+0x202>
 800e572:	89ab      	ldrh	r3, [r5, #12]
 800e574:	059a      	lsls	r2, r3, #22
 800e576:	d402      	bmi.n	800e57e <_vfiprintf_r+0x202>
 800e578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e57a:	f7fe f8fe 	bl	800c77a <__retarget_lock_release_recursive>
 800e57e:	89ab      	ldrh	r3, [r5, #12]
 800e580:	065b      	lsls	r3, r3, #25
 800e582:	f53f af1d 	bmi.w	800e3c0 <_vfiprintf_r+0x44>
 800e586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e588:	e71c      	b.n	800e3c4 <_vfiprintf_r+0x48>
 800e58a:	ab03      	add	r3, sp, #12
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	462a      	mov	r2, r5
 800e590:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <_vfiprintf_r+0x22c>)
 800e592:	a904      	add	r1, sp, #16
 800e594:	4630      	mov	r0, r6
 800e596:	f7fd fde7 	bl	800c168 <_printf_i>
 800e59a:	e7e4      	b.n	800e566 <_vfiprintf_r+0x1ea>
 800e59c:	0800f744 	.word	0x0800f744
 800e5a0:	0800f74e 	.word	0x0800f74e
 800e5a4:	0800bc21 	.word	0x0800bc21
 800e5a8:	0800e359 	.word	0x0800e359
 800e5ac:	0800f74a 	.word	0x0800f74a

0800e5b0 <__swbuf_r>:
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	460e      	mov	r6, r1
 800e5b4:	4614      	mov	r4, r2
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	b118      	cbz	r0, 800e5c2 <__swbuf_r+0x12>
 800e5ba:	6a03      	ldr	r3, [r0, #32]
 800e5bc:	b90b      	cbnz	r3, 800e5c2 <__swbuf_r+0x12>
 800e5be:	f7fd ff6f 	bl	800c4a0 <__sinit>
 800e5c2:	69a3      	ldr	r3, [r4, #24]
 800e5c4:	60a3      	str	r3, [r4, #8]
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	071a      	lsls	r2, r3, #28
 800e5ca:	d525      	bpl.n	800e618 <__swbuf_r+0x68>
 800e5cc:	6923      	ldr	r3, [r4, #16]
 800e5ce:	b31b      	cbz	r3, 800e618 <__swbuf_r+0x68>
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	6922      	ldr	r2, [r4, #16]
 800e5d4:	1a98      	subs	r0, r3, r2
 800e5d6:	6963      	ldr	r3, [r4, #20]
 800e5d8:	b2f6      	uxtb	r6, r6
 800e5da:	4283      	cmp	r3, r0
 800e5dc:	4637      	mov	r7, r6
 800e5de:	dc04      	bgt.n	800e5ea <__swbuf_r+0x3a>
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	f7ff fdac 	bl	800e140 <_fflush_r>
 800e5e8:	b9e0      	cbnz	r0, 800e624 <__swbuf_r+0x74>
 800e5ea:	68a3      	ldr	r3, [r4, #8]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	60a3      	str	r3, [r4, #8]
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	6022      	str	r2, [r4, #0]
 800e5f6:	701e      	strb	r6, [r3, #0]
 800e5f8:	6962      	ldr	r2, [r4, #20]
 800e5fa:	1c43      	adds	r3, r0, #1
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d004      	beq.n	800e60a <__swbuf_r+0x5a>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	07db      	lsls	r3, r3, #31
 800e604:	d506      	bpl.n	800e614 <__swbuf_r+0x64>
 800e606:	2e0a      	cmp	r6, #10
 800e608:	d104      	bne.n	800e614 <__swbuf_r+0x64>
 800e60a:	4621      	mov	r1, r4
 800e60c:	4628      	mov	r0, r5
 800e60e:	f7ff fd97 	bl	800e140 <_fflush_r>
 800e612:	b938      	cbnz	r0, 800e624 <__swbuf_r+0x74>
 800e614:	4638      	mov	r0, r7
 800e616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e618:	4621      	mov	r1, r4
 800e61a:	4628      	mov	r0, r5
 800e61c:	f000 f806 	bl	800e62c <__swsetup_r>
 800e620:	2800      	cmp	r0, #0
 800e622:	d0d5      	beq.n	800e5d0 <__swbuf_r+0x20>
 800e624:	f04f 37ff 	mov.w	r7, #4294967295
 800e628:	e7f4      	b.n	800e614 <__swbuf_r+0x64>
	...

0800e62c <__swsetup_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4b2a      	ldr	r3, [pc, #168]	; (800e6d8 <__swsetup_r+0xac>)
 800e630:	4605      	mov	r5, r0
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	460c      	mov	r4, r1
 800e636:	b118      	cbz	r0, 800e640 <__swsetup_r+0x14>
 800e638:	6a03      	ldr	r3, [r0, #32]
 800e63a:	b90b      	cbnz	r3, 800e640 <__swsetup_r+0x14>
 800e63c:	f7fd ff30 	bl	800c4a0 <__sinit>
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e646:	0718      	lsls	r0, r3, #28
 800e648:	d422      	bmi.n	800e690 <__swsetup_r+0x64>
 800e64a:	06d9      	lsls	r1, r3, #27
 800e64c:	d407      	bmi.n	800e65e <__swsetup_r+0x32>
 800e64e:	2309      	movs	r3, #9
 800e650:	602b      	str	r3, [r5, #0]
 800e652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e656:	81a3      	strh	r3, [r4, #12]
 800e658:	f04f 30ff 	mov.w	r0, #4294967295
 800e65c:	e034      	b.n	800e6c8 <__swsetup_r+0x9c>
 800e65e:	0758      	lsls	r0, r3, #29
 800e660:	d512      	bpl.n	800e688 <__swsetup_r+0x5c>
 800e662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e664:	b141      	cbz	r1, 800e678 <__swsetup_r+0x4c>
 800e666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e66a:	4299      	cmp	r1, r3
 800e66c:	d002      	beq.n	800e674 <__swsetup_r+0x48>
 800e66e:	4628      	mov	r0, r5
 800e670:	f7fe ff0c 	bl	800d48c <_free_r>
 800e674:	2300      	movs	r3, #0
 800e676:	6363      	str	r3, [r4, #52]	; 0x34
 800e678:	89a3      	ldrh	r3, [r4, #12]
 800e67a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e67e:	81a3      	strh	r3, [r4, #12]
 800e680:	2300      	movs	r3, #0
 800e682:	6063      	str	r3, [r4, #4]
 800e684:	6923      	ldr	r3, [r4, #16]
 800e686:	6023      	str	r3, [r4, #0]
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	f043 0308 	orr.w	r3, r3, #8
 800e68e:	81a3      	strh	r3, [r4, #12]
 800e690:	6923      	ldr	r3, [r4, #16]
 800e692:	b94b      	cbnz	r3, 800e6a8 <__swsetup_r+0x7c>
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e69e:	d003      	beq.n	800e6a8 <__swsetup_r+0x7c>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 f884 	bl	800e7b0 <__smakebuf_r>
 800e6a8:	89a0      	ldrh	r0, [r4, #12]
 800e6aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6ae:	f010 0301 	ands.w	r3, r0, #1
 800e6b2:	d00a      	beq.n	800e6ca <__swsetup_r+0x9e>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60a3      	str	r3, [r4, #8]
 800e6b8:	6963      	ldr	r3, [r4, #20]
 800e6ba:	425b      	negs	r3, r3
 800e6bc:	61a3      	str	r3, [r4, #24]
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	b943      	cbnz	r3, 800e6d4 <__swsetup_r+0xa8>
 800e6c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6c6:	d1c4      	bne.n	800e652 <__swsetup_r+0x26>
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	0781      	lsls	r1, r0, #30
 800e6cc:	bf58      	it	pl
 800e6ce:	6963      	ldrpl	r3, [r4, #20]
 800e6d0:	60a3      	str	r3, [r4, #8]
 800e6d2:	e7f4      	b.n	800e6be <__swsetup_r+0x92>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e7f7      	b.n	800e6c8 <__swsetup_r+0x9c>
 800e6d8:	20000094 	.word	0x20000094

0800e6dc <_raise_r>:
 800e6dc:	291f      	cmp	r1, #31
 800e6de:	b538      	push	{r3, r4, r5, lr}
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	460d      	mov	r5, r1
 800e6e4:	d904      	bls.n	800e6f0 <_raise_r+0x14>
 800e6e6:	2316      	movs	r3, #22
 800e6e8:	6003      	str	r3, [r0, #0]
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e6f2:	b112      	cbz	r2, 800e6fa <_raise_r+0x1e>
 800e6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6f8:	b94b      	cbnz	r3, 800e70e <_raise_r+0x32>
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f000 f830 	bl	800e760 <_getpid_r>
 800e700:	462a      	mov	r2, r5
 800e702:	4601      	mov	r1, r0
 800e704:	4620      	mov	r0, r4
 800e706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e70a:	f000 b817 	b.w	800e73c <_kill_r>
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d00a      	beq.n	800e728 <_raise_r+0x4c>
 800e712:	1c59      	adds	r1, r3, #1
 800e714:	d103      	bne.n	800e71e <_raise_r+0x42>
 800e716:	2316      	movs	r3, #22
 800e718:	6003      	str	r3, [r0, #0]
 800e71a:	2001      	movs	r0, #1
 800e71c:	e7e7      	b.n	800e6ee <_raise_r+0x12>
 800e71e:	2400      	movs	r4, #0
 800e720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e724:	4628      	mov	r0, r5
 800e726:	4798      	blx	r3
 800e728:	2000      	movs	r0, #0
 800e72a:	e7e0      	b.n	800e6ee <_raise_r+0x12>

0800e72c <raise>:
 800e72c:	4b02      	ldr	r3, [pc, #8]	; (800e738 <raise+0xc>)
 800e72e:	4601      	mov	r1, r0
 800e730:	6818      	ldr	r0, [r3, #0]
 800e732:	f7ff bfd3 	b.w	800e6dc <_raise_r>
 800e736:	bf00      	nop
 800e738:	20000094 	.word	0x20000094

0800e73c <_kill_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4d07      	ldr	r5, [pc, #28]	; (800e75c <_kill_r+0x20>)
 800e740:	2300      	movs	r3, #0
 800e742:	4604      	mov	r4, r0
 800e744:	4608      	mov	r0, r1
 800e746:	4611      	mov	r1, r2
 800e748:	602b      	str	r3, [r5, #0]
 800e74a:	f7f4 ff73 	bl	8003634 <_kill>
 800e74e:	1c43      	adds	r3, r0, #1
 800e750:	d102      	bne.n	800e758 <_kill_r+0x1c>
 800e752:	682b      	ldr	r3, [r5, #0]
 800e754:	b103      	cbz	r3, 800e758 <_kill_r+0x1c>
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	bf00      	nop
 800e75c:	200053fc 	.word	0x200053fc

0800e760 <_getpid_r>:
 800e760:	f7f4 bf60 	b.w	8003624 <_getpid>

0800e764 <__swhatbuf_r>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	460c      	mov	r4, r1
 800e768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e76c:	2900      	cmp	r1, #0
 800e76e:	b096      	sub	sp, #88	; 0x58
 800e770:	4615      	mov	r5, r2
 800e772:	461e      	mov	r6, r3
 800e774:	da0d      	bge.n	800e792 <__swhatbuf_r+0x2e>
 800e776:	89a3      	ldrh	r3, [r4, #12]
 800e778:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e77c:	f04f 0100 	mov.w	r1, #0
 800e780:	bf0c      	ite	eq
 800e782:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e786:	2340      	movne	r3, #64	; 0x40
 800e788:	2000      	movs	r0, #0
 800e78a:	6031      	str	r1, [r6, #0]
 800e78c:	602b      	str	r3, [r5, #0]
 800e78e:	b016      	add	sp, #88	; 0x58
 800e790:	bd70      	pop	{r4, r5, r6, pc}
 800e792:	466a      	mov	r2, sp
 800e794:	f000 f848 	bl	800e828 <_fstat_r>
 800e798:	2800      	cmp	r0, #0
 800e79a:	dbec      	blt.n	800e776 <__swhatbuf_r+0x12>
 800e79c:	9901      	ldr	r1, [sp, #4]
 800e79e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7a6:	4259      	negs	r1, r3
 800e7a8:	4159      	adcs	r1, r3
 800e7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ae:	e7eb      	b.n	800e788 <__swhatbuf_r+0x24>

0800e7b0 <__smakebuf_r>:
 800e7b0:	898b      	ldrh	r3, [r1, #12]
 800e7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7b4:	079d      	lsls	r5, r3, #30
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	d507      	bpl.n	800e7cc <__smakebuf_r+0x1c>
 800e7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	6163      	str	r3, [r4, #20]
 800e7c8:	b002      	add	sp, #8
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	ab01      	add	r3, sp, #4
 800e7ce:	466a      	mov	r2, sp
 800e7d0:	f7ff ffc8 	bl	800e764 <__swhatbuf_r>
 800e7d4:	9900      	ldr	r1, [sp, #0]
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7fe fecb 	bl	800d574 <_malloc_r>
 800e7de:	b948      	cbnz	r0, 800e7f4 <__smakebuf_r+0x44>
 800e7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e4:	059a      	lsls	r2, r3, #22
 800e7e6:	d4ef      	bmi.n	800e7c8 <__smakebuf_r+0x18>
 800e7e8:	f023 0303 	bic.w	r3, r3, #3
 800e7ec:	f043 0302 	orr.w	r3, r3, #2
 800e7f0:	81a3      	strh	r3, [r4, #12]
 800e7f2:	e7e3      	b.n	800e7bc <__smakebuf_r+0xc>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	6020      	str	r0, [r4, #0]
 800e7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	6163      	str	r3, [r4, #20]
 800e802:	9b01      	ldr	r3, [sp, #4]
 800e804:	6120      	str	r0, [r4, #16]
 800e806:	b15b      	cbz	r3, 800e820 <__smakebuf_r+0x70>
 800e808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e80c:	4630      	mov	r0, r6
 800e80e:	f000 f81d 	bl	800e84c <_isatty_r>
 800e812:	b128      	cbz	r0, 800e820 <__smakebuf_r+0x70>
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	f023 0303 	bic.w	r3, r3, #3
 800e81a:	f043 0301 	orr.w	r3, r3, #1
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	431d      	orrs	r5, r3
 800e824:	81a5      	strh	r5, [r4, #12]
 800e826:	e7cf      	b.n	800e7c8 <__smakebuf_r+0x18>

0800e828 <_fstat_r>:
 800e828:	b538      	push	{r3, r4, r5, lr}
 800e82a:	4d07      	ldr	r5, [pc, #28]	; (800e848 <_fstat_r+0x20>)
 800e82c:	2300      	movs	r3, #0
 800e82e:	4604      	mov	r4, r0
 800e830:	4608      	mov	r0, r1
 800e832:	4611      	mov	r1, r2
 800e834:	602b      	str	r3, [r5, #0]
 800e836:	f7f4 ff5c 	bl	80036f2 <_fstat>
 800e83a:	1c43      	adds	r3, r0, #1
 800e83c:	d102      	bne.n	800e844 <_fstat_r+0x1c>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	b103      	cbz	r3, 800e844 <_fstat_r+0x1c>
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	bd38      	pop	{r3, r4, r5, pc}
 800e846:	bf00      	nop
 800e848:	200053fc 	.word	0x200053fc

0800e84c <_isatty_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4d06      	ldr	r5, [pc, #24]	; (800e868 <_isatty_r+0x1c>)
 800e850:	2300      	movs	r3, #0
 800e852:	4604      	mov	r4, r0
 800e854:	4608      	mov	r0, r1
 800e856:	602b      	str	r3, [r5, #0]
 800e858:	f7f4 ff5b 	bl	8003712 <_isatty>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_isatty_r+0x1a>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_isatty_r+0x1a>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	200053fc 	.word	0x200053fc

0800e86c <_init>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	bf00      	nop
 800e870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e872:	bc08      	pop	{r3}
 800e874:	469e      	mov	lr, r3
 800e876:	4770      	bx	lr

0800e878 <_fini>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	bf00      	nop
 800e87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87e:	bc08      	pop	{r3}
 800e880:	469e      	mov	lr, r3
 800e882:	4770      	bx	lr
