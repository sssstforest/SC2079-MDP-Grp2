
MDP_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800e7ec  0800e7ec  0001e7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9ec  0800e9ec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9ec  0800e9ec  0001e9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9f4  0800e9f4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9f4  0800e9f4  0001e9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9f8  0800e9f8  0001e9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800e9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000053dc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005448  20005448  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001eac5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fb5  00000000  00000000  0003eba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bb0  00000000  00000000  00042b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015fe  00000000  00000000  00044710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004b00  00000000  00000000  00045d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021873  00000000  00000000  0004a80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e97a3  00000000  00000000  0006c081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007cec  00000000  00000000  00155824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0015d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7d4 	.word	0x0800e7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800e7d4 	.word	0x0800e7d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f004 fb5d 	bl	80055bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f8e1 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd4d 	bl	80019a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f000 fd23 	bl	8001954 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f0e:	f000 faa9 	bl	8001464 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f12:	f000 fa09 	bl	8001328 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000f16:	f000 fcf3 	bl	8001900 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f1a:	f000 f9d7 	bl	80012cc <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f1e:	f000 fc43 	bl	80017a8 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000f22:	f000 f92f 	bl	8001184 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f26:	f000 f97f 	bl	8001228 <MX_ADC2_Init>
  MX_TIM5_Init();
 8000f2a:	f000 fbb3 	bl	8001694 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f2e:	f000 faed 	bl	800150c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000f32:	f000 fc03 	bl	800173c <MX_TIM7_Init>
  MX_TIM4_Init();
 8000f36:	f000 fb59 	bl	80015ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    OLED_Init();
 8000f3a:	f00c ff07 	bl	800dd4c <OLED_Init>
    HAL_TIM_Base_Start(&htim7);
 8000f3e:	484c      	ldr	r0, [pc, #304]	; (8001070 <main+0x178>)
 8000f40:	f007 fa44 	bl	80083cc <HAL_TIM_Base_Start>
    HAL_UART_Receive_IT(&huart3, aRxBuffer,RX_BUFFER_SIZE);
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <main+0x17c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	494a      	ldr	r1, [pc, #296]	; (8001078 <main+0x180>)
 8000f4e:	484b      	ldr	r0, [pc, #300]	; (800107c <main+0x184>)
 8000f50:	f009 f86d 	bl	800a02e <HAL_UART_Receive_IT>
    //HAL_UART_Receive_IT(&huart3, Buffer,RX_BUFFER_SIZE);
    ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8000f54:	2203      	movs	r2, #3
 8000f56:	2100      	movs	r1, #0
 8000f58:	4849      	ldr	r0, [pc, #292]	; (8001080 <main+0x188>)
 8000f5a:	f00c fdf0 	bl	800db3e <ICM20948_init>

    // initialise command queue
    curCmd.index = 100;
 8000f5e:	4b49      	ldr	r3, [pc, #292]	; (8001084 <main+0x18c>)
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	701a      	strb	r2, [r3, #0]
    curCmd.val = 0;
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <main+0x18c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	805a      	strh	r2, [r3, #2]

    cQueue.head = 0;
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <main+0x190>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
    cQueue.tail = 0;
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <main+0x190>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
    cQueue.size = CMD_BUFFER_SIZE;
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <main+0x194>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <main+0x190>)
 8000f7c:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e00c      	b.n	8000f9e <main+0xa6>
  	  Command cmd;
  	  cmd.index = 100;
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	703b      	strb	r3, [r7, #0]
  	  cmd.val = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	807b      	strh	r3, [r7, #2]
  	  cQueue.buffer[i] = cmd;
 8000f8c:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <main+0x190>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < CMD_BUFFER_SIZE;i++) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <main+0x194>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbec      	blt.n	8000f84 <main+0x8c>
    }

    PIDConfigInit(&pidTSlow, 3.5, 0.0,0.8);
 8000faa:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001040 <main+0x148>
 8000fae:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001048 <main+0x150>
 8000fb2:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001050 <main+0x158>
 8000fb6:	4836      	ldr	r0, [pc, #216]	; (8001090 <main+0x198>)
 8000fb8:	f001 fafe 	bl	80025b8 <PIDConfigInit>
    PIDConfigInit(&pidSlow, 2.5, 0.0,0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001048 <main+0x150>
 8000fc2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8001058 <main+0x160>
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <main+0x19c>)
 8000fc8:	f001 faf6 	bl	80025b8 <PIDConfigInit>
    PIDConfigInit(&pidFast, 1.48, 0.0,0);//backward: 1.522
 8000fcc:	2100      	movs	r1, #0
 8000fce:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001048 <main+0x150>
 8000fd2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001060 <main+0x168>
 8000fd6:	4830      	ldr	r0, [pc, #192]	; (8001098 <main+0x1a0>)
 8000fd8:	f001 faee 	bl	80025b8 <PIDConfigInit>
    //PIDConfigInit(&pidFast_b, 1.522, 0.0,0);//indoor
    PIDConfigInit(&pidFast_b, 1.522, 0.0,0);//outdoor
 8000fdc:	2100      	movs	r1, #0
 8000fde:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001048 <main+0x150>
 8000fe2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8001068 <main+0x170>
 8000fe6:	482d      	ldr	r0, [pc, #180]	; (800109c <main+0x1a4>)
 8000fe8:	f001 fae6 	bl	80025b8 <PIDConfigInit>
	// servo motor turn
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000fec:	210c      	movs	r1, #12
 8000fee:	482c      	ldr	r0, [pc, #176]	; (80010a0 <main+0x1a8>)
 8000ff0:	f007 fb1e 	bl	8008630 <HAL_TIM_PWM_Start>
	// motor backwheel move
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <main+0x1ac>)
 8000ff8:	f007 fb1a 	bl	8008630 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	4829      	ldr	r0, [pc, #164]	; (80010a4 <main+0x1ac>)
 8001000:	f007 fb16 	bl	8008630 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001004:	213c      	movs	r1, #60	; 0x3c
 8001006:	4828      	ldr	r0, [pc, #160]	; (80010a8 <main+0x1b0>)
 8001008:	f007 fdf8 	bl	8008bfc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800100c:	213c      	movs	r1, #60	; 0x3c
 800100e:	4827      	ldr	r0, [pc, #156]	; (80010ac <main+0x1b4>)
 8001010:	f007 fdf4 	bl	8008bfc <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001014:	f009 ffe8 	bl	800afe8 <osKernelInitialize>
////
////  /* creation of Navigate_Obst */
//  Navigate_ObstHandle = osThreadNew(runNavigateObst, NULL, &Navigate_Obst_attributes);

  /* creation of ultrasonicTask */
  ultrasonicTaskHandle = osThreadNew(runUltrasonicTask, NULL, &ultrasonicTask_attributes);
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <main+0x1b8>)
 800101a:	2100      	movs	r1, #0
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0x1bc>)
 800101e:	f00a f82d 	bl	800b07c <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <main+0x1c0>)
 8001026:	6013      	str	r3, [r2, #0]

  /* creation of TestTask */
//    TestTaskHandle = osThreadNew(runTestTask, NULL, &TestTask_attributes);
//
//  /* creation of FastestTask */
  FastestTaskHandle = osThreadNew(runFastestTask, NULL, &FastestTask_attributes);
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <main+0x1c4>)
 800102a:	2100      	movs	r1, #0
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0x1c8>)
 800102e:	f00a f825 	bl	800b07c <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <main+0x1cc>)
 8001036:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001038:	f009 fffa 	bl	800b030 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x144>
 800103e:	bf00      	nop
 8001040:	9999999a 	.word	0x9999999a
 8001044:	3fe99999 	.word	0x3fe99999
	...
 8001054:	400c0000 	.word	0x400c0000
 8001058:	00000000 	.word	0x00000000
 800105c:	40040000 	.word	0x40040000
 8001060:	7ae147ae 	.word	0x7ae147ae
 8001064:	3ff7ae14 	.word	0x3ff7ae14
 8001068:	ac083127 	.word	0xac083127
 800106c:	3ff85a1c 	.word	0x3ff85a1c
 8001070:	20000394 	.word	0x20000394
 8001074:	20000004 	.word	0x20000004
 8001078:	2000049c 	.word	0x2000049c
 800107c:	20000424 	.word	0x20000424
 8001080:	200001d8 	.word	0x200001d8
 8001084:	200004d4 	.word	0x200004d4
 8001088:	200004a0 	.word	0x200004a0
 800108c:	20000005 	.word	0x20000005
 8001090:	20000500 	.word	0x20000500
 8001094:	200004ec 	.word	0x200004ec
 8001098:	20000514 	.word	0x20000514
 800109c:	20000528 	.word	0x20000528
 80010a0:	2000022c 	.word	0x2000022c
 80010a4:	200003dc 	.word	0x200003dc
 80010a8:	20000274 	.word	0x20000274
 80010ac:	200002bc 	.word	0x200002bc
 80010b0:	0800e950 	.word	0x0800e950
 80010b4:	080047f1 	.word	0x080047f1
 80010b8:	20000468 	.word	0x20000468
 80010bc:	0800e974 	.word	0x0800e974
 80010c0:	08004821 	.word	0x08004821
 80010c4:	2000046c 	.word	0x2000046c

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00c fef8 	bl	800decc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xb4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xb4>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xb4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <SystemClock_Config+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <SystemClock_Config+0xb8>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SystemClock_Config+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fc6d 	bl	8007a18 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001144:	f003 fd74 	bl	8004c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f006 fed0 	bl	8007f08 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800116e:	f003 fd5f 	bl	8004c30 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_ADC1_Init+0x98>)
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <MX_ADC1_Init+0x9c>)
 800119a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_ADC1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_ADC1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_ADC1_Init+0x98>)
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_ADC1_Init+0xa0>)
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_ADC1_Init+0x98>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0x98>)
 80011de:	2201      	movs	r2, #1
 80011e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <MX_ADC1_Init+0x98>)
 80011e4:	f004 fa50 	bl	8005688 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f003 fd1f 	bl	8004c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011f2:	230b      	movs	r3, #11
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_ADC1_Init+0x98>)
 8001204:	f004 fbee 	bl	80059e4 <HAL_ADC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800120e:	f003 fd0f 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000088 	.word	0x20000088
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_ADC2_Init+0x98>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <MX_ADC2_Init+0x9c>)
 800123e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_ADC2_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_ADC2_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <MX_ADC2_Init+0xa0>)
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_ADC2_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001274:	2201      	movs	r2, #1
 8001276:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_ADC2_Init+0x98>)
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001282:	2201      	movs	r2, #1
 8001284:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001288:	f004 f9fe 	bl	8005688 <HAL_ADC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001292:	f003 fccd 	bl	8004c30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001296:	230c      	movs	r3, #12
 8001298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_ADC2_Init+0x98>)
 80012a8:	f004 fb9c 	bl	80059e4 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012b2:	f003 fcbd 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000d0 	.word	0x200000d0
 80012c4:	40012100 	.word	0x40012100
 80012c8:	0f000001 	.word	0x0f000001

080012cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C1_Init+0x50>)
 800130a:	f005 fb9d 	bl	8006a48 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f003 fc8c 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200001d8 	.word	0x200001d8
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b096      	sub	sp, #88	; 0x58
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2220      	movs	r2, #32
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f00c fdb3 	bl	800decc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <MX_TIM1_Init+0x134>)
 8001368:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <MX_TIM1_Init+0x138>)
 800136a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800136c:	4b3b      	ldr	r3, [pc, #236]	; (800145c <MX_TIM1_Init+0x134>)
 800136e:	22a0      	movs	r2, #160	; 0xa0
 8001370:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b3a      	ldr	r3, [pc, #232]	; (800145c <MX_TIM1_Init+0x134>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001378:	4b38      	ldr	r3, [pc, #224]	; (800145c <MX_TIM1_Init+0x134>)
 800137a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <MX_TIM1_Init+0x134>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <MX_TIM1_Init+0x134>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <MX_TIM1_Init+0x134>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001392:	4832      	ldr	r0, [pc, #200]	; (800145c <MX_TIM1_Init+0x134>)
 8001394:	f006 ffca 	bl	800832c <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800139e:	f003 fc47 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ac:	4619      	mov	r1, r3
 80013ae:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_TIM1_Init+0x134>)
 80013b0:	f007 ff18 	bl	80091e4 <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ba:	f003 fc39 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <MX_TIM1_Init+0x134>)
 80013c0:	f007 f8dc 	bl	800857c <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ca:	f003 fc31 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013da:	4619      	mov	r1, r3
 80013dc:	481f      	ldr	r0, [pc, #124]	; (800145c <MX_TIM1_Init+0x134>)
 80013de:	f008 fc65 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013e8:	f003 fc22 	bl	8004c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013f8:	2304      	movs	r3, #4
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	220c      	movs	r2, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <MX_TIM1_Init+0x134>)
 800140e:	f007 fe27 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001418:	f003 fc0a 	bl	8004c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <MX_TIM1_Init+0x134>)
 8001440:	f008 fcb0 	bl	8009da4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800144a:	f003 fbf1 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <MX_TIM1_Init+0x134>)
 8001450:	f003 fec2 	bl	80051d8 <HAL_TIM_MspPostInit>

}
 8001454:	bf00      	nop
 8001456:	3758      	adds	r7, #88	; 0x58
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000022c 	.word	0x2000022c
 8001460:	40010000 	.word	0x40010000

08001464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00c fd2a 	bl	800decc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_TIM2_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM2_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a8:	2303      	movs	r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014d4:	f007 faec 	bl	8008ab0 <HAL_TIM_Encoder_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014de:	f003 fba7 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014f0:	f008 fbdc 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014fa:	f003 fb99 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000274 	.word	0x20000274

0800150c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001536:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <MX_TIM3_Init+0xd8>)
 8001538:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <MX_TIM3_Init+0xdc>)
 800153a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <MX_TIM3_Init+0xd8>)
 800153e:	220f      	movs	r2, #15
 8001540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_TIM3_Init+0xd8>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <MX_TIM3_Init+0xd8>)
 800154a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <MX_TIM3_Init+0xd8>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_TIM3_Init+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800155c:	4821      	ldr	r0, [pc, #132]	; (80015e4 <MX_TIM3_Init+0xd8>)
 800155e:	f006 fee5 	bl	800832c <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001568:	f003 fb62 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4619      	mov	r1, r3
 8001578:	481a      	ldr	r0, [pc, #104]	; (80015e4 <MX_TIM3_Init+0xd8>)
 800157a:	f007 fe33 	bl	80091e4 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001584:	f003 fb54 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001588:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_TIM3_Init+0xd8>)
 800158a:	f007 f919 	bl	80087c0 <HAL_TIM_IC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001594:	f003 fb4c 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_TIM3_Init+0xd8>)
 80015a8:	f008 fb80 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80015b2:	f003 fb3d 	bl	8004c30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015ba:	2301      	movs	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2204      	movs	r2, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_TIM3_Init+0xd8>)
 80015ce:	f007 fcab 	bl	8008f28 <HAL_TIM_IC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80015d8:	f003 fb2a 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002bc 	.word	0x200002bc
 80015e8:	40000400 	.word	0x40000400

080015ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_TIM4_Init+0xa0>)
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <MX_TIM4_Init+0xa4>)
 800160c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_TIM4_Init+0xa0>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_TIM4_Init+0xa0>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_TIM4_Init+0xa0>)
 800161c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_TIM4_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_TIM4_Init+0xa0>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800162e:	4817      	ldr	r0, [pc, #92]	; (800168c <MX_TIM4_Init+0xa0>)
 8001630:	f007 f8c6 	bl	80087c0 <HAL_TIM_IC_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800163a:	f003 faf9 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_TIM4_Init+0xa0>)
 800164e:	f008 fb2d 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001658:	f003 faea 	bl	8004c30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2204      	movs	r2, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_TIM4_Init+0xa0>)
 8001674:	f007 fc58 	bl	8008f28 <HAL_TIM_IC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800167e:	f003 fad7 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000304 	.word	0x20000304
 8001690:	40000800 	.word	0x40000800

08001694 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <MX_TIM5_Init+0xa4>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80016d6:	4817      	ldr	r0, [pc, #92]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016d8:	f007 f872 	bl	80087c0 <HAL_TIM_IC_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80016e2:	f003 faa5 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <MX_TIM5_Init+0xa0>)
 80016f6:	f008 fad9 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001700:	f003 fa96 	bl	8004c30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM5_Init+0xa0>)
 800171c:	f007 fc04 	bl	8008f28 <HAL_TIM_IC_ConfigChannel>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001726:	f003 fa83 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000034c 	.word	0x2000034c
 8001738:	40000c00 	.word	0x40000c00

0800173c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM7_Init+0x64>)
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <MX_TIM7_Init+0x68>)
 800174e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16-1;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001752:	220f      	movs	r2, #15
 8001754:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_TIM7_Init+0x64>)
 800175e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001762:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM7_Init+0x64>)
 800176c:	f006 fdde 	bl	800832c <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001776:	f003 fa5b 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM7_Init+0x64>)
 8001788:	f008 fa90 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001792:	f003 fa4d 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000394 	.word	0x20000394
 80017a4:	40001400 	.word	0x40001400

080017a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b096      	sub	sp, #88	; 0x58
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2220      	movs	r2, #32
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00c fb73 	bl	800decc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <MX_TIM8_Init+0x150>)
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <MX_TIM8_Init+0x154>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <MX_TIM8_Init+0x150>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <MX_TIM8_Init+0x150>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <MX_TIM8_Init+0x150>)
 80017fa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_TIM8_Init+0x150>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001812:	4839      	ldr	r0, [pc, #228]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001814:	f006 fd8a 	bl	800832c <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800181e:	f003 fa07 	bl	8004c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182c:	4619      	mov	r1, r3
 800182e:	4832      	ldr	r0, [pc, #200]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001830:	f007 fcd8 	bl	80091e4 <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800183a:	f003 f9f9 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800183e:	482e      	ldr	r0, [pc, #184]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001840:	f006 fe9c 	bl	800857c <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800184a:	f003 f9f1 	bl	8004c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800185a:	4619      	mov	r1, r3
 800185c:	4826      	ldr	r0, [pc, #152]	; (80018f8 <MX_TIM8_Init+0x150>)
 800185e:	f008 fa25 	bl	8009cac <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001868:	f003 f9e2 	bl	8004c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186c:	2360      	movs	r3, #96	; 0x60
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <MX_TIM8_Init+0x150>)
 8001892:	f007 fbe5 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800189c:	f003 f9c8 	bl	8004c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	2204      	movs	r2, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_TIM8_Init+0x150>)
 80018aa:	f007 fbd9 	bl	8009060 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80018b4:	f003 f9bc 	bl	8004c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM8_Init+0x150>)
 80018dc:	f008 fa62 	bl	8009da4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80018e6:	f003 f9a3 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM8_Init+0x150>)
 80018ec:	f003 fc74 	bl	80051d8 <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200003dc 	.word	0x200003dc
 80018fc:	40010400 	.word	0x40010400

08001900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART3_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART3_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART3_UART_Init+0x4c>)
 8001938:	f008 fa9a 	bl	8009e70 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f003 f975 	bl	8004c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000424 	.word	0x20000424
 8001950:	40004800 	.word	0x40004800

08001954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_DMA_Init+0x4c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <MX_DMA_Init+0x4c>)
 8001964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <MX_DMA_Init+0x4c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	2038      	movs	r0, #56	; 0x38
 800197c:	f004 fb08 	bl	8005f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001980:	2038      	movs	r0, #56	; 0x38
 8001982:	f004 fb21 	bl	8005fc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	203a      	movs	r0, #58	; 0x3a
 800198c:	f004 fb00 	bl	8005f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001990:	203a      	movs	r0, #58	; 0x3a
 8001992:	f004 fb19 	bl	8005fc8 <HAL_NVIC_EnableIRQ>

}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a36      	ldr	r2, [pc, #216]	; (8001ad4 <MX_GPIO_Init+0x130>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_GPIO_Init+0x130>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001a68:	481b      	ldr	r0, [pc, #108]	; (8001ad8 <MX_GPIO_Init+0x134>)
 8001a6a:	f004 ffd3 	bl	8006a14 <HAL_GPIO_WritePin>
                          |LED3_Pin|Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_AIN2_Pin|MOTOR_AIN1_Pin|MOTOR_BIN1_Pin|MOTOR_BIN2_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	213c      	movs	r1, #60	; 0x3c
 8001a72:	481a      	ldr	r0, [pc, #104]	; (8001adc <MX_GPIO_Init+0x138>)
 8001a74:	f004 ffce 	bl	8006a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001a78:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001a7c:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin|Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_GPIO_Init+0x134>)
 8001a92:	f004 fe23 	bl	80066dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_AIN2_Pin MOTOR_AIN1_Pin MOTOR_BIN1_Pin MOTOR_BIN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_AIN2_Pin|MOTOR_AIN1_Pin|MOTOR_BIN1_Pin|MOTOR_BIN2_Pin;
 8001a96:	233c      	movs	r3, #60	; 0x3c
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480b      	ldr	r0, [pc, #44]	; (8001adc <MX_GPIO_Init+0x138>)
 8001aae:	f004 fe15 	bl	80066dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	; (8001ae0 <MX_GPIO_Init+0x13c>)
 8001ac8:	f004 fe08 	bl	80066dc <HAL_GPIO_Init>

}
 8001acc:	bf00      	nop
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <delay_us>:
/* USER CODE BEGIN 4 */
/*
 * Test
 */
void delay_us(uint16_t us)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <delay_us+0x30>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8001af6:	bf00      	nop
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <delay_us+0x30>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3f9      	bcc.n	8001af8 <delay_us+0x14>
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000394 	.word	0x20000394

08001b18 <HCSR04_Read>:


void HCSR04_Read (void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HCSR04_Read+0x38>)
 8001b24:	f004 ff76 	bl	8006a14 <HAL_GPIO_WritePin>
	delay_us(10);  // wait f or 10 us
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f7ff ffdb 	bl	8001ae4 <delay_us>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <HCSR04_Read+0x38>)
 8001b36:	f004 ff6d 	bl	8006a14 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HCSR04_Read+0x3c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HCSR04_Read+0x3c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0204 	orr.w	r2, r2, #4
 8001b48:	60da      	str	r2, [r3, #12]
	//delay_us(50);
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	200002bc 	.word	0x200002bc

08001b58 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	// prevent unused argument(s) compilation warning
	UNUSED(huart);
	int val;

	val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001b74:	78db      	ldrb	r3, [r3, #3]
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

	if (aRxBuffer[1] >= '0' && aRxBuffer[1] <= '9') val += (aRxBuffer[1] - 48) * 100;
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b2f      	cmp	r3, #47	; 0x2f
 8001b82:	d90c      	bls.n	8001b9e <HAL_UART_RxCpltCallback+0x46>
 8001b84:	4b86      	ldr	r3, [pc, #536]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b39      	cmp	r3, #57	; 0x39
 8001b8a:	d808      	bhi.n	8001b9e <HAL_UART_RxCpltCallback+0x46>
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	3b30      	subs	r3, #48	; 0x30
 8001b92:	2264      	movs	r2, #100	; 0x64
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

	manualMode = 0;
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_UART_RxCpltCallback+0x24c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') {
 8001ba4:	4b7e      	ldr	r3, [pc, #504]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b53      	cmp	r3, #83	; 0x53
 8001baa:	d159      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x108>
 8001bac:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	2b54      	cmp	r3, #84	; 0x54
 8001bb2:	d155      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x108>
		__ON_TASK_END(&htim8, prevTask, curTask);
 8001bb4:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <HAL_UART_RxCpltCallback+0x250>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbc:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <HAL_UART_RxCpltCallback+0x250>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc4:	4b79      	ldr	r3, [pc, #484]	; (8001dac <HAL_UART_RxCpltCallback+0x254>)
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <HAL_UART_RxCpltCallback+0x258>)
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	4b77      	ldr	r3, [pc, #476]	; (8001dac <HAL_UART_RxCpltCallback+0x254>)
 8001bce:	220b      	movs	r2, #11
 8001bd0:	701a      	strb	r2, [r3, #0]
		  angleNow = 0; gyroZ = 0;
 8001bd2:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_UART_RxCpltCallback+0x25c>)
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <HAL_UART_RxCpltCallback+0x260>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
		PIDConfigReset(&pidTSlow);
 8001be0:	4876      	ldr	r0, [pc, #472]	; (8001dbc <HAL_UART_RxCpltCallback+0x264>)
 8001be2:	f000 fd0a 	bl	80025fa <PIDConfigReset>
		PIDConfigReset(&pidSlow);
 8001be6:	4876      	ldr	r0, [pc, #472]	; (8001dc0 <HAL_UART_RxCpltCallback+0x268>)
 8001be8:	f000 fd07 	bl	80025fa <PIDConfigReset>
		PIDConfigReset(&pidFast);
 8001bec:	4875      	ldr	r0, [pc, #468]	; (8001dc4 <HAL_UART_RxCpltCallback+0x26c>)
 8001bee:	f000 fd04 	bl	80025fa <PIDConfigReset>
		curDistTick = 0;
 8001bf2:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <HAL_UART_RxCpltCallback+0x270>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
		if (__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 8001bf8:	4b74      	ldr	r3, [pc, #464]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d112      	bne.n	8001c2a <HAL_UART_RxCpltCallback+0xd2>
			__CLEAR_CURCMD(curCmd);
 8001c04:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_UART_RxCpltCallback+0x278>)
 8001c06:	2264      	movs	r2, #100	; 0x64
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	4b71      	ldr	r3, [pc, #452]	; (8001dd0 <HAL_UART_RxCpltCallback+0x278>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	805a      	strh	r2, [r3, #2]
			__ACK_TASK_DONE(&huart3, rxMsg);
 8001c10:	4a70      	ldr	r2, [pc, #448]	; (8001dd4 <HAL_UART_RxCpltCallback+0x27c>)
 8001c12:	210f      	movs	r1, #15
 8001c14:	4870      	ldr	r0, [pc, #448]	; (8001dd8 <HAL_UART_RxCpltCallback+0x280>)
 8001c16:	f00c f925 	bl	800de64 <sniprintf>
 8001c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1e:	2206      	movs	r2, #6
 8001c20:	496e      	ldr	r1, [pc, #440]	; (8001ddc <HAL_UART_RxCpltCallback+0x284>)
 8001c22:	486f      	ldr	r0, [pc, #444]	; (8001de0 <HAL_UART_RxCpltCallback+0x288>)
 8001c24:	f008 f971 	bl	8009f0a <HAL_UART_Transmit>
	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') {
 8001c28:	e3e7      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
		}
		else {
			__READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	4a68      	ldr	r2, [pc, #416]	; (8001dd0 <HAL_UART_RxCpltCallback+0x278>)
 8001c30:	4966      	ldr	r1, [pc, #408]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a62      	ldr	r2, [pc, #392]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001c42:	7892      	ldrb	r2, [r2, #2]
 8001c44:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c48:	fb01 f202 	mul.w	r2, r1, r2
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	4a63      	ldr	r2, [pc, #396]	; (8001de4 <HAL_UART_RxCpltCallback+0x28c>)
 8001c56:	210f      	movs	r1, #15
 8001c58:	485f      	ldr	r0, [pc, #380]	; (8001dd8 <HAL_UART_RxCpltCallback+0x280>)
 8001c5a:	f00c f903 	bl	800de64 <sniprintf>
	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') {
 8001c5e:	e3cc      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
		}
	}
	else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //FW or FS
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b46      	cmp	r3, #70	; 0x46
 8001c66:	d13d      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x18c>
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b57      	cmp	r3, #87	; 0x57
 8001c6e:	d003      	beq.n	8001c78 <HAL_UART_RxCpltCallback+0x120>
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	2b53      	cmp	r3, #83	; 0x53
 8001c76:	d135      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x18c>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c7a:	789b      	ldrb	r3, [r3, #2]
 8001c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c7e:	d105      	bne.n	8001c8c <HAL_UART_RxCpltCallback+0x134>
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c82:	78db      	ldrb	r3, [r3, #3]
 8001c84:	2b2d      	cmp	r3, #45	; 0x2d
 8001c86:	d101      	bne.n	8001c8c <HAL_UART_RxCpltCallback+0x134>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_UART_RxCpltCallback+0x136>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_UART_RxCpltCallback+0x24c>)
 8001c92:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	2b53      	cmp	r3, #83	; 0x53
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <HAL_UART_RxCpltCallback+0x290>)
 8001ca6:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 1, val);
 8001ca8:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	711a      	strb	r2, [r3, #4]
 8001cb6:	4b45      	ldr	r3, [pc, #276]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	b291      	uxth	r1, r2
 8001cbe:	4a43      	ldr	r2, [pc, #268]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	80da      	strh	r2, [r3, #6]
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001cd0:	7892      	ldrb	r2, [r2, #2]
 8001cd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cd6:	fb01 f202 	mul.w	r2, r1, r2
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e38a      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S')) { //BW or BS
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b42      	cmp	r3, #66	; 0x42
 8001cea:	d13d      	bne.n	8001d68 <HAL_UART_RxCpltCallback+0x210>
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	2b57      	cmp	r3, #87	; 0x57
 8001cf2:	d003      	beq.n	8001cfc <HAL_UART_RxCpltCallback+0x1a4>
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001cf6:	785b      	ldrb	r3, [r3, #1]
 8001cf8:	2b53      	cmp	r3, #83	; 0x53
 8001cfa:	d135      	bne.n	8001d68 <HAL_UART_RxCpltCallback+0x210>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001cfc:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001cfe:	789b      	ldrb	r3, [r3, #2]
 8001d00:	2b2d      	cmp	r3, #45	; 0x2d
 8001d02:	d105      	bne.n	8001d10 <HAL_UART_RxCpltCallback+0x1b8>
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d06:	78db      	ldrb	r3, [r3, #3]
 8001d08:	2b2d      	cmp	r3, #45	; 0x2d
 8001d0a:	d101      	bne.n	8001d10 <HAL_UART_RxCpltCallback+0x1b8>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_UART_RxCpltCallback+0x1ba>
 8001d10:	2300      	movs	r3, #0
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_UART_RxCpltCallback+0x24c>)
 8001d16:	701a      	strb	r2, [r3, #0]
		moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	2b53      	cmp	r3, #83	; 0x53
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_UART_RxCpltCallback+0x290>)
 8001d2a:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 2, val);
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	2202      	movs	r2, #2
 8001d38:	711a      	strb	r2, [r3, #4]
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	b291      	uxth	r1, r2
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	460a      	mov	r2, r1
 8001d4a:	80da      	strh	r2, [r3, #6]
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d54:	7892      	ldrb	r2, [r2, #2]
 8001d56:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d5a:	fb01 f202 	mul.w	r2, r1, r2
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_UART_RxCpltCallback+0x274>)
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e348      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L') { // FL
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b46      	cmp	r3, #70	; 0x46
 8001d6e:	d15c      	bne.n	8001e2a <HAL_UART_RxCpltCallback+0x2d2>
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d72:	785b      	ldrb	r3, [r3, #1]
 8001d74:	2b4c      	cmp	r3, #76	; 0x4c
 8001d76:	d158      	bne.n	8001e2a <HAL_UART_RxCpltCallback+0x2d2>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d7a:	789b      	ldrb	r3, [r3, #2]
 8001d7c:	2b2d      	cmp	r3, #45	; 0x2d
 8001d7e:	d105      	bne.n	8001d8c <HAL_UART_RxCpltCallback+0x234>
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_UART_RxCpltCallback+0x248>)
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	2b2d      	cmp	r3, #45	; 0x2d
 8001d86:	d101      	bne.n	8001d8c <HAL_UART_RxCpltCallback+0x234>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_RxCpltCallback+0x236>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_UART_RxCpltCallback+0x24c>)
 8001d92:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_UART_RxCpltCallback+0x24c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d027      	beq.n	8001dec <HAL_UART_RxCpltCallback+0x294>
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	e026      	b.n	8001dee <HAL_UART_RxCpltCallback+0x296>
 8001da0:	2000049c 	.word	0x2000049c
 8001da4:	200004e8 	.word	0x200004e8
 8001da8:	200003dc 	.word	0x200003dc
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000009 	.word	0x20000009
 8001db4:	20000474 	.word	0x20000474
 8001db8:	2000047a 	.word	0x2000047a
 8001dbc:	20000500 	.word	0x20000500
 8001dc0:	200004ec 	.word	0x200004ec
 8001dc4:	20000514 	.word	0x20000514
 8001dc8:	20000494 	.word	0x20000494
 8001dcc:	200004a0 	.word	0x200004a0
 8001dd0:	200004d4 	.word	0x200004d4
 8001dd4:	0800e8d8 	.word	0x0800e8d8
 8001dd8:	200004d8 	.word	0x200004d8
 8001ddc:	0800e8e0 	.word	0x0800e8e0
 8001de0:	20000424 	.word	0x20000424
 8001de4:	0800e8e8 	.word	0x0800e8e8
 8001de8:	2000000a 	.word	0x2000000a
 8001dec:	2107      	movs	r1, #7
 8001dee:	4b9d      	ldr	r3, [pc, #628]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4a9c      	ldr	r2, [pc, #624]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	711a      	strb	r2, [r3, #4]
 8001dfc:	4b99      	ldr	r3, [pc, #612]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	b291      	uxth	r1, r2
 8001e04:	4a97      	ldr	r2, [pc, #604]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	460a      	mov	r2, r1
 8001e0c:	80da      	strh	r2, [r3, #6]
 8001e0e:	4b95      	ldr	r3, [pc, #596]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a93      	ldr	r2, [pc, #588]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e16:	7892      	ldrb	r2, [r2, #2]
 8001e18:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e1c:	fb01 f202 	mul.w	r2, r1, r2
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e2e7      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R') { // FR
 8001e2a:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b46      	cmp	r3, #70	; 0x46
 8001e30:	d136      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x348>
 8001e32:	4b8d      	ldr	r3, [pc, #564]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	2b52      	cmp	r3, #82	; 0x52
 8001e38:	d132      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x348>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	2b2d      	cmp	r3, #45	; 0x2d
 8001e40:	d105      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x2f6>
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	2b2d      	cmp	r3, #45	; 0x2d
 8001e48:	d101      	bne.n	8001e4e <HAL_UART_RxCpltCallback+0x2f6>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_UART_RxCpltCallback+0x2f8>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001e54:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_RxCpltCallback+0x30a>
 8001e5e:	2104      	movs	r1, #4
 8001e60:	e000      	b.n	8001e64 <HAL_UART_RxCpltCallback+0x30c>
 8001e62:	2108      	movs	r1, #8
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	460a      	mov	r2, r1
 8001e70:	711a      	strb	r2, [r3, #4]
 8001e72:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	b291      	uxth	r1, r2
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	80da      	strh	r2, [r3, #6]
 8001e84:	4b77      	ldr	r3, [pc, #476]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a76      	ldr	r2, [pc, #472]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e8c:	7892      	ldrb	r2, [r2, #2]
 8001e8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e92:	fb01 f202 	mul.w	r2, r1, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e2ac      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>

	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L') { // BL
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b42      	cmp	r3, #66	; 0x42
 8001ea6:	d136      	bne.n	8001f16 <HAL_UART_RxCpltCallback+0x3be>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b4c      	cmp	r3, #76	; 0x4c
 8001eae:	d132      	bne.n	8001f16 <HAL_UART_RxCpltCallback+0x3be>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001eb2:	789b      	ldrb	r3, [r3, #2]
 8001eb4:	2b2d      	cmp	r3, #45	; 0x2d
 8001eb6:	d105      	bne.n	8001ec4 <HAL_UART_RxCpltCallback+0x36c>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_RxCpltCallback+0x36c>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_UART_RxCpltCallback+0x36e>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001eca:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001ecc:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_RxCpltCallback+0x380>
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	e000      	b.n	8001eda <HAL_UART_RxCpltCallback+0x382>
 8001ed8:	2109      	movs	r1, #9
 8001eda:	4b62      	ldr	r3, [pc, #392]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4a61      	ldr	r2, [pc, #388]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	711a      	strb	r2, [r3, #4]
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	b291      	uxth	r1, r2
 8001ef0:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	80da      	strh	r2, [r3, #6]
 8001efa:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f02:	7892      	ldrb	r2, [r2, #2]
 8001f04:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f08:	fb01 f202 	mul.w	r2, r1, r2
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b54      	ldr	r3, [pc, #336]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e271      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R') { // BR
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b42      	cmp	r3, #66	; 0x42
 8001f1c:	d136      	bne.n	8001f8c <HAL_UART_RxCpltCallback+0x434>
 8001f1e:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	2b52      	cmp	r3, #82	; 0x52
 8001f24:	d132      	bne.n	8001f8c <HAL_UART_RxCpltCallback+0x434>
		manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f2c:	d105      	bne.n	8001f3a <HAL_UART_RxCpltCallback+0x3e2>
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f30:	78db      	ldrb	r3, [r3, #3]
 8001f32:	2b2d      	cmp	r3, #45	; 0x2d
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_RxCpltCallback+0x3e2>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_UART_RxCpltCallback+0x3e4>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001f40:	701a      	strb	r2, [r3, #0]
		__ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_UART_RxCpltCallback+0x514>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_RxCpltCallback+0x3f6>
 8001f4a:	2106      	movs	r1, #6
 8001f4c:	e000      	b.n	8001f50 <HAL_UART_RxCpltCallback+0x3f8>
 8001f4e:	210a      	movs	r1, #10
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	711a      	strb	r2, [r3, #4]
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	b291      	uxth	r1, r2
 8001f66:	4a3f      	ldr	r2, [pc, #252]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	80da      	strh	r2, [r3, #6]
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f78:	7892      	ldrb	r2, [r2, #2]
 8001f7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f7e:	fb01 f202 	mul.w	r2, r1, r2
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e236      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'F') {
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b46      	cmp	r3, #70	; 0x46
 8001f92:	d131      	bne.n	8001ff8 <HAL_UART_RxCpltCallback+0x4a0>
		val = (aRxBuffer[1] - 48) * 100+(aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	3b30      	subs	r3, #48	; 0x30
 8001f9a:	2264      	movs	r2, #100	; 0x64
 8001f9c:	fb02 f103 	mul.w	r1, r2, r3
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	18ca      	adds	r2, r1, r3
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001fb4:	78db      	ldrb	r3, [r3, #3]
 8001fb6:	3b30      	subs	r3, #48	; 0x30
 8001fb8:	4413      	add	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
		__ADD_COMMAND(cQueue, 18, val);
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2212      	movs	r2, #18
 8001fc8:	711a      	strb	r2, [r3, #4]
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	b291      	uxth	r1, r2
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	460a      	mov	r2, r1
 8001fda:	80da      	strh	r2, [r3, #6]
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001fe4:	7892      	ldrb	r2, [r2, #2]
 8001fe6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fea:	fb01 f202 	mul.w	r2, r1, r2
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e200      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}//test
	else if (aRxBuffer[0] == 'B') {
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b42      	cmp	r3, #66	; 0x42
 8001ffe:	d137      	bne.n	8002070 <HAL_UART_RxCpltCallback+0x518>
		val = (aRxBuffer[1] - 48) * 100+(aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	3b30      	subs	r3, #48	; 0x30
 8002006:	2264      	movs	r2, #100	; 0x64
 8002008:	fb02 f103 	mul.w	r1, r2, r3
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	18ca      	adds	r2, r1, r3
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_UART_RxCpltCallback+0x510>)
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	3b30      	subs	r3, #48	; 0x30
 8002024:	4413      	add	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
		__ADD_COMMAND(cQueue, 19, val);
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	2213      	movs	r2, #19
 8002034:	711a      	strb	r2, [r3, #4]
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	b291      	uxth	r1, r2
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	460a      	mov	r2, r1
 8002046:	80da      	strh	r2, [r3, #6]
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8002050:	7892      	ldrb	r2, [r2, #2]
 8002052:	fb93 f1f2 	sdiv	r1, r3, r2
 8002056:	fb01 f202 	mul.w	r2, r1, r2
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b01      	ldr	r3, [pc, #4]	; (8002064 <HAL_UART_RxCpltCallback+0x50c>)
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e1ca      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
 8002064:	200004a0 	.word	0x200004a0
 8002068:	2000049c 	.word	0x2000049c
 800206c:	200004e8 	.word	0x200004e8
	}
	else if (aRxBuffer[0] == 'X' && aRxBuffer[1] == '0'&& aRxBuffer[2] == '0'&& aRxBuffer[3] == '0') {
 8002070:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b58      	cmp	r3, #88	; 0x58
 8002076:	d129      	bne.n	80020cc <HAL_UART_RxCpltCallback+0x574>
 8002078:	4b8e      	ldr	r3, [pc, #568]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 800207a:	785b      	ldrb	r3, [r3, #1]
 800207c:	2b30      	cmp	r3, #48	; 0x30
 800207e:	d125      	bne.n	80020cc <HAL_UART_RxCpltCallback+0x574>
 8002080:	4b8c      	ldr	r3, [pc, #560]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	2b30      	cmp	r3, #48	; 0x30
 8002086:	d121      	bne.n	80020cc <HAL_UART_RxCpltCallback+0x574>
 8002088:	4b8a      	ldr	r3, [pc, #552]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b30      	cmp	r3, #48	; 0x30
 800208e:	d11d      	bne.n	80020cc <HAL_UART_RxCpltCallback+0x574>
		__ADD_COMMAND(cQueue, 23, val);
 8002090:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4a88      	ldr	r2, [pc, #544]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	2217      	movs	r2, #23
 800209c:	711a      	strb	r2, [r3, #4]
 800209e:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	b291      	uxth	r1, r2
 80020a6:	4a84      	ldr	r2, [pc, #528]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	460a      	mov	r2, r1
 80020ae:	80da      	strh	r2, [r3, #6]
 80020b0:	4b81      	ldr	r3, [pc, #516]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a80      	ldr	r2, [pc, #512]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80020b8:	7892      	ldrb	r2, [r2, #2]
 80020ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80020be:	fb01 f202 	mul.w	r2, r1, r2
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b7c      	ldr	r3, [pc, #496]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e196      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'Z' || aRxBuffer[0] == 'Y') {
 80020cc:	4b79      	ldr	r3, [pc, #484]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b5a      	cmp	r3, #90	; 0x5a
 80020d2:	d003      	beq.n	80020dc <HAL_UART_RxCpltCallback+0x584>
 80020d4:	4b77      	ldr	r3, [pc, #476]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b59      	cmp	r3, #89	; 0x59
 80020da:	d153      	bne.n	8002184 <HAL_UART_RxCpltCallback+0x62c>
				val = (aRxBuffer[1] - 48) * 100+(aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 80020dc:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	3b30      	subs	r3, #48	; 0x30
 80020e2:	2264      	movs	r2, #100	; 0x64
 80020e4:	fb02 f103 	mul.w	r1, r2, r3
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80020ea:	789b      	ldrb	r3, [r3, #2]
 80020ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	18ca      	adds	r2, r1, r3
 80020fa:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80020fc:	78db      	ldrb	r3, [r3, #3]
 80020fe:	3b30      	subs	r3, #48	; 0x30
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
				if(aRxBuffer[0] == 'Z'){
 8002104:	4b6b      	ldr	r3, [pc, #428]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b5a      	cmp	r3, #90	; 0x5a
 800210a:	d11d      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x5f0>
					__ADD_COMMAND(cQueue, 20, val);
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4a69      	ldr	r2, [pc, #420]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	2214      	movs	r2, #20
 8002118:	711a      	strb	r2, [r3, #4]
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	b291      	uxth	r1, r2
 8002122:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	460a      	mov	r2, r1
 800212a:	80da      	strh	r2, [r3, #6]
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a61      	ldr	r2, [pc, #388]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002134:	7892      	ldrb	r2, [r2, #2]
 8002136:	fb93 f1f2 	sdiv	r1, r3, r2
 800213a:	fb01 f202 	mul.w	r2, r1, r2
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002144:	701a      	strb	r2, [r3, #0]
				if(aRxBuffer[0] == 'Z'){
 8002146:	e158      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
				}else{
					__ADD_COMMAND(cQueue, 22, val);
 8002148:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	2216      	movs	r2, #22
 8002154:	711a      	strb	r2, [r3, #4]
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	b291      	uxth	r1, r2
 800215e:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	460a      	mov	r2, r1
 8002166:	80da      	strh	r2, [r3, #6]
 8002168:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002170:	7892      	ldrb	r2, [r2, #2]
 8002172:	fb93 f1f2 	sdiv	r1, r3, r2
 8002176:	fb01 f202 	mul.w	r2, r1, r2
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002180:	701a      	strb	r2, [r3, #0]
				if(aRxBuffer[0] == 'Z'){
 8002182:	e13a      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
				}

		}
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L') __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b54      	cmp	r3, #84	; 0x54
 800218a:	d121      	bne.n	80021d0 <HAL_UART_RxCpltCallback+0x678>
 800218c:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 800218e:	785b      	ldrb	r3, [r3, #1]
 8002190:	2b4c      	cmp	r3, #76	; 0x4c
 8002192:	d11d      	bne.n	80021d0 <HAL_UART_RxCpltCallback+0x678>
 8002194:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	220b      	movs	r2, #11
 80021a0:	711a      	strb	r2, [r3, #4]
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	b291      	uxth	r1, r2
 80021aa:	4a43      	ldr	r2, [pc, #268]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	460a      	mov	r2, r1
 80021b2:	80da      	strh	r2, [r3, #6]
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a3f      	ldr	r2, [pc, #252]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021bc:	7892      	ldrb	r2, [r2, #2]
 80021be:	fb93 f1f2 	sdiv	r1, r3, r2
 80021c2:	fb01 f202 	mul.w	r2, r1, r2
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e114      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b54      	cmp	r3, #84	; 0x54
 80021d6:	d121      	bne.n	800221c <HAL_UART_RxCpltCallback+0x6c4>
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b52      	cmp	r3, #82	; 0x52
 80021de:	d11d      	bne.n	800221c <HAL_UART_RxCpltCallback+0x6c4>
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	220c      	movs	r2, #12
 80021ec:	711a      	strb	r2, [r3, #4]
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b291      	uxth	r1, r2
 80021f6:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	460a      	mov	r2, r1
 80021fe:	80da      	strh	r2, [r3, #6]
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a2c      	ldr	r2, [pc, #176]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002208:	7892      	ldrb	r2, [r2, #2]
 800220a:	fb93 f1f2 	sdiv	r1, r3, r2
 800220e:	fb01 f202 	mul.w	r2, r1, r2
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e0ee      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R') __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b49      	cmp	r3, #73	; 0x49
 8002222:	d121      	bne.n	8002268 <HAL_UART_RxCpltCallback+0x710>
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b52      	cmp	r3, #82	; 0x52
 800222a:	d11d      	bne.n	8002268 <HAL_UART_RxCpltCallback+0x710>
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	220d      	movs	r2, #13
 8002238:	711a      	strb	r2, [r3, #4]
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	b291      	uxth	r1, r2
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	460a      	mov	r2, r1
 800224a:	80da      	strh	r2, [r3, #6]
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002254:	7892      	ldrb	r2, [r2, #2]
 8002256:	fb93 f1f2 	sdiv	r1, r3, r2
 800225a:	fb01 f202 	mul.w	r2, r1, r2
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e0c8      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T') __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b44      	cmp	r3, #68	; 0x44
 800226e:	d125      	bne.n	80022bc <HAL_UART_RxCpltCallback+0x764>
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_UART_RxCpltCallback+0x75c>)
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b54      	cmp	r3, #84	; 0x54
 8002276:	d121      	bne.n	80022bc <HAL_UART_RxCpltCallback+0x764>
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	220e      	movs	r2, #14
 8002284:	711a      	strb	r2, [r3, #4]
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	b291      	uxth	r1, r2
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	460a      	mov	r2, r1
 8002296:	80da      	strh	r2, [r3, #6]
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80022a0:	7892      	ldrb	r2, [r2, #2]
 80022a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022a6:	fb01 f202 	mul.w	r2, r1, r2
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <HAL_UART_RxCpltCallback+0x760>)
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e0a2      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
 80022b4:	2000049c 	.word	0x2000049c
 80022b8:	200004a0 	.word	0x200004a0
	//else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z') __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
	//else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X') __ADD_COMMAND(cQueue, 16, val); // WN fastest path
	//else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N') __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
	else if (aRxBuffer[0] == 'A') __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b41      	cmp	r3, #65	; 0x41
 80022c2:	d11d      	bne.n	8002300 <HAL_UART_RxCpltCallback+0x7a8>
 80022c4:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4a64      	ldr	r2, [pc, #400]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	2258      	movs	r2, #88	; 0x58
 80022d0:	711a      	strb	r2, [r3, #4]
 80022d2:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	b291      	uxth	r1, r2
 80022da:	4a60      	ldr	r2, [pc, #384]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	460a      	mov	r2, r1
 80022e2:	80da      	strh	r2, [r3, #6]
 80022e4:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022ec:	7892      	ldrb	r2, [r2, #2]
 80022ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80022f2:	fb01 f202 	mul.w	r2, r1, r2
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e07c      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	else if (aRxBuffer[0] == 'C') __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b43      	cmp	r3, #67	; 0x43
 8002306:	d11d      	bne.n	8002344 <HAL_UART_RxCpltCallback+0x7ec>
 8002308:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4a53      	ldr	r2, [pc, #332]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	2259      	movs	r2, #89	; 0x59
 8002314:	711a      	strb	r2, [r3, #4]
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b291      	uxth	r1, r2
 800231e:	4a4f      	ldr	r2, [pc, #316]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	460a      	mov	r2, r1
 8002326:	80da      	strh	r2, [r3, #6]
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a4b      	ldr	r2, [pc, #300]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002330:	7892      	ldrb	r2, [r2, #2]
 8002332:	fb93 f1f2 	sdiv	r1, r3, r2
 8002336:	fb01 f202 	mul.w	r2, r1, r2
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e05a      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	else if (aRxBuffer[0] == 'N' && aRxBuffer[1] == 'V'&& aRxBuffer[2] == 'G'&& aRxBuffer[3] == 'T') {
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b4e      	cmp	r3, #78	; 0x4e
 800234a:	d129      	bne.n	80023a0 <HAL_UART_RxCpltCallback+0x848>
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b56      	cmp	r3, #86	; 0x56
 8002352:	d125      	bne.n	80023a0 <HAL_UART_RxCpltCallback+0x848>
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	2b47      	cmp	r3, #71	; 0x47
 800235a:	d121      	bne.n	80023a0 <HAL_UART_RxCpltCallback+0x848>
 800235c:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	2b54      	cmp	r3, #84	; 0x54
 8002362:	d11d      	bne.n	80023a0 <HAL_UART_RxCpltCallback+0x848>
		__ADD_COMMAND(cQueue, 21, val);
 8002364:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4a3c      	ldr	r2, [pc, #240]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	2215      	movs	r2, #21
 8002370:	711a      	strb	r2, [r3, #4]
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	b291      	uxth	r1, r2
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	460a      	mov	r2, r1
 8002382:	80da      	strh	r2, [r3, #6]
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800238c:	7892      	ldrb	r2, [r2, #2]
 800238e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002392:	fb01 f202 	mul.w	r2, r1, r2
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e02c      	b.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
	}
	else if (aRxBuffer[0] == 'P' && aRxBuffer[1] == 'A'&& aRxBuffer[2] == 'T'&& aRxBuffer[3] == 'H') {
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d128      	bne.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	2b41      	cmp	r3, #65	; 0x41
 80023ae:	d124      	bne.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	2b54      	cmp	r3, #84	; 0x54
 80023b6:	d120      	bne.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 80023ba:	78db      	ldrb	r3, [r3, #3]
 80023bc:	2b48      	cmp	r3, #72	; 0x48
 80023be:	d11c      	bne.n	80023fa <HAL_UART_RxCpltCallback+0x8a2>
		__ADD_COMMAND(cQueue, 24, val);
 80023c0:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	2218      	movs	r2, #24
 80023cc:	711a      	strb	r2, [r3, #4]
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	b291      	uxth	r1, r2
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	80da      	strh	r2, [r3, #6]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023e8:	7892      	ldrb	r2, [r2, #2]
 80023ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80023ee:	fb01 f202 	mul.w	r2, r1, r2
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023f8:	701a      	strb	r2, [r3, #0]
	}
	if (!__COMMAND_QUEUE_IS_EMPTY(cQueue)) {
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002400:	785b      	ldrb	r3, [r3, #1]
 8002402:	429a      	cmp	r2, r3
 8002404:	d019      	beq.n	800243a <HAL_UART_RxCpltCallback+0x8e2>
		__READ_COMMAND(cQueue, curCmd, rxMsg);
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <HAL_UART_RxCpltCallback+0x908>)
 800240c:	4913      	ldr	r1, [pc, #76]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	3301      	adds	r3, #1
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800241e:	7892      	ldrb	r2, [r2, #2]
 8002420:	fb93 f1f2 	sdiv	r1, r3, r2
 8002424:	fb01 f202 	mul.w	r2, r1, r2
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_UART_RxCpltCallback+0x904>)
 800242e:	705a      	strb	r2, [r3, #1]
 8002430:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_UART_RxCpltCallback+0x90c>)
 8002432:	210f      	movs	r1, #15
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <HAL_UART_RxCpltCallback+0x910>)
 8002436:	f00b fd15 	bl	800de64 <sniprintf>
		//OLED_Refresh_Gram();
	}
	//OLED_ShowNumber(10,30,curCmd.val,10,12);
	//OLED_Refresh_Gram();
	// clear aRx buffer
	  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_UART_RxCpltCallback+0x914>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
	  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_UART_RxCpltCallback+0x918>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_UART_RxCpltCallback+0x900>)
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <HAL_UART_RxCpltCallback+0x914>)
 800244c:	f007 fdef 	bl	800a02e <HAL_UART_Receive_IT>
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000049c 	.word	0x2000049c
 800245c:	200004a0 	.word	0x200004a0
 8002460:	200004d4 	.word	0x200004d4
 8002464:	0800e8e8 	.word	0x0800e8e8
 8002468:	200004d8 	.word	0x200004d8
 800246c:	20000424 	.word	0x20000424
 8002470:	20000004 	.word	0x20000004
 8002474:	00000000 	.word	0x00000000

08002478 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	//OLED_ShowString(10,10,"helloCallback");
	uint8_t dist[20];
	//OLED_Refresh_Gram();
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7f1b      	ldrb	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	f040 8083 	bne.w	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
	{
//		sprintf(dist, "Triggered", Echo_Val2);
//		OLED_ShowString(10,20,dist);
		if (Is_First_Captured==0) // if the first value is not captured
 800248a:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8002492:	2104      	movs	r1, #4
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 ff6d 	bl	8009374 <HAL_TIM_ReadCapturedValue>
 800249a:	4603      	mov	r3, r0
 800249c:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800249e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024b4:	621a      	str	r2, [r3, #32]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
}
 80024c6:	e063      	b.n	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d15f      	bne.n	8002590 <HAL_TIM_IC_CaptureCallback+0x118>
			Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80024d0:	2104      	movs	r1, #4
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f006 ff4e 	bl	8009374 <HAL_TIM_ReadCapturedValue>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a33      	ldr	r2, [pc, #204]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024dc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
			if (Echo_Val2 > Echo_Val1)
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d907      	bls.n	8002502 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = Echo_Val2-Echo_Val1;
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x134>)
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e00f      	b.n	8002522 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Echo_Val1 > Echo_Val2)
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d909      	bls.n	8002522 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - Echo_Val1) + Echo_Val2;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800251c:	33ff      	adds	r3, #255	; 0xff
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x134>)
 8002520:	6013      	str	r3, [r2, #0]
			UD = (Difference * 0.034)/2;
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_TIM_IC_CaptureCallback+0x134>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd ffe4 	bl	80004f4 <__aeabi_ui2d>
 800252c:	a31a      	add	r3, pc, #104	; (adr r3, 8002598 <HAL_TIM_IC_CaptureCallback+0x120>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f859 	bl	80005e8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002546:	f7fe f979 	bl	800083c <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fae3 	bl	8000b1c <__aeabi_d2uiz>
 8002556:	4603      	mov	r3, r0
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_TIM_IC_CaptureCallback+0x138>)
 800255c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002572:	621a      	str	r2, [r3, #32]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a12      	ldr	r2, [r2, #32]
 800257e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0204 	bic.w	r2, r2, #4
 800258e:	60da      	str	r2, [r3, #12]
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	b020c49c 	.word	0xb020c49c
 800259c:	3fa16872 	.word	0x3fa16872
 80025a0:	20000548 	.word	0x20000548
 80025a4:	2000053c 	.word	0x2000053c
 80025a8:	20000540 	.word	0x20000540
 80025ac:	20000544 	.word	0x20000544
 80025b0:	20000007 	.word	0x20000007
 80025b4:	200002bc 	.word	0x200002bc

080025b8 <PIDConfigInit>:
uint8_t tempDir = 1 ;
int8_t step = 0;
uint8_t turnMode = 2;


void PIDConfigInit(PIDConfig * cfg, const float Kp, const float Ki, const float Kd) {
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80025c8:	ed87 1a00 	vstr	s2, [r7]
	cfg->Kp = Kp;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	601a      	str	r2, [r3, #0]
	cfg->Ki = Ki;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]
	cfg->Kd = Kd;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	609a      	str	r2, [r3, #8]
	cfg->ek1 = 0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PIDConfigReset>:

void PIDConfigReset(PIDConfig * cfg) {
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	cfg->ek1 = 0;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
	cfg->ekSum = 0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;
//PIDConfig curPIDConfig;

void StraightLineMove(const uint8_t speedMode) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af04      	add	r7, sp, #16
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800262a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2302      	movs	r3, #2
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	4b58      	ldr	r3, [pc, #352]	; (8002798 <StraightLineMove+0x178>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2301      	movs	r3, #1
 800263a:	2237      	movs	r2, #55	; 0x37
 800263c:	21d0      	movs	r1, #208	; 0xd0
 800263e:	4857      	ldr	r0, [pc, #348]	; (800279c <StraightLineMove+0x17c>)
 8002640:	f004 fc40 	bl	8006ec4 <HAL_I2C_Mem_Read>
 8002644:	4b54      	ldr	r3, [pc, #336]	; (8002798 <StraightLineMove+0x178>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b52      	ldr	r3, [pc, #328]	; (8002798 <StraightLineMove+0x178>)
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21a      	sxth	r2, r3
 8002656:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <StraightLineMove+0x180>)
 8002658:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <StraightLineMove+0x184>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b10      	cmp	r3, #16
 8002666:	d101      	bne.n	800266c <StraightLineMove+0x4c>
 8002668:	2201      	movs	r2, #1
 800266a:	e001      	b.n	8002670 <StraightLineMove+0x50>
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <StraightLineMove+0x188>)
 8002672:	701a      	strb	r2, [r3, #0]
	//angleNow += ((gyroZ >= -10 && gyroZ <= 4) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
	angleNow += ((gyroZ >= -10 && gyroZ <= 8) ? 0 : gyroZ);
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <StraightLineMove+0x180>)
 8002676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267a:	f113 0f0a 	cmn.w	r3, #10
 800267e:	db04      	blt.n	800268a <StraightLineMove+0x6a>
 8002680:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <StraightLineMove+0x180>)
 8002682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002686:	2b08      	cmp	r3, #8
 8002688:	dd07      	ble.n	800269a <StraightLineMove+0x7a>
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <StraightLineMove+0x180>)
 800268c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	e001      	b.n	800269e <StraightLineMove+0x7e>
 800269a:	eddf 7a44 	vldr	s15, [pc, #272]	; 80027ac <StraightLineMove+0x18c>
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <StraightLineMove+0x190>)
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <StraightLineMove+0x190>)
 80026aa:	edc3 7a00 	vstr	s15, [r3]
	//angleNow += gyroZ;
	__PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <StraightLineMove+0x194>)
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <StraightLineMove+0x190>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <StraightLineMove+0x194>)
 80026c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <StraightLineMove+0x194>)
 80026c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80026ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <StraightLineMove+0x194>)
 80026d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <StraightLineMove+0x190>)
 80026da:	ed93 6a00 	vldr	s12, [r3]
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <StraightLineMove+0x194>)
 80026e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80026e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f4:	ee17 2a90 	vmov	r2, s15
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <StraightLineMove+0x198>)
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <StraightLineMove+0x190>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <StraightLineMove+0x194>)
 8002702:	60d3      	str	r3, [r2, #12]
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <StraightLineMove+0x194>)
 8002706:	ed93 7a04 	vldr	s14, [r3, #16]
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <StraightLineMove+0x190>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <StraightLineMove+0x194>)
 8002716:	edc3 7a04 	vstr	s15, [r3, #16]
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <StraightLineMove+0x198>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002722:	dc06      	bgt.n	8002732 <StraightLineMove+0x112>
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <StraightLineMove+0x198>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <StraightLineMove+0x19c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	bfb8      	it	lt
 800272e:	4613      	movlt	r3, r2
 8002730:	e001      	b.n	8002736 <StraightLineMove+0x116>
 8002732:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <StraightLineMove+0x198>)
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <StraightLineMove+0x188>)
 800273c:	f993 3000 	ldrsb.w	r3, [r3]
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <StraightLineMove+0x198>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	fb12 f303 	smulbb	r3, r2, r3
 800274c:	b29b      	uxth	r3, r3
 800274e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002752:	3308      	adds	r3, #8
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <StraightLineMove+0x1a0>)
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <StraightLineMove+0x188>)
 800275c:	f993 3000 	ldrsb.w	r3, [r3]
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <StraightLineMove+0x198>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	fb12 f303 	smulbb	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002772:	3308      	adds	r3, #8
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <StraightLineMove+0x1a4>)
 8002778:	801a      	strh	r2, [r3, #0]


	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <StraightLineMove+0x1a0>)
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <StraightLineMove+0x1a8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	635a      	str	r2, [r3, #52]	; 0x34
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <StraightLineMove+0x1a4>)
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <StraightLineMove+0x1a8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000478 	.word	0x20000478
 800279c:	200001d8 	.word	0x200001d8
 80027a0:	2000047a 	.word	0x2000047a
 80027a4:	20000274 	.word	0x20000274
 80027a8:	2000000b 	.word	0x2000000b
 80027ac:	00000000 	.word	0x00000000
 80027b0:	20000474 	.word	0x20000474
 80027b4:	20000514 	.word	0x20000514
 80027b8:	2000055c 	.word	0x2000055c
 80027bc:	fffffd44 	.word	0xfffffd44
 80027c0:	2000047c 	.word	0x2000047c
 80027c4:	2000047e 	.word	0x2000047e
 80027c8:	200003dc 	.word	0x200003dc

080027cc <StraightLineMoveBack>:

void StraightLineMoveBack(const uint8_t speedMode) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af04      	add	r7, sp, #16
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	2302      	movs	r3, #2
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <StraightLineMoveBack+0x178>)
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	2237      	movs	r2, #55	; 0x37
 80027e8:	21d0      	movs	r1, #208	; 0xd0
 80027ea:	4857      	ldr	r0, [pc, #348]	; (8002948 <StraightLineMoveBack+0x17c>)
 80027ec:	f004 fb6a 	bl	8006ec4 <HAL_I2C_Mem_Read>
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <StraightLineMoveBack+0x178>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	4b52      	ldr	r3, [pc, #328]	; (8002944 <StraightLineMoveBack+0x178>)
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21a      	sxth	r2, r3
 8002802:	4b52      	ldr	r3, [pc, #328]	; (800294c <StraightLineMoveBack+0x180>)
 8002804:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002806:	4b52      	ldr	r3, [pc, #328]	; (8002950 <StraightLineMoveBack+0x184>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b10      	cmp	r3, #16
 8002812:	d101      	bne.n	8002818 <StraightLineMoveBack+0x4c>
 8002814:	2201      	movs	r2, #1
 8002816:	e001      	b.n	800281c <StraightLineMoveBack+0x50>
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <StraightLineMoveBack+0x188>)
 800281e:	701a      	strb	r2, [r3, #0]
	//angleNow += ((gyroZ >= -10 && gyroZ <= 4) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
	angleNow += ((gyroZ >= -10 && gyroZ <= 8) ? 0 : gyroZ);
 8002820:	4b4a      	ldr	r3, [pc, #296]	; (800294c <StraightLineMoveBack+0x180>)
 8002822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002826:	f113 0f0a 	cmn.w	r3, #10
 800282a:	db04      	blt.n	8002836 <StraightLineMoveBack+0x6a>
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <StraightLineMoveBack+0x180>)
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	2b08      	cmp	r3, #8
 8002834:	dd07      	ble.n	8002846 <StraightLineMoveBack+0x7a>
 8002836:	4b45      	ldr	r3, [pc, #276]	; (800294c <StraightLineMoveBack+0x180>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	e001      	b.n	800284a <StraightLineMoveBack+0x7e>
 8002846:	eddf 7a44 	vldr	s15, [pc, #272]	; 8002958 <StraightLineMoveBack+0x18c>
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <StraightLineMoveBack+0x190>)
 800284c:	ed93 7a00 	vldr	s14, [r3]
 8002850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <StraightLineMoveBack+0x190>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
	//angleNow += gyroZ;
	__PID_SPEED_2Back(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <StraightLineMoveBack+0x194>)
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <StraightLineMoveBack+0x190>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <StraightLineMoveBack+0x194>)
 800286c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <StraightLineMoveBack+0x194>)
 8002872:	edd3 7a04 	vldr	s15, [r3, #16]
 8002876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <StraightLineMoveBack+0x194>)
 8002880:	edd3 6a02 	vldr	s13, [r3, #8]
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <StraightLineMoveBack+0x190>)
 8002886:	ed93 6a00 	vldr	s12, [r3]
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <StraightLineMoveBack+0x194>)
 800288c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002890:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a0:	ee17 2a90 	vmov	r2, s15
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <StraightLineMoveBack+0x198>)
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <StraightLineMoveBack+0x190>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <StraightLineMoveBack+0x194>)
 80028ae:	60d3      	str	r3, [r2, #12]
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <StraightLineMoveBack+0x194>)
 80028b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <StraightLineMoveBack+0x190>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <StraightLineMoveBack+0x194>)
 80028c2:	edc3 7a04 	vstr	s15, [r3, #16]
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <StraightLineMoveBack+0x198>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028ce:	dc06      	bgt.n	80028de <StraightLineMoveBack+0x112>
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <StraightLineMoveBack+0x198>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <StraightLineMoveBack+0x19c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	bfb8      	it	lt
 80028da:	4613      	movlt	r3, r2
 80028dc:	e001      	b.n	80028e2 <StraightLineMoveBack+0x116>
 80028de:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <StraightLineMoveBack+0x198>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <StraightLineMoveBack+0x188>)
 80028e8:	f993 3000 	ldrsb.w	r3, [r3]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <StraightLineMoveBack+0x198>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	fb12 f303 	smulbb	r3, r2, r3
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80028fe:	3308      	adds	r3, #8
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <StraightLineMoveBack+0x1a0>)
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <StraightLineMoveBack+0x188>)
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	b29a      	uxth	r2, r3
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <StraightLineMoveBack+0x198>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	fb12 f303 	smulbb	r3, r2, r3
 8002918:	b29b      	uxth	r3, r3
 800291a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800291e:	3308      	adds	r3, #8
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <StraightLineMoveBack+0x1a4>)
 8002924:	801a      	strh	r2, [r3, #0]
	__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <StraightLineMoveBack+0x1a0>)
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <StraightLineMoveBack+0x1a8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	635a      	str	r2, [r3, #52]	; 0x34
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <StraightLineMoveBack+0x1a4>)
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <StraightLineMoveBack+0x1a8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000478 	.word	0x20000478
 8002948:	200001d8 	.word	0x200001d8
 800294c:	2000047a 	.word	0x2000047a
 8002950:	20000274 	.word	0x20000274
 8002954:	2000000b 	.word	0x2000000b
 8002958:	00000000 	.word	0x00000000
 800295c:	20000474 	.word	0x20000474
 8002960:	20000514 	.word	0x20000514
 8002964:	2000055c 	.word	0x2000055c
 8002968:	fffffd44 	.word	0xfffffd44
 800296c:	2000047c 	.word	0x2000047c
 8002970:	2000047e 	.word	0x2000047e
 8002974:	200003dc 	.word	0x200003dc

08002978 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float * speedScale) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af04      	add	r7, sp, #16
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	2302      	movs	r3, #2
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	4b9f      	ldr	r3, [pc, #636]	; (8002c0c <StraightLineMoveSpeedScale+0x294>)
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2301      	movs	r3, #1
 8002994:	2237      	movs	r2, #55	; 0x37
 8002996:	21d0      	movs	r1, #208	; 0xd0
 8002998:	489d      	ldr	r0, [pc, #628]	; (8002c10 <StraightLineMoveSpeedScale+0x298>)
 800299a:	f004 fa93 	bl	8006ec4 <HAL_I2C_Mem_Read>
 800299e:	4b9b      	ldr	r3, [pc, #620]	; (8002c0c <StraightLineMoveSpeedScale+0x294>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	4b99      	ldr	r3, [pc, #612]	; (8002c0c <StraightLineMoveSpeedScale+0x294>)
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	4b98      	ldr	r3, [pc, #608]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 80029b2:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80029b4:	4b98      	ldr	r3, [pc, #608]	; (8002c18 <StraightLineMoveSpeedScale+0x2a0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d101      	bne.n	80029c6 <StraightLineMoveSpeedScale+0x4e>
 80029c2:	2201      	movs	r2, #1
 80029c4:	e001      	b.n	80029ca <StraightLineMoveSpeedScale+0x52>
 80029c6:	f04f 32ff 	mov.w	r2, #4294967295
 80029ca:	4b94      	ldr	r3, [pc, #592]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 80029cc:	701a      	strb	r2, [r3, #0]
	//if (dir==1) angleNow += ((gyroZ >= -4 && gyroZ <= 3) ? 0 : gyroZ);//forward indoor
//	if (dir==1) angleNow += ((gyroZ >= -6 && gyroZ <= 0.3) ? 0 : gyroZ); //ours
	if (dir==1) angleNow += ((gyroZ >= -15 && gyroZ <= 15) ? 0 : gyroZ);
 80029ce:	4b93      	ldr	r3, [pc, #588]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 80029d0:	f993 3000 	ldrsb.w	r3, [r3]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d11d      	bne.n	8002a14 <StraightLineMoveSpeedScale+0x9c>
 80029d8:	4b8e      	ldr	r3, [pc, #568]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 80029da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029de:	f113 0f0f 	cmn.w	r3, #15
 80029e2:	db04      	blt.n	80029ee <StraightLineMoveSpeedScale+0x76>
 80029e4:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	dd07      	ble.n	80029fe <StraightLineMoveSpeedScale+0x86>
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fc:	e001      	b.n	8002a02 <StraightLineMoveSpeedScale+0x8a>
 80029fe:	eddf 7a88 	vldr	s15, [pc, #544]	; 8002c20 <StraightLineMoveSpeedScale+0x2a8>
 8002a02:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a0c:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
 8002a12:	e022      	b.n	8002a5a <StraightLineMoveSpeedScale+0xe2>
	//else if (dir==-1) angleNow += ((gyroZ >= -2 && gyroZ <= 5) ? 0 : gyroZ);//indoor
	else if (dir==-1) angleNow += ((gyroZ >= -6 && gyroZ <= 6) ? 0 : gyroZ);
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002a16:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d11c      	bne.n	8002a5a <StraightLineMoveSpeedScale+0xe2>
 8002a20:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 8002a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a26:	f113 0f06 	cmn.w	r3, #6
 8002a2a:	db04      	blt.n	8002a36 <StraightLineMoveSpeedScale+0xbe>
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 8002a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	dd07      	ble.n	8002a46 <StraightLineMoveSpeedScale+0xce>
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <StraightLineMoveSpeedScale+0x29c>)
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a44:	e001      	b.n	8002a4a <StraightLineMoveSpeedScale+0xd2>
 8002a46:	eddf 7a76 	vldr	s15, [pc, #472]	; 8002c20 <StraightLineMoveSpeedScale+0x2a8>
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a4c:	ed93 7a00 	vldr	s14, [r3]
 8002a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a54:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_1) {
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d164      	bne.n	8002b2a <StraightLineMoveSpeedScale+0x1b2>
		__PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002a60:	4b71      	ldr	r3, [pc, #452]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002a62:	ed93 7a00 	vldr	s14, [r3]
 8002a66:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a70:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002a72:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a76:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002a78:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002a86:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a8a:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002a8c:	ed93 6a00 	vldr	s12, [r3]
 8002a90:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002a92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa6:	ee17 2a90 	vmov	r2, s15
 8002aaa:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002ab4:	60d3      	str	r3, [r2, #12]
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002ab8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <StraightLineMoveSpeedScale+0x2b0>)
 8002ac8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002acc:	4b57      	ldr	r3, [pc, #348]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002ad4:	dc06      	bgt.n	8002ae4 <StraightLineMoveSpeedScale+0x16c>
 8002ad6:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <StraightLineMoveSpeedScale+0x2b8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	bfb8      	it	lt
 8002ae0:	4613      	movlt	r3, r2
 8002ae2:	e001      	b.n	8002ae8 <StraightLineMoveSpeedScale+0x170>
 8002ae4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002ae8:	4a50      	ldr	r2, [pc, #320]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002aee:	f993 3000 	ldrsb.w	r3, [r3]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	fb12 f303 	smulbb	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <StraightLineMoveSpeedScale+0x2bc>)
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	fb12 f303 	smulbb	r3, r2, r3
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <StraightLineMoveSpeedScale+0x2c0>)
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e0f8      	b.n	8002d1c <StraightLineMoveSpeedScale+0x3a4>
	}else if (speedMode == SPEED_MODE_2){
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	f040 80f5 	bne.w	8002d1c <StraightLineMoveSpeedScale+0x3a4>
		if (dir==1) __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002b34:	f993 3000 	ldrsb.w	r3, [r3]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8083 	bne.w	8002c44 <StraightLineMoveSpeedScale+0x2cc>
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b50:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b54:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b64:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b68:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002b6a:	ed93 6a00 	vldr	s12, [r3]
 8002b6e:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b74:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 2a90 	vmov	r2, s15
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b92:	60d3      	str	r3, [r2, #12]
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002b96:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <StraightLineMoveSpeedScale+0x2ac>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <StraightLineMoveSpeedScale+0x2c4>)
 8002ba6:	edc3 7a04 	vstr	s15, [r3, #16]
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002bb2:	dc06      	bgt.n	8002bc2 <StraightLineMoveSpeedScale+0x24a>
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <StraightLineMoveSpeedScale+0x2c8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	bfb8      	it	lt
 8002bbe:	4613      	movlt	r3, r2
 8002bc0:	e001      	b.n	8002bc6 <StraightLineMoveSpeedScale+0x24e>
 8002bc2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	fb12 f303 	smulbb	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002be2:	3308      	adds	r3, #8
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <StraightLineMoveSpeedScale+0x2bc>)
 8002be8:	801a      	strh	r2, [r3, #0]
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <StraightLineMoveSpeedScale+0x2a4>)
 8002bec:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <StraightLineMoveSpeedScale+0x2b4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	fb12 f303 	smulbb	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002c02:	3308      	adds	r3, #8
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <StraightLineMoveSpeedScale+0x2c0>)
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e087      	b.n	8002d1c <StraightLineMoveSpeedScale+0x3a4>
 8002c0c:	20000478 	.word	0x20000478
 8002c10:	200001d8 	.word	0x200001d8
 8002c14:	2000047a 	.word	0x2000047a
 8002c18:	20000274 	.word	0x20000274
 8002c1c:	2000000b 	.word	0x2000000b
 8002c20:	00000000 	.word	0x00000000
 8002c24:	20000474 	.word	0x20000474
 8002c28:	200004ec 	.word	0x200004ec
 8002c2c:	2000055c 	.word	0x2000055c
 8002c30:	fffffe70 	.word	0xfffffe70
 8002c34:	2000047c 	.word	0x2000047c
 8002c38:	2000047e 	.word	0x2000047e
 8002c3c:	20000514 	.word	0x20000514
 8002c40:	fffffd44 	.word	0xfffffd44
		else if (dir==-1) __PID_SPEED_2(pidFast_b, angleNow, correction, dir, newDutyL, newDutyR);
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <StraightLineMoveSpeedScale+0x3f4>)
 8002c46:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d165      	bne.n	8002d1c <StraightLineMoveSpeedScale+0x3a4>
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002c52:	ed93 7a00 	vldr	s14, [r3]
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <StraightLineMoveSpeedScale+0x3fc>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c60:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002c62:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002c68:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002c76:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <StraightLineMoveSpeedScale+0x3fc>)
 8002c7c:	ed93 6a00 	vldr	s12, [r3]
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002c82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c96:	ee17 2a90 	vmov	r2, s15
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <StraightLineMoveSpeedScale+0x3fc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002ca8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cac:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <StraightLineMoveSpeedScale+0x3fc>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <StraightLineMoveSpeedScale+0x3f8>)
 8002cb8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002cc4:	dc06      	bgt.n	8002cd4 <StraightLineMoveSpeedScale+0x35c>
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <StraightLineMoveSpeedScale+0x404>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	bfb8      	it	lt
 8002cd0:	4613      	movlt	r3, r2
 8002cd2:	e001      	b.n	8002cd8 <StraightLineMoveSpeedScale+0x360>
 8002cd4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <StraightLineMoveSpeedScale+0x3f4>)
 8002cde:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	fb12 f303 	smulbb	r3, r2, r3
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <StraightLineMoveSpeedScale+0x408>)
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <StraightLineMoveSpeedScale+0x3f4>)
 8002cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <StraightLineMoveSpeedScale+0x400>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	fb12 f303 	smulbb	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002d14:	3308      	adds	r3, #8
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <StraightLineMoveSpeedScale+0x40c>)
 8002d1a:	801a      	strh	r2, [r3, #0]
	}

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <StraightLineMoveSpeedScale+0x408>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <StraightLineMoveSpeedScale+0x410>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3a:	ee17 2a90 	vmov	r2, s15
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <StraightLineMoveSpeedScale+0x40c>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <StraightLineMoveSpeedScale+0x410>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5e:	ee17 2a90 	vmov	r2, s15
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000000b 	.word	0x2000000b
 8002d70:	20000528 	.word	0x20000528
 8002d74:	20000474 	.word	0x20000474
 8002d78:	2000055c 	.word	0x2000055c
 8002d7c:	fffffd44 	.word	0xfffffd44
 8002d80:	2000047c 	.word	0x2000047c
 8002d84:	2000047e 	.word	0x2000047e
 8002d88:	200003dc 	.word	0x200003dc

08002d8c <StraightLineMoveSpeedScaleUS>:

void StraightLineMoveSpeedScaleUS(const uint8_t speedMode, float * speedScale) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9c:	9302      	str	r3, [sp, #8]
 8002d9e:	2302      	movs	r3, #2
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	4b8e      	ldr	r3, [pc, #568]	; (8002fdc <StraightLineMoveSpeedScaleUS+0x250>)
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2301      	movs	r3, #1
 8002da8:	2237      	movs	r2, #55	; 0x37
 8002daa:	21d0      	movs	r1, #208	; 0xd0
 8002dac:	488c      	ldr	r0, [pc, #560]	; (8002fe0 <StraightLineMoveSpeedScaleUS+0x254>)
 8002dae:	f004 f889 	bl	8006ec4 <HAL_I2C_Mem_Read>
 8002db2:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <StraightLineMoveSpeedScaleUS+0x250>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b21a      	sxth	r2, r3
 8002dba:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <StraightLineMoveSpeedScaleUS+0x250>)
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	4b87      	ldr	r3, [pc, #540]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002dc6:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8002dc8:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <StraightLineMoveSpeedScaleUS+0x25c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d101      	bne.n	8002dda <StraightLineMoveSpeedScaleUS+0x4e>
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	e001      	b.n	8002dde <StraightLineMoveSpeedScaleUS+0x52>
 8002dda:	f04f 32ff 	mov.w	r2, #4294967295
 8002dde:	4b83      	ldr	r3, [pc, #524]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002de0:	701a      	strb	r2, [r3, #0]
	//if (dir==1) angleNow += ((gyroZ >= -4 && gyroZ <= 3) ? 0 : gyroZ);//forward indoor
//	if (dir==1) angleNow += ((gyroZ >= -6 && gyroZ <= 0.3) ? 0 : gyroZ); //ours
	if (dir==1) angleNow += ((gyroZ >= -10 && gyroZ <= 10) ? 0 : gyroZ);
 8002de2:	4b82      	ldr	r3, [pc, #520]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002de4:	f993 3000 	ldrsb.w	r3, [r3]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d11d      	bne.n	8002e28 <StraightLineMoveSpeedScaleUS+0x9c>
 8002dec:	4b7d      	ldr	r3, [pc, #500]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df2:	f113 0f0a 	cmn.w	r3, #10
 8002df6:	db04      	blt.n	8002e02 <StraightLineMoveSpeedScaleUS+0x76>
 8002df8:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	dd07      	ble.n	8002e12 <StraightLineMoveSpeedScaleUS+0x86>
 8002e02:	4b78      	ldr	r3, [pc, #480]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e10:	e001      	b.n	8002e16 <StraightLineMoveSpeedScaleUS+0x8a>
 8002e12:	eddf 7a77 	vldr	s15, [pc, #476]	; 8002ff0 <StraightLineMoveSpeedScaleUS+0x264>
 8002e16:	4b77      	ldr	r3, [pc, #476]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002e18:	ed93 7a00 	vldr	s14, [r3]
 8002e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e20:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
 8002e26:	e022      	b.n	8002e6e <StraightLineMoveSpeedScaleUS+0xe2>
	//else if (dir==-1) angleNow += ((gyroZ >= -2 && gyroZ <= 5) ? 0 : gyroZ);//indoor
	else if (dir==-1) angleNow += ((gyroZ >= -6 && gyroZ <= 6) ? 0 : gyroZ);
 8002e28:	4b70      	ldr	r3, [pc, #448]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d11c      	bne.n	8002e6e <StraightLineMoveSpeedScaleUS+0xe2>
 8002e34:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	f113 0f06 	cmn.w	r3, #6
 8002e3e:	db04      	blt.n	8002e4a <StraightLineMoveSpeedScaleUS+0xbe>
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	dd07      	ble.n	8002e5a <StraightLineMoveSpeedScaleUS+0xce>
 8002e4a:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <StraightLineMoveSpeedScaleUS+0x258>)
 8002e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e58:	e001      	b.n	8002e5e <StraightLineMoveSpeedScaleUS+0xd2>
 8002e5a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8002ff0 <StraightLineMoveSpeedScaleUS+0x264>
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002e60:	ed93 7a00 	vldr	s14, [r3]
 8002e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e68:	4b62      	ldr	r3, [pc, #392]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_2){
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 80ef 	bne.w	8003054 <StraightLineMoveSpeedScaleUS+0x2c8>
		if (dir==1) __PID_SPEED_2US(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002e78:	f993 3000 	ldrsb.w	r3, [r3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d164      	bne.n	8002f4a <StraightLineMoveSpeedScaleUS+0x1be>
 8002e80:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	4b5b      	ldr	r3, [pc, #364]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002e92:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e96:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002e98:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ea4:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002ea6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002eaa:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002eac:	ed93 6a00 	vldr	s12, [r3]
 8002eb0:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002eb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec6:	ee17 2a90 	vmov	r2, s15
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a49      	ldr	r2, [pc, #292]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002ed4:	60d3      	str	r3, [r2, #12]
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002ed8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <StraightLineMoveSpeedScaleUS+0x26c>)
 8002ee8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002eec:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ef4:	dc06      	bgt.n	8002f04 <StraightLineMoveSpeedScaleUS+0x178>
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <StraightLineMoveSpeedScaleUS+0x274>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bfb8      	it	lt
 8002f00:	4613      	movlt	r3, r2
 8002f02:	e001      	b.n	8002f08 <StraightLineMoveSpeedScaleUS+0x17c>
 8002f04:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b37      	ldr	r3, [pc, #220]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	fb12 f303 	smulbb	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <StraightLineMoveSpeedScaleUS+0x278>)
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	fb12 f303 	smulbb	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <StraightLineMoveSpeedScaleUS+0x27c>)
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	e084      	b.n	8003054 <StraightLineMoveSpeedScaleUS+0x2c8>
		else if (dir==-1) __PID_SPEED_2US(pidFast_b, angleNow, correction, dir, newDutyL, newDutyR);
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <StraightLineMoveSpeedScaleUS+0x260>)
 8002f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d17e      	bne.n	8003054 <StraightLineMoveSpeedScaleUS+0x2c8>
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002f58:	ed93 7a00 	vldr	s14, [r3]
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002f68:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002f7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f80:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002f82:	ed93 6a00 	vldr	s12, [r3]
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002f88:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f9c:	ee17 2a90 	vmov	r2, s15
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002faa:	60d3      	str	r3, [r2, #12]
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <StraightLineMoveSpeedScaleUS+0x268>)
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <StraightLineMoveSpeedScaleUS+0x280>)
 8002fbe:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002fca:	dc21      	bgt.n	8003010 <StraightLineMoveSpeedScaleUS+0x284>
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <StraightLineMoveSpeedScaleUS+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <StraightLineMoveSpeedScaleUS+0x274>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bfb8      	it	lt
 8002fd6:	4613      	movlt	r3, r2
 8002fd8:	e01c      	b.n	8003014 <StraightLineMoveSpeedScaleUS+0x288>
 8002fda:	bf00      	nop
 8002fdc:	20000478 	.word	0x20000478
 8002fe0:	200001d8 	.word	0x200001d8
 8002fe4:	2000047a 	.word	0x2000047a
 8002fe8:	20000274 	.word	0x20000274
 8002fec:	2000000b 	.word	0x2000000b
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	20000474 	.word	0x20000474
 8002ff8:	20000514 	.word	0x20000514
 8002ffc:	2000055c 	.word	0x2000055c
 8003000:	fffffd44 	.word	0xfffffd44
 8003004:	2000047c 	.word	0x2000047c
 8003008:	2000047e 	.word	0x2000047e
 800300c:	20000528 	.word	0x20000528
 8003010:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003014:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <StraightLineMoveSpeedScaleUS+0x318>)
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <StraightLineMoveSpeedScaleUS+0x31c>)
 800301a:	f993 3000 	ldrsb.w	r3, [r3]
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <StraightLineMoveSpeedScaleUS+0x318>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	fb12 f303 	smulbb	r3, r2, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <StraightLineMoveSpeedScaleUS+0x320>)
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <StraightLineMoveSpeedScaleUS+0x31c>)
 8003038:	f993 3000 	ldrsb.w	r3, [r3]
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <StraightLineMoveSpeedScaleUS+0x318>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	fb12 f303 	smulbb	r3, r2, r3
 8003048:	b29b      	uxth	r3, r3
 800304a:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <StraightLineMoveSpeedScaleUS+0x324>)
 8003052:	801a      	strh	r2, [r3, #0]
	}

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <StraightLineMoveSpeedScaleUS+0x320>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <StraightLineMoveSpeedScaleUS+0x328>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003072:	ee17 2a90 	vmov	r2, s15
 8003076:	635a      	str	r2, [r3, #52]	; 0x34
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <StraightLineMoveSpeedScaleUS+0x324>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <StraightLineMoveSpeedScaleUS+0x328>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003096:	ee17 2a90 	vmov	r2, s15
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000055c 	.word	0x2000055c
 80030a8:	2000000b 	.word	0x2000000b
 80030ac:	2000047c 	.word	0x2000047c
 80030b0:	2000047e 	.word	0x2000047e
 80030b4:	200003dc 	.word	0x200003dc

080030b8 <StraightLineMoveSpeedScaleBack>:

void StraightLineMoveSpeedScaleBack(const uint8_t speedMode, float * speedScale) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af04      	add	r7, sp, #16
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
	__Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80030c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	2302      	movs	r3, #2
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	4b8f      	ldr	r3, [pc, #572]	; (800330c <StraightLineMoveSpeedScaleBack+0x254>)
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	2237      	movs	r2, #55	; 0x37
 80030d6:	21d0      	movs	r1, #208	; 0xd0
 80030d8:	488d      	ldr	r0, [pc, #564]	; (8003310 <StraightLineMoveSpeedScaleBack+0x258>)
 80030da:	f003 fef3 	bl	8006ec4 <HAL_I2C_Mem_Read>
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <StraightLineMoveSpeedScaleBack+0x254>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <StraightLineMoveSpeedScaleBack+0x254>)
 80030e8:	785b      	ldrb	r3, [r3, #1]
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	4b88      	ldr	r3, [pc, #544]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 80030f2:	801a      	strh	r2, [r3, #0]
	dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 80030f4:	4b88      	ldr	r3, [pc, #544]	; (8003318 <StraightLineMoveSpeedScaleBack+0x260>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d101      	bne.n	8003106 <StraightLineMoveSpeedScaleBack+0x4e>
 8003102:	2201      	movs	r2, #1
 8003104:	e001      	b.n	800310a <StraightLineMoveSpeedScaleBack+0x52>
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	4b84      	ldr	r3, [pc, #528]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 800310c:	701a      	strb	r2, [r3, #0]
	//if (dir==1) angleNow += ((gyroZ >= -4 && gyroZ <= 3) ? 0 : gyroZ);//forward indoor
//	if (dir==1) angleNow += ((gyroZ >= -6 && gyroZ <= 0.3) ? 0 : gyroZ); //ours
	if (dir==1) angleNow += ((gyroZ >= -10 && gyroZ <= 10) ? 0 : gyroZ);
 800310e:	4b83      	ldr	r3, [pc, #524]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 8003110:	f993 3000 	ldrsb.w	r3, [r3]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d11d      	bne.n	8003154 <StraightLineMoveSpeedScaleBack+0x9c>
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 800311a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311e:	f113 0f0a 	cmn.w	r3, #10
 8003122:	db04      	blt.n	800312e <StraightLineMoveSpeedScaleBack+0x76>
 8003124:	4b7b      	ldr	r3, [pc, #492]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	2b0a      	cmp	r3, #10
 800312c:	dd07      	ble.n	800313e <StraightLineMoveSpeedScaleBack+0x86>
 800312e:	4b79      	ldr	r3, [pc, #484]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 8003130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313c:	e001      	b.n	8003142 <StraightLineMoveSpeedScaleBack+0x8a>
 800313e:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003320 <StraightLineMoveSpeedScaleBack+0x268>
 8003142:	4b78      	ldr	r3, [pc, #480]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800314c:	4b75      	ldr	r3, [pc, #468]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 800314e:	edc3 7a00 	vstr	s15, [r3]
 8003152:	e022      	b.n	800319a <StraightLineMoveSpeedScaleBack+0xe2>
	//else if (dir==-1) angleNow += ((gyroZ >= -2 && gyroZ <= 5) ? 0 : gyroZ);//indoor
	else if (dir==-1) angleNow += ((gyroZ >= -6 && gyroZ <= 6) ? 0 : gyroZ);
 8003154:	4b71      	ldr	r3, [pc, #452]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 8003156:	f993 3000 	ldrsb.w	r3, [r3]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d11c      	bne.n	800319a <StraightLineMoveSpeedScaleBack+0xe2>
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 8003162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003166:	f113 0f06 	cmn.w	r3, #6
 800316a:	db04      	blt.n	8003176 <StraightLineMoveSpeedScaleBack+0xbe>
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 800316e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003172:	2b06      	cmp	r3, #6
 8003174:	dd07      	ble.n	8003186 <StraightLineMoveSpeedScaleBack+0xce>
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <StraightLineMoveSpeedScaleBack+0x25c>)
 8003178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003184:	e001      	b.n	800318a <StraightLineMoveSpeedScaleBack+0xd2>
 8003186:	eddf 7a66 	vldr	s15, [pc, #408]	; 8003320 <StraightLineMoveSpeedScaleBack+0x268>
 800318a:	4b66      	ldr	r3, [pc, #408]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 800318c:	ed93 7a00 	vldr	s14, [r3]
 8003190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003194:	4b63      	ldr	r3, [pc, #396]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 8003196:	edc3 7a00 	vstr	s15, [r3]
	if (speedMode == SPEED_MODE_2){
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f040 80f3 	bne.w	8003388 <StraightLineMoveSpeedScaleBack+0x2d0>
		if (dir==1) __PID_SPEED_2Back(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80031a2:	4b5e      	ldr	r3, [pc, #376]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 80031a4:	f993 3000 	ldrsb.w	r3, [r3]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d166      	bne.n	800327a <StraightLineMoveSpeedScaleBack+0x1c2>
 80031ac:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 80031ae:	ed93 7a00 	vldr	s14, [r3]
 80031b2:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031bc:	4b5a      	ldr	r3, [pc, #360]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 80031be:	edd3 6a01 	vldr	s13, [r3, #4]
 80031c2:	4b59      	ldr	r3, [pc, #356]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 80031c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80031c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d0:	4b55      	ldr	r3, [pc, #340]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 80031d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80031d8:	ed93 6a00 	vldr	s12, [r3]
 80031dc:	4b52      	ldr	r3, [pc, #328]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 80031de:	edd3 7a03 	vldr	s15, [r3, #12]
 80031e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f2:	ee17 2a90 	vmov	r2, s15
 80031f6:	4b4d      	ldr	r3, [pc, #308]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4a      	ldr	r2, [pc, #296]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 8003200:	60d3      	str	r3, [r2, #12]
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 8003204:	ed93 7a04 	vldr	s14, [r3, #16]
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	4b45      	ldr	r3, [pc, #276]	; (8003328 <StraightLineMoveSpeedScaleBack+0x270>)
 8003214:	edc3 7a04 	vstr	s15, [r3, #16]
 8003218:	4b44      	ldr	r3, [pc, #272]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003220:	dc06      	bgt.n	8003230 <StraightLineMoveSpeedScaleBack+0x178>
 8003222:	4b42      	ldr	r3, [pc, #264]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a42      	ldr	r2, [pc, #264]	; (8003330 <StraightLineMoveSpeedScaleBack+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bfb8      	it	lt
 800322c:	4613      	movlt	r3, r2
 800322e:	e001      	b.n	8003234 <StraightLineMoveSpeedScaleBack+0x17c>
 8003230:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003234:	4a3d      	ldr	r2, [pc, #244]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b38      	ldr	r3, [pc, #224]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 800323a:	f993 3000 	ldrsb.w	r3, [r3]
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	fb12 f303 	smulbb	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003250:	3308      	adds	r3, #8
 8003252:	b29a      	uxth	r2, r3
 8003254:	4b37      	ldr	r3, [pc, #220]	; (8003334 <StraightLineMoveSpeedScaleBack+0x27c>)
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 800325a:	f993 3000 	ldrsb.w	r3, [r3]
 800325e:	b29a      	uxth	r2, r3
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	fb12 f303 	smulbb	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8003270:	3308      	adds	r3, #8
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b30      	ldr	r3, [pc, #192]	; (8003338 <StraightLineMoveSpeedScaleBack+0x280>)
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e086      	b.n	8003388 <StraightLineMoveSpeedScaleBack+0x2d0>
		else if (dir==-1) __PID_SPEED_2Back(pidFast_b, angleNow, correction, dir, newDutyL, newDutyR);
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <StraightLineMoveSpeedScaleBack+0x264>)
 800327c:	f993 3000 	ldrsb.w	r3, [r3]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	f040 8080 	bne.w	8003388 <StraightLineMoveSpeedScaleBack+0x2d0>
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 800328a:	ed93 7a00 	vldr	s14, [r3]
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 800329a:	edd3 6a01 	vldr	s13, [r3, #4]
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80032a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80032b4:	ed93 6a00 	vldr	s12, [r3]
 80032b8:	4b20      	ldr	r3, [pc, #128]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80032be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ce:	ee17 2a90 	vmov	r2, s15
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032dc:	60d3      	str	r3, [r2, #12]
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <StraightLineMoveSpeedScaleBack+0x26c>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <StraightLineMoveSpeedScaleBack+0x284>)
 80032f0:	edc3 7a04 	vstr	s15, [r3, #16]
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80032fc:	dc20      	bgt.n	8003340 <StraightLineMoveSpeedScaleBack+0x288>
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <StraightLineMoveSpeedScaleBack+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <StraightLineMoveSpeedScaleBack+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bfb8      	it	lt
 8003308:	4613      	movlt	r3, r2
 800330a:	e01b      	b.n	8003344 <StraightLineMoveSpeedScaleBack+0x28c>
 800330c:	20000478 	.word	0x20000478
 8003310:	200001d8 	.word	0x200001d8
 8003314:	2000047a 	.word	0x2000047a
 8003318:	20000274 	.word	0x20000274
 800331c:	2000000b 	.word	0x2000000b
 8003320:	00000000 	.word	0x00000000
 8003324:	20000474 	.word	0x20000474
 8003328:	20000514 	.word	0x20000514
 800332c:	2000055c 	.word	0x2000055c
 8003330:	fffffd44 	.word	0xfffffd44
 8003334:	2000047c 	.word	0x2000047c
 8003338:	2000047e 	.word	0x2000047e
 800333c:	20000528 	.word	0x20000528
 8003340:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <StraightLineMoveSpeedScaleBack+0x320>)
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <StraightLineMoveSpeedScaleBack+0x324>)
 800334a:	f993 3000 	ldrsb.w	r3, [r3]
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <StraightLineMoveSpeedScaleBack+0x320>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	fb12 f303 	smulbb	r3, r2, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003360:	3308      	adds	r3, #8
 8003362:	b29a      	uxth	r2, r3
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <StraightLineMoveSpeedScaleBack+0x328>)
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <StraightLineMoveSpeedScaleBack+0x324>)
 800336a:	f993 3000 	ldrsb.w	r3, [r3]
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <StraightLineMoveSpeedScaleBack+0x320>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	fb12 f303 	smulbb	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8003380:	3308      	adds	r3, #8
 8003382:	b29a      	uxth	r2, r3
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <StraightLineMoveSpeedScaleBack+0x32c>)
 8003386:	801a      	strh	r2, [r3, #0]
	}

	__SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <StraightLineMoveSpeedScaleBack+0x328>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <StraightLineMoveSpeedScaleBack+0x330>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a6:	ee17 2a90 	vmov	r2, s15
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <StraightLineMoveSpeedScaleBack+0x32c>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <StraightLineMoveSpeedScaleBack+0x330>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	ee17 2a90 	vmov	r2, s15
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000055c 	.word	0x2000055c
 80033dc:	2000000b 	.word	0x2000000b
 80033e0:	2000047c 	.word	0x2000047c
 80033e4:	2000047e 	.word	0x2000047e
 80033e8:	200003dc 	.word	0x200003dc
 80033ec:	00000000 	.word	0x00000000

080033f0 <RobotMoveDist>:

void RobotMoveDist(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
 80033fc:	4613      	mov	r3, r2
 80033fe:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0;
 8003400:	4ba3      	ldr	r3, [pc, #652]	; (8003690 <RobotMoveDist+0x2a0>)
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	4ba2      	ldr	r3, [pc, #648]	; (8003694 <RobotMoveDist+0x2a4>)
 800340a:	2200      	movs	r2, #0
 800340c:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 800340e:	48a2      	ldr	r0, [pc, #648]	; (8003698 <RobotMoveDist+0x2a8>)
 8003410:	f7ff f8f3 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003414:	48a1      	ldr	r0, [pc, #644]	; (800369c <RobotMoveDist+0x2ac>)
 8003416:	f7ff f8f0 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 800341a:	48a1      	ldr	r0, [pc, #644]	; (80036a0 <RobotMoveDist+0x2b0>)
 800341c:	f7ff f8ed 	bl	80025fa <PIDConfigReset>
	curDistTick = 0;
 8003420:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <RobotMoveDist+0x2b4>)
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd f884 	bl	8000538 <__aeabi_f2d>
 8003430:	a391      	add	r3, pc, #580	; (adr r3, 8003678 <RobotMoveDist+0x288>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f7fd f8d7 	bl	80005e8 <__aeabi_dmul>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	a38f      	add	r3, pc, #572	; (adr r3, 8003680 <RobotMoveDist+0x290>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fc ff16 	bl	8000278 <__aeabi_dsub>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <RobotMoveDist+0x2b8>)
 800345a:	f7fd f8c5 	bl	80005e8 <__aeabi_dmul>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	4b90      	ldr	r3, [pc, #576]	; (80036ac <RobotMoveDist+0x2bc>)
 800346c:	f7fd f9e6 	bl	800083c <__aeabi_ddiv>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b8c      	ldr	r3, [pc, #560]	; (80036b0 <RobotMoveDist+0x2c0>)
 800347e:	f7fc fefb 	bl	8000278 <__aeabi_dsub>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fb47 	bl	8000b1c <__aeabi_d2uiz>
 800348e:	4603      	mov	r3, r0
 8003490:	b29a      	uxth	r2, r3
 8003492:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <RobotMoveDist+0x2c4>)
 8003494:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 8003496:	f002 f8c7 	bl	8005628 <HAL_GetTick>
 800349a:	4603      	mov	r3, r0
 800349c:	4a86      	ldr	r2, [pc, #536]	; (80036b8 <RobotMoveDist+0x2c8>)
 800349e:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	2104      	movs	r1, #4
 80034b0:	4882      	ldr	r0, [pc, #520]	; (80036bc <RobotMoveDist+0x2cc>)
 80034b2:	f003 faaf 	bl	8006a14 <HAL_GPIO_WritePin>
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	2108      	movs	r1, #8
 80034c6:	487d      	ldr	r0, [pc, #500]	; (80036bc <RobotMoveDist+0x2cc>)
 80034c8:	f003 faa4 	bl	8006a14 <HAL_GPIO_WritePin>
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	2120      	movs	r1, #32
 80034dc:	4877      	ldr	r0, [pc, #476]	; (80036bc <RobotMoveDist+0x2cc>)
 80034de:	f003 fa99 	bl	8006a14 <HAL_GPIO_WritePin>
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	2110      	movs	r1, #16
 80034f2:	4872      	ldr	r0, [pc, #456]	; (80036bc <RobotMoveDist+0x2cc>)
 80034f4:	f003 fa8e 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 80034f8:	4b71      	ldr	r3, [pc, #452]	; (80036c0 <RobotMoveDist+0x2d0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <RobotMoveDist+0x2d4>)
 8003502:	801a      	strh	r2, [r3, #0]
	//OLED_ShowNumber(10,10,lastDistTick_L,10,12);
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8003504:	4b6e      	ldr	r3, [pc, #440]	; (80036c0 <RobotMoveDist+0x2d0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <RobotMoveDist+0x2d0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d117      	bne.n	800354a <RobotMoveDist+0x15a>
 800351a:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <RobotMoveDist+0x2d4>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4293      	cmp	r3, r2
 8003524:	d806      	bhi.n	8003534 <RobotMoveDist+0x144>
 8003526:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <RobotMoveDist+0x2d4>)
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	b29b      	uxth	r3, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	b29b      	uxth	r3, r3
 8003532:	e007      	b.n	8003544 <RobotMoveDist+0x154>
 8003534:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <RobotMoveDist+0x2d4>)
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	b29b      	uxth	r3, r3
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <RobotMoveDist+0x2d8>)
 8003546:	8013      	strh	r3, [r2, #0]
 8003548:	e016      	b.n	8003578 <RobotMoveDist+0x188>
 800354a:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <RobotMoveDist+0x2d4>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4293      	cmp	r3, r2
 8003554:	d306      	bcc.n	8003564 <RobotMoveDist+0x174>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	b29a      	uxth	r2, r3
 800355a:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <RobotMoveDist+0x2d4>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	e007      	b.n	8003574 <RobotMoveDist+0x184>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	b29a      	uxth	r2, r3
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <RobotMoveDist+0x2d4>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <RobotMoveDist+0x2d8>)
 8003576:	8013      	strh	r3, [r2, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <RobotMoveDist+0x2d4>)
 800357e:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 8003580:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <RobotMoveDist+0x2b4>)
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <RobotMoveDist+0x2d8>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	4413      	add	r3, r2
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <RobotMoveDist+0x2b4>)
 800358e:	801a      	strh	r2, [r3, #0]
		//show number
		uint16_t hello = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	817b      	strh	r3, [r7, #10]
		uint16_t hello2=0;
 8003594:	2300      	movs	r3, #0
 8003596:	813b      	strh	r3, [r7, #8]
				 //sprintf(hello,"%d\0",curDistTick);
				 //OLED_ShowNumber(10,10,curDistTick,10,12);
				 //sprintf(hello2,"%d\0",targetDistTick);
				 //OLED_ShowNumber(10,30,targetDistTick,10,12);
//				 OLED_Refresh_Gram();
		if (curDistTick >= targetDistTick) break;
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <RobotMoveDist+0x2b4>)
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <RobotMoveDist+0x2c4>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	f080 80a6 	bcs.w	80036f2 <RobotMoveDist+0x302>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 80035a6:	f002 f83f 	bl	8005628 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <RobotMoveDist+0x2c8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	d9a6      	bls.n	8003504 <RobotMoveDist+0x114>
			if (speedMode == SPEED_MODE_T) {
 80035b6:	78bb      	ldrb	r3, [r7, #2]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <RobotMoveDist+0x1d4>
				StraightLineMove(SPEED_MODE_T);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7ff f82f 	bl	8002620 <StraightLineMove>
 80035c2:	e090      	b.n	80036e6 <RobotMoveDist+0x2f6>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990;
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <RobotMoveDist+0x2b4>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <RobotMoveDist+0x2c4>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bfb8      	it	lt
 80035d4:	425b      	neglt	r3, r3
 80035d6:	4a3d      	ldr	r2, [pc, #244]	; (80036cc <RobotMoveDist+0x2dc>)
 80035d8:	fb82 1203 	smull	r1, r2, r2, r3
 80035dc:	11d2      	asrs	r2, r2, #7
 80035de:	17db      	asrs	r3, r3, #31
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <RobotMoveDist+0x2e0>)
 80035ec:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80035f0:	78bb      	ldrb	r3, [r7, #2]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11e      	bne.n	8003634 <RobotMoveDist+0x244>
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <RobotMoveDist+0x2e0>)
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	dd02      	ble.n	8003610 <RobotMoveDist+0x220>
 800360a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800360e:	e00e      	b.n	800362e <RobotMoveDist+0x23e>
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <RobotMoveDist+0x2e0>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800361a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	d502      	bpl.n	800362a <RobotMoveDist+0x23a>
 8003624:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8003628:	e001      	b.n	800362e <RobotMoveDist+0x23e>
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <RobotMoveDist+0x2e0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <RobotMoveDist+0x2e0>)
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e053      	b.n	80036dc <RobotMoveDist+0x2ec>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.6 ? 0.5 : speedScale);
 8003634:	78bb      	ldrb	r3, [r7, #2]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d150      	bne.n	80036dc <RobotMoveDist+0x2ec>
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <RobotMoveDist+0x2e0>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	dd02      	ble.n	8003654 <RobotMoveDist+0x264>
 800364e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003652:	e041      	b.n	80036d8 <RobotMoveDist+0x2e8>
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <RobotMoveDist+0x2e0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff6d 	bl	8000538 <__aeabi_f2d>
 800365e:	a30a      	add	r3, pc, #40	; (adr r3, 8003688 <RobotMoveDist+0x298>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fd fa32 	bl	8000acc <__aeabi_dcmplt>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d032      	beq.n	80036d4 <RobotMoveDist+0x2e4>
 800366e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003672:	e031      	b.n	80036d8 <RobotMoveDist+0x2e8>
 8003674:	f3af 8000 	nop.w
 8003678:	fc66b22a 	.word	0xfc66b22a
 800367c:	3ff266ac 	.word	0x3ff266ac
 8003680:	bb2526f8 	.word	0xbb2526f8
 8003684:	3feee3d4 	.word	0x3feee3d4
 8003688:	33333333 	.word	0x33333333
 800368c:	3fe33333 	.word	0x3fe33333
 8003690:	20000474 	.word	0x20000474
 8003694:	2000047a 	.word	0x2000047a
 8003698:	20000500 	.word	0x20000500
 800369c:	200004ec 	.word	0x200004ec
 80036a0:	20000514 	.word	0x20000514
 80036a4:	20000494 	.word	0x20000494
 80036a8:	4094a000 	.word	0x4094a000
 80036ac:	40340000 	.word	0x40340000
 80036b0:	40240000 	.word	0x40240000
 80036b4:	20000496 	.word	0x20000496
 80036b8:	20000480 	.word	0x20000480
 80036bc:	40020000 	.word	0x40020000
 80036c0:	20000274 	.word	0x20000274
 80036c4:	2000049a 	.word	0x2000049a
 80036c8:	20000498 	.word	0x20000498
 80036cc:	21195767 	.word	0x21195767
 80036d0:	20000000 	.word	0x20000000
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <RobotMoveDist+0x31c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0c      	ldr	r2, [pc, #48]	; (800370c <RobotMoveDist+0x31c>)
 80036da:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScale(speedMode, &speedScale);
 80036dc:	78bb      	ldrb	r3, [r7, #2]
 80036de:	490b      	ldr	r1, [pc, #44]	; (800370c <RobotMoveDist+0x31c>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f949 	bl	8002978 <StraightLineMoveSpeedScale>
			}

			last_curTask_tick = HAL_GetTick();
 80036e6:	f001 ff9f 	bl	8005628 <HAL_GetTick>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <RobotMoveDist+0x320>)
 80036ee:	6013      	str	r3, [r2, #0]
	do {
 80036f0:	e708      	b.n	8003504 <RobotMoveDist+0x114>
		if (curDistTick >= targetDistTick) break;
 80036f2:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <RobotMoveDist+0x324>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <RobotMoveDist+0x324>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000000 	.word	0x20000000
 8003710:	20000480 	.word	0x20000480
 8003714:	200003dc 	.word	0x200003dc

08003718 <RobotMoveDistBack>:

void RobotMoveDistBack(float * targetDist, const uint8_t dir, const uint8_t speedMode) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	4613      	mov	r3, r2
 8003726:	70bb      	strb	r3, [r7, #2]
	angleNow = 0; gyroZ = 0;
 8003728:	4ba3      	ldr	r3, [pc, #652]	; (80039b8 <RobotMoveDistBack+0x2a0>)
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	4ba2      	ldr	r3, [pc, #648]	; (80039bc <RobotMoveDistBack+0x2a4>)
 8003732:	2200      	movs	r2, #0
 8003734:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003736:	48a2      	ldr	r0, [pc, #648]	; (80039c0 <RobotMoveDistBack+0x2a8>)
 8003738:	f7fe ff5f 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 800373c:	48a1      	ldr	r0, [pc, #644]	; (80039c4 <RobotMoveDistBack+0x2ac>)
 800373e:	f7fe ff5c 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8003742:	48a1      	ldr	r0, [pc, #644]	; (80039c8 <RobotMoveDistBack+0x2b0>)
 8003744:	f7fe ff59 	bl	80025fa <PIDConfigReset>
	curDistTick = 0;
 8003748:	4ba0      	ldr	r3, [pc, #640]	; (80039cc <RobotMoveDistBack+0x2b4>)
 800374a:	2200      	movs	r2, #0
 800374c:	801a      	strh	r2, [r3, #0]

	__GET_TARGETTICK(*targetDist, targetDistTick);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fef0 	bl	8000538 <__aeabi_f2d>
 8003758:	a391      	add	r3, pc, #580	; (adr r3, 80039a0 <RobotMoveDistBack+0x288>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fc ff43 	bl	80005e8 <__aeabi_dmul>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	a38f      	add	r3, pc, #572	; (adr r3, 80039a8 <RobotMoveDistBack+0x290>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc fd82 	bl	8000278 <__aeabi_dsub>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	4b93      	ldr	r3, [pc, #588]	; (80039d0 <RobotMoveDistBack+0x2b8>)
 8003782:	f7fc ff31 	bl	80005e8 <__aeabi_dmul>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b90      	ldr	r3, [pc, #576]	; (80039d4 <RobotMoveDistBack+0x2bc>)
 8003794:	f7fd f852 	bl	800083c <__aeabi_ddiv>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <RobotMoveDistBack+0x2c0>)
 80037a6:	f7fc fd67 	bl	8000278 <__aeabi_dsub>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd f9b3 	bl	8000b1c <__aeabi_d2uiz>
 80037b6:	4603      	mov	r3, r0
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	4b88      	ldr	r3, [pc, #544]	; (80039dc <RobotMoveDistBack+0x2c4>)
 80037bc:	801a      	strh	r2, [r3, #0]

	last_curTask_tick = HAL_GetTick();
 80037be:	f001 ff33 	bl	8005628 <HAL_GetTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a86      	ldr	r2, [pc, #536]	; (80039e0 <RobotMoveDistBack+0x2c8>)
 80037c6:	6013      	str	r3, [r2, #0]
	__SET_MOTOR_DIRECTION(dir);
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	2104      	movs	r1, #4
 80037d8:	4882      	ldr	r0, [pc, #520]	; (80039e4 <RobotMoveDistBack+0x2cc>)
 80037da:	f003 f91b 	bl	8006a14 <HAL_GPIO_WritePin>
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	2108      	movs	r1, #8
 80037ee:	487d      	ldr	r0, [pc, #500]	; (80039e4 <RobotMoveDistBack+0x2cc>)
 80037f0:	f003 f910 	bl	8006a14 <HAL_GPIO_WritePin>
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	2120      	movs	r1, #32
 8003804:	4877      	ldr	r0, [pc, #476]	; (80039e4 <RobotMoveDistBack+0x2cc>)
 8003806:	f003 f905 	bl	8006a14 <HAL_GPIO_WritePin>
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	2110      	movs	r1, #16
 800381a:	4872      	ldr	r0, [pc, #456]	; (80039e4 <RobotMoveDistBack+0x2cc>)
 800381c:	f003 f8fa 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8003820:	4b71      	ldr	r3, [pc, #452]	; (80039e8 <RobotMoveDistBack+0x2d0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b29a      	uxth	r2, r3
 8003828:	4b70      	ldr	r3, [pc, #448]	; (80039ec <RobotMoveDistBack+0x2d4>)
 800382a:	801a      	strh	r2, [r3, #0]
	//OLED_ShowNumber(10,10,lastDistTick_L,10,12);
	do {
		__GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 800382c:	4b6e      	ldr	r3, [pc, #440]	; (80039e8 <RobotMoveDistBack+0x2d0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <RobotMoveDistBack+0x2d0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	d117      	bne.n	8003872 <RobotMoveDistBack+0x15a>
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <RobotMoveDistBack+0x2d4>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4293      	cmp	r3, r2
 800384c:	d806      	bhi.n	800385c <RobotMoveDistBack+0x144>
 800384e:	4b67      	ldr	r3, [pc, #412]	; (80039ec <RobotMoveDistBack+0x2d4>)
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	b29b      	uxth	r3, r3
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	e007      	b.n	800386c <RobotMoveDistBack+0x154>
 800385c:	4b63      	ldr	r3, [pc, #396]	; (80039ec <RobotMoveDistBack+0x2d4>)
 800385e:	881a      	ldrh	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b29b      	uxth	r3, r3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <RobotMoveDistBack+0x2d8>)
 800386e:	8013      	strh	r3, [r2, #0]
 8003870:	e016      	b.n	80038a0 <RobotMoveDistBack+0x188>
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <RobotMoveDistBack+0x2d4>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <RobotMoveDistBack+0x174>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b29a      	uxth	r2, r3
 8003882:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <RobotMoveDistBack+0x2d4>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	b29b      	uxth	r3, r3
 800388a:	e007      	b.n	800389c <RobotMoveDistBack+0x184>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	b29a      	uxth	r2, r3
 8003890:	4b56      	ldr	r3, [pc, #344]	; (80039ec <RobotMoveDistBack+0x2d4>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <RobotMoveDistBack+0x2d8>)
 800389e:	8013      	strh	r3, [r2, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <RobotMoveDistBack+0x2d4>)
 80038a6:	801a      	strh	r2, [r3, #0]
		curDistTick += dist_dL;
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <RobotMoveDistBack+0x2b4>)
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <RobotMoveDistBack+0x2d8>)
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4b45      	ldr	r3, [pc, #276]	; (80039cc <RobotMoveDistBack+0x2b4>)
 80038b6:	801a      	strh	r2, [r3, #0]
		//show number
		uint16_t hello = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	817b      	strh	r3, [r7, #10]
		uint16_t hello2=0;
 80038bc:	2300      	movs	r3, #0
 80038be:	813b      	strh	r3, [r7, #8]
				 //sprintf(hello,"%d\0",curDistTick);
				 //OLED_ShowNumber(10,10,curDistTick,10,12);
				 //sprintf(hello2,"%d\0",targetDistTick);
				 //OLED_ShowNumber(10,30,targetDistTick,10,12);
//				 OLED_Refresh_Gram();
		if (curDistTick >= targetDistTick) break;
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <RobotMoveDistBack+0x2b4>)
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	4b45      	ldr	r3, [pc, #276]	; (80039dc <RobotMoveDistBack+0x2c4>)
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	f080 80a6 	bcs.w	8003a1a <RobotMoveDistBack+0x302>

		if (HAL_GetTick() - last_curTask_tick >= 10) {
 80038ce:	f001 feab 	bl	8005628 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <RobotMoveDistBack+0x2c8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d9a6      	bls.n	800382c <RobotMoveDistBack+0x114>
			if (speedMode == SPEED_MODE_T) {
 80038de:	78bb      	ldrb	r3, [r7, #2]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <RobotMoveDistBack+0x1d4>
				StraightLineMoveBack(SPEED_MODE_T);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fe ff71 	bl	80027cc <StraightLineMoveBack>
 80038ea:	e090      	b.n	8003a0e <RobotMoveDistBack+0x2f6>
			} else {
				speedScale = abs(curDistTick - targetDistTick) / 990;
 80038ec:	4b37      	ldr	r3, [pc, #220]	; (80039cc <RobotMoveDistBack+0x2b4>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <RobotMoveDistBack+0x2c4>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bfb8      	it	lt
 80038fc:	425b      	neglt	r3, r3
 80038fe:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <RobotMoveDistBack+0x2dc>)
 8003900:	fb82 1203 	smull	r1, r2, r2, r3
 8003904:	11d2      	asrs	r2, r2, #7
 8003906:	17db      	asrs	r3, r3, #31
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 8003914:	edc3 7a00 	vstr	s15, [r3]
				if (speedMode == SPEED_MODE_1) speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003918:	78bb      	ldrb	r3, [r7, #2]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11e      	bne.n	800395c <RobotMoveDistBack+0x244>
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003930:	dd02      	ble.n	8003938 <RobotMoveDistBack+0x220>
 8003932:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003936:	e00e      	b.n	8003956 <RobotMoveDistBack+0x23e>
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	d502      	bpl.n	8003952 <RobotMoveDistBack+0x23a>
 800394c:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8003950:	e001      	b.n	8003956 <RobotMoveDistBack+0x23e>
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e053      	b.n	8003a04 <RobotMoveDistBack+0x2ec>
				else if (speedMode == SPEED_MODE_2)speedScale = speedScale > 1 ? 1 : (speedScale < 0.6 ? 0.5 : speedScale);
 800395c:	78bb      	ldrb	r3, [r7, #2]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d150      	bne.n	8003a04 <RobotMoveDistBack+0x2ec>
 8003962:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	dd02      	ble.n	800397c <RobotMoveDistBack+0x264>
 8003976:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800397a:	e041      	b.n	8003a00 <RobotMoveDistBack+0x2e8>
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <RobotMoveDistBack+0x2e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fdd9 	bl	8000538 <__aeabi_f2d>
 8003986:	a30a      	add	r3, pc, #40	; (adr r3, 80039b0 <RobotMoveDistBack+0x298>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fd f89e 	bl	8000acc <__aeabi_dcmplt>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d032      	beq.n	80039fc <RobotMoveDistBack+0x2e4>
 8003996:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800399a:	e031      	b.n	8003a00 <RobotMoveDistBack+0x2e8>
 800399c:	f3af 8000 	nop.w
 80039a0:	fc66b22a 	.word	0xfc66b22a
 80039a4:	3ff266ac 	.word	0x3ff266ac
 80039a8:	bb2526f8 	.word	0xbb2526f8
 80039ac:	3feee3d4 	.word	0x3feee3d4
 80039b0:	33333333 	.word	0x33333333
 80039b4:	3fe33333 	.word	0x3fe33333
 80039b8:	20000474 	.word	0x20000474
 80039bc:	2000047a 	.word	0x2000047a
 80039c0:	20000500 	.word	0x20000500
 80039c4:	200004ec 	.word	0x200004ec
 80039c8:	20000514 	.word	0x20000514
 80039cc:	20000494 	.word	0x20000494
 80039d0:	4094a000 	.word	0x4094a000
 80039d4:	40340000 	.word	0x40340000
 80039d8:	40240000 	.word	0x40240000
 80039dc:	20000496 	.word	0x20000496
 80039e0:	20000480 	.word	0x20000480
 80039e4:	40020000 	.word	0x40020000
 80039e8:	20000274 	.word	0x20000274
 80039ec:	2000049a 	.word	0x2000049a
 80039f0:	20000498 	.word	0x20000498
 80039f4:	21195767 	.word	0x21195767
 80039f8:	20000000 	.word	0x20000000
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <RobotMoveDistBack+0x31c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <RobotMoveDistBack+0x31c>)
 8003a02:	6013      	str	r3, [r2, #0]
				StraightLineMoveSpeedScaleBack(speedMode, &speedScale);
 8003a04:	78bb      	ldrb	r3, [r7, #2]
 8003a06:	490b      	ldr	r1, [pc, #44]	; (8003a34 <RobotMoveDistBack+0x31c>)
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fb55 	bl	80030b8 <StraightLineMoveSpeedScaleBack>
			}

			last_curTask_tick = HAL_GetTick();
 8003a0e:	f001 fe0b 	bl	8005628 <HAL_GetTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <RobotMoveDistBack+0x320>)
 8003a16:	6013      	str	r3, [r2, #0]
	do {
 8003a18:	e708      	b.n	800382c <RobotMoveDistBack+0x114>
		if (curDistTick >= targetDistTick) break;
 8003a1a:	bf00      	nop
		}
	} while (1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <RobotMoveDistBack+0x324>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <RobotMoveDistBack+0x324>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000480 	.word	0x20000480
 8003a3c:	200003dc 	.word	0x200003dc

08003a40 <RobotMoveDistObstacleUS>:
	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
}

void RobotMoveDistObstacleUS(float * targetDist, const uint8_t speedMode) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
	angleNow = 0; gyroZ = 0;
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <RobotMoveDistObstacleUS+0x208>)
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	4b7d      	ldr	r3, [pc, #500]	; (8003c4c <RobotMoveDistObstacleUS+0x20c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003a5a:	487d      	ldr	r0, [pc, #500]	; (8003c50 <RobotMoveDistObstacleUS+0x210>)
 8003a5c:	f7fe fdcd 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003a60:	487c      	ldr	r0, [pc, #496]	; (8003c54 <RobotMoveDistObstacleUS+0x214>)
 8003a62:	f7fe fdca 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8003a66:	487c      	ldr	r0, [pc, #496]	; (8003c58 <RobotMoveDistObstacleUS+0x218>)
 8003a68:	f7fe fdc7 	bl	80025fa <PIDConfigReset>
//	Distance = 1000;
//	uint8_t dist[20];
//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	last_curTask_tick = HAL_GetTick();
 8003a6c:	f001 fddc 	bl	8005628 <HAL_GetTick>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <RobotMoveDistObstacleUS+0x21c>)
 8003a74:	6013      	str	r3, [r2, #0]
//		  cnt++;
//	  }
//	  sprintf(dist, "DIST: %5d CM", Distance);
//	  OLED_ShowString(10,50,dist);
//	  OLED_Refresh_Gram();
	  if (abs(*targetDist - Distance) <= 2) break;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a90:	ee17 3a90 	vmov	r3, s15
 8003a94:	f113 0f02 	cmn.w	r3, #2
 8003a98:	db11      	blt.n	8003abe <RobotMoveDistObstacleUS+0x7e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	ed93 7a00 	vldr	s14, [r3]
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab4:	ee17 3a90 	vmov	r3, s15
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	f340 80b2 	ble.w	8003c22 <RobotMoveDistObstacleUS+0x1e2>
	  __SET_MOTOR_DIRECTION(Distance >= *targetDist);
 8003abe:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad8:	bfac      	ite	ge
 8003ada:	2301      	movge	r3, #1
 8003adc:	2300      	movlt	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2104      	movs	r1, #4
 8003aec:	485d      	ldr	r0, [pc, #372]	; (8003c64 <RobotMoveDistObstacleUS+0x224>)
 8003aee:	f002 ff91 	bl	8006a14 <HAL_GPIO_WritePin>
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	bfac      	ite	ge
 8003b0e:	2301      	movge	r3, #1
 8003b10:	2300      	movlt	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	2108      	movs	r1, #8
 8003b18:	4852      	ldr	r0, [pc, #328]	; (8003c64 <RobotMoveDistObstacleUS+0x224>)
 8003b1a:	f002 ff7b 	bl	8006a14 <HAL_GPIO_WritePin>
 8003b1e:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	bfac      	ite	ge
 8003b3a:	2301      	movge	r3, #1
 8003b3c:	2300      	movlt	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2120      	movs	r1, #32
 8003b4c:	4845      	ldr	r0, [pc, #276]	; (8003c64 <RobotMoveDistObstacleUS+0x224>)
 8003b4e:	f002 ff61 	bl	8006a14 <HAL_GPIO_WritePin>
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	edd3 7a00 	vldr	s15, [r3]
 8003b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	bfac      	ite	ge
 8003b6e:	2301      	movge	r3, #1
 8003b70:	2300      	movlt	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	2110      	movs	r1, #16
 8003b78:	483a      	ldr	r0, [pc, #232]	; (8003c64 <RobotMoveDistObstacleUS+0x224>)
 8003b7a:	f002 ff4b 	bl	8006a14 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 8003b7e:	f001 fd53 	bl	8005628 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <RobotMoveDistObstacleUS+0x21c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b13      	cmp	r3, #19
 8003b8c:	f67f af73 	bls.w	8003a76 <RobotMoveDistObstacleUS+0x36>
		  speedScale = abs(Distance - *targetDist) / 20; // slow down at 15cm
 8003b90:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <RobotMoveDistObstacleUS+0x220>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfb8      	it	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <RobotMoveDistObstacleUS+0x228>)
 8003bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8003bba:	10d2      	asrs	r2, r2, #3
 8003bbc:	17db      	asrs	r3, r3, #31
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
		  speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.3 : speedScale);
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	dd02      	ble.n	8003be8 <RobotMoveDistObstacleUS+0x1a8>
 8003be2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003be6:	e010      	b.n	8003c0a <RobotMoveDistObstacleUS+0x1ca>
 8003be8:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fca3 	bl	8000538 <__aeabi_f2d>
 8003bf2:	a313      	add	r3, pc, #76	; (adr r3, 8003c40 <RobotMoveDistObstacleUS+0x200>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc ff68 	bl	8000acc <__aeabi_dcmplt>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <RobotMoveDistObstacleUS+0x1c6>
 8003c02:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <RobotMoveDistObstacleUS+0x230>)
 8003c04:	e001      	b.n	8003c0a <RobotMoveDistObstacleUS+0x1ca>
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003c0c:	6013      	str	r3, [r2, #0]
		  StraightLineMoveSpeedScaleUS(SPEED_MODE_2, &speedScale);
 8003c0e:	4917      	ldr	r1, [pc, #92]	; (8003c6c <RobotMoveDistObstacleUS+0x22c>)
 8003c10:	2002      	movs	r0, #2
 8003c12:	f7ff f8bb 	bl	8002d8c <StraightLineMoveSpeedScaleUS>
//		  speedScale = 1;
//		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);

		  last_curTask_tick = HAL_GetTick();
 8003c16:	f001 fd07 	bl	8005628 <HAL_GetTick>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4a0f      	ldr	r2, [pc, #60]	; (8003c5c <RobotMoveDistObstacleUS+0x21c>)
 8003c1e:	6013      	str	r3, [r2, #0]
	  if (abs(*targetDist - Distance) <= 2) break;
 8003c20:	e729      	b.n	8003a76 <RobotMoveDistObstacleUS+0x36>
 8003c22:	bf00      	nop
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <RobotMoveDistObstacleUS+0x234>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <RobotMoveDistObstacleUS+0x234>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	f3af 8000 	nop.w
 8003c40:	9999999a 	.word	0x9999999a
 8003c44:	3fd99999 	.word	0x3fd99999
 8003c48:	20000474 	.word	0x20000474
 8003c4c:	2000047a 	.word	0x2000047a
 8003c50:	20000500 	.word	0x20000500
 8003c54:	200004ec 	.word	0x200004ec
 8003c58:	20000514 	.word	0x20000514
 8003c5c:	20000480 	.word	0x20000480
 8003c60:	20000006 	.word	0x20000006
 8003c64:	40020000 	.word	0x40020000
 8003c68:	66666667 	.word	0x66666667
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	3e99999a 	.word	0x3e99999a
 8003c74:	200003dc 	.word	0x200003dc

08003c78 <RobotMoveDistIR>:

void RobotMoveDistIR(const uint8_t speedMode, int isRight) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
	angleNow = 0; gyroZ = 0;
 8003c84:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <RobotMoveDistIR+0x230>)
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	4b87      	ldr	r3, [pc, #540]	; (8003eac <RobotMoveDistIR+0x234>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003c92:	4887      	ldr	r0, [pc, #540]	; (8003eb0 <RobotMoveDistIR+0x238>)
 8003c94:	f7fe fcb1 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003c98:	4886      	ldr	r0, [pc, #536]	; (8003eb4 <RobotMoveDistIR+0x23c>)
 8003c9a:	f7fe fcae 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8003c9e:	4886      	ldr	r0, [pc, #536]	; (8003eb8 <RobotMoveDistIR+0x240>)
 8003ca0:	f7fe fcab 	bl	80025fa <PIDConfigReset>
	Distance = 1000;
 8003ca4:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <RobotMoveDistIR+0x244>)
 8003ca6:	22e8      	movs	r2, #232	; 0xe8
 8003ca8:	701a      	strb	r2, [r3, #0]
	uint8_t dist[20];
//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	last_curTask_tick = HAL_GetTick();
 8003caa:	f001 fcbd 	bl	8005628 <HAL_GetTick>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <RobotMoveDistIR+0x248>)
 8003cb2:	6013      	str	r3, [r2, #0]

	do {
		if (isRight){
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d052      	beq.n	8003d60 <RobotMoveDistIR+0xe8>
			__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	e01f      	b.n	8003d02 <RobotMoveDistIR+0x8a>
 8003cc2:	4881      	ldr	r0, [pc, #516]	; (8003ec8 <RobotMoveDistIR+0x250>)
 8003cc4:	f001 fd24 	bl	8005710 <HAL_ADC_Start>
 8003cc8:	2114      	movs	r1, #20
 8003cca:	487f      	ldr	r0, [pc, #508]	; (8003ec8 <RobotMoveDistIR+0x250>)
 8003ccc:	f001 fdf2 	bl	80058b4 <HAL_ADC_PollForConversion>
 8003cd0:	487d      	ldr	r0, [pc, #500]	; (8003ec8 <RobotMoveDistIR+0x250>)
 8003cd2:	f001 fe7a 	bl	80059ca <HAL_ADC_GetValue>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b7c      	ldr	r3, [pc, #496]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b78      	ldr	r3, [pc, #480]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a79      	ldr	r2, [pc, #484]	; (8003ed0 <RobotMoveDistIR+0x258>)
 8003cea:	fb82 1203 	smull	r1, r2, r2, r3
 8003cee:	1151      	asrs	r1, r2, #5
 8003cf0:	17da      	asrs	r2, r3, #31
 8003cf2:	1a8a      	subs	r2, r1, r2
 8003cf4:	2164      	movs	r1, #100	; 0x64
 8003cf6:	fb01 f202 	mul.w	r2, r1, r2
 8003cfa:	1a9a      	subs	r2, r3, r2
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	4b71      	ldr	r3, [pc, #452]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	2b62      	cmp	r3, #98	; 0x62
 8003d08:	d9db      	bls.n	8003cc2 <RobotMoveDistIR+0x4a>
 8003d0a:	4b70      	ldr	r3, [pc, #448]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6d      	ldr	r2, [pc, #436]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fbec 	bl	80004f4 <__aeabi_ui2d>
 8003d1c:	a35e      	add	r3, pc, #376	; (adr r3, 8003e98 <RobotMoveDistIR+0x220>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc faa9 	bl	8000278 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	a15d      	add	r1, pc, #372	; (adr r1, 8003ea0 <RobotMoveDistIR+0x228>)
 8003d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d30:	f7fc fd84 	bl	800083c <__aeabi_ddiv>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fc ff0e 	bl	8000b5c <__aeabi_d2f>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4a64      	ldr	r2, [pc, #400]	; (8003ed4 <RobotMoveDistIR+0x25c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d4c:	8812      	ldrh	r2, [r2, #0]
 8003d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	4b60      	ldr	r3, [pc, #384]	; (8003ed8 <RobotMoveDistIR+0x260>)
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e051      	b.n	8003e04 <RobotMoveDistIR+0x18c>
		}else{
			__ADC_Read_Dist(&hadc2, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003d60:	4b58      	ldr	r3, [pc, #352]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	e01f      	b.n	8003da8 <RobotMoveDistIR+0x130>
 8003d68:	485c      	ldr	r0, [pc, #368]	; (8003edc <RobotMoveDistIR+0x264>)
 8003d6a:	f001 fcd1 	bl	8005710 <HAL_ADC_Start>
 8003d6e:	2114      	movs	r1, #20
 8003d70:	485a      	ldr	r0, [pc, #360]	; (8003edc <RobotMoveDistIR+0x264>)
 8003d72:	f001 fd9f 	bl	80058b4 <HAL_ADC_PollForConversion>
 8003d76:	4859      	ldr	r0, [pc, #356]	; (8003edc <RobotMoveDistIR+0x264>)
 8003d78:	f001 fe27 	bl	80059ca <HAL_ADC_GetValue>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b4e      	ldr	r3, [pc, #312]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a50      	ldr	r2, [pc, #320]	; (8003ed0 <RobotMoveDistIR+0x258>)
 8003d90:	fb82 1203 	smull	r1, r2, r2, r3
 8003d94:	1151      	asrs	r1, r2, #5
 8003d96:	17da      	asrs	r2, r3, #31
 8003d98:	1a8a      	subs	r2, r1, r2
 8003d9a:	2164      	movs	r1, #100	; 0x64
 8003d9c:	fb01 f202 	mul.w	r2, r1, r2
 8003da0:	1a9a      	subs	r2, r3, r2
 8003da2:	b292      	uxth	r2, r2
 8003da4:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	2b62      	cmp	r3, #98	; 0x62
 8003dae:	d9db      	bls.n	8003d68 <RobotMoveDistIR+0xf0>
 8003db0:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a43      	ldr	r2, [pc, #268]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fb99 	bl	80004f4 <__aeabi_ui2d>
 8003dc2:	a335      	add	r3, pc, #212	; (adr r3, 8003e98 <RobotMoveDistIR+0x220>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f7fc fa56 	bl	8000278 <__aeabi_dsub>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	a133      	add	r1, pc, #204	; (adr r1, 8003ea0 <RobotMoveDistIR+0x228>)
 8003dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dd6:	f7fc fd31 	bl	800083c <__aeabi_ddiv>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4610      	mov	r0, r2
 8003de0:	4619      	mov	r1, r3
 8003de2:	f7fc febb 	bl	8000b5c <__aeabi_d2f>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a3a      	ldr	r2, [pc, #232]	; (8003ed4 <RobotMoveDistIR+0x25c>)
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <RobotMoveDistIR+0x24c>)
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <RobotMoveDistIR+0x260>)
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <RobotMoveDistIR+0x254>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
		}
//	  Distance=UD;
		uint32_t dist=obsDist_IR;
 8003e04:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <RobotMoveDistIR+0x25c>)
 8003e06:	edd3 7a00 	vldr	s15, [r3]
 8003e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e0e:	ee17 3a90 	vmov	r3, s15
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24

	  if (dist > 60 || dist == 0) break;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	2b3c      	cmp	r3, #60	; 0x3c
 8003e18:	d830      	bhi.n	8003e7c <RobotMoveDistIR+0x204>
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02d      	beq.n	8003e7c <RobotMoveDistIR+0x204>
	  float dir = 1.0;
 8003e20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e24:	60fb      	str	r3, [r7, #12]
	  __SET_MOTOR_DIRECTION(&dir);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2104      	movs	r1, #4
 8003e2a:	482d      	ldr	r0, [pc, #180]	; (8003ee0 <RobotMoveDistIR+0x268>)
 8003e2c:	f002 fdf2 	bl	8006a14 <HAL_GPIO_WritePin>
 8003e30:	2201      	movs	r2, #1
 8003e32:	2108      	movs	r1, #8
 8003e34:	482a      	ldr	r0, [pc, #168]	; (8003ee0 <RobotMoveDistIR+0x268>)
 8003e36:	f002 fded 	bl	8006a14 <HAL_GPIO_WritePin>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2120      	movs	r1, #32
 8003e3e:	4828      	ldr	r0, [pc, #160]	; (8003ee0 <RobotMoveDistIR+0x268>)
 8003e40:	f002 fde8 	bl	8006a14 <HAL_GPIO_WritePin>
 8003e44:	2201      	movs	r2, #1
 8003e46:	2110      	movs	r1, #16
 8003e48:	4825      	ldr	r0, [pc, #148]	; (8003ee0 <RobotMoveDistIR+0x268>)
 8003e4a:	f002 fde3 	bl	8006a14 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 8003e4e:	f001 fbeb 	bl	8005628 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <RobotMoveDistIR+0x248>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b13      	cmp	r3, #19
 8003e5c:	f67f af2a 	bls.w	8003cb4 <RobotMoveDistIR+0x3c>
		  speedScale = 1;
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <RobotMoveDistIR+0x26c>)
 8003e62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e66:	601a      	str	r2, [r3, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003e68:	491e      	ldr	r1, [pc, #120]	; (8003ee4 <RobotMoveDistIR+0x26c>)
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7fe fd84 	bl	8002978 <StraightLineMoveSpeedScale>
		  last_curTask_tick = HAL_GetTick();
 8003e70:	f001 fbda 	bl	8005628 <HAL_GetTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <RobotMoveDistIR+0x248>)
 8003e78:	6013      	str	r3, [r2, #0]
	do {
 8003e7a:	e71b      	b.n	8003cb4 <RobotMoveDistIR+0x3c>
	  }

	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <RobotMoveDistIR+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <RobotMoveDistIR+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e8c:	bf00      	nop
 8003e8e:	3728      	adds	r7, #40	; 0x28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	f3af 8000 	nop.w
 8003e98:	fb5723d3 	.word	0xfb5723d3
 8003e9c:	407046c5 	.word	0x407046c5
 8003ea0:	324c8366 	.word	0x324c8366
 8003ea4:	40d90b34 	.word	0x40d90b34
 8003ea8:	20000474 	.word	0x20000474
 8003eac:	2000047a 	.word	0x2000047a
 8003eb0:	20000500 	.word	0x20000500
 8003eb4:	200004ec 	.word	0x200004ec
 8003eb8:	20000514 	.word	0x20000514
 8003ebc:	20000006 	.word	0x20000006
 8003ec0:	20000480 	.word	0x20000480
 8003ec4:	20000550 	.word	0x20000550
 8003ec8:	20000088 	.word	0x20000088
 8003ecc:	20000554 	.word	0x20000554
 8003ed0:	51eb851f 	.word	0x51eb851f
 8003ed4:	2000054c 	.word	0x2000054c
 8003ed8:	2000054a 	.word	0x2000054a
 8003edc:	200000d0 	.word	0x200000d0
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	200003dc 	.word	0x200003dc
 8003eec:	00000000 	.word	0x00000000

08003ef0 <RobotMoveDistIR2>:

void RobotMoveDistIR2(const uint8_t speedMode, int isRight) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
	angleNow = 0; gyroZ = 0;
 8003efc:	4b88      	ldr	r3, [pc, #544]	; (8004120 <RobotMoveDistIR2+0x230>)
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	4b87      	ldr	r3, [pc, #540]	; (8004124 <RobotMoveDistIR2+0x234>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	801a      	strh	r2, [r3, #0]
	PIDConfigReset(&pidTSlow);
 8003f0a:	4887      	ldr	r0, [pc, #540]	; (8004128 <RobotMoveDistIR2+0x238>)
 8003f0c:	f7fe fb75 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidSlow);
 8003f10:	4886      	ldr	r0, [pc, #536]	; (800412c <RobotMoveDistIR2+0x23c>)
 8003f12:	f7fe fb72 	bl	80025fa <PIDConfigReset>
	PIDConfigReset(&pidFast);
 8003f16:	4886      	ldr	r0, [pc, #536]	; (8004130 <RobotMoveDistIR2+0x240>)
 8003f18:	f7fe fb6f 	bl	80025fa <PIDConfigReset>
	Distance = 1000;
 8003f1c:	4b85      	ldr	r3, [pc, #532]	; (8004134 <RobotMoveDistIR2+0x244>)
 8003f1e:	22e8      	movs	r2, #232	; 0xe8
 8003f20:	701a      	strb	r2, [r3, #0]
//	uint8_t dist[20];
//	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
	last_curTask_tick = HAL_GetTick();
 8003f22:	f001 fb81 	bl	8005628 <HAL_GetTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a83      	ldr	r2, [pc, #524]	; (8004138 <RobotMoveDistIR2+0x248>)
 8003f2a:	6013      	str	r3, [r2, #0]

	do {
		if (isRight){
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d052      	beq.n	8003fd8 <RobotMoveDistIR2+0xe8>
			__ADC_Read_Dist(&hadc1, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003f32:	4b82      	ldr	r3, [pc, #520]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	e01f      	b.n	8003f7a <RobotMoveDistIR2+0x8a>
 8003f3a:	4881      	ldr	r0, [pc, #516]	; (8004140 <RobotMoveDistIR2+0x250>)
 8003f3c:	f001 fbe8 	bl	8005710 <HAL_ADC_Start>
 8003f40:	2114      	movs	r1, #20
 8003f42:	487f      	ldr	r0, [pc, #508]	; (8004140 <RobotMoveDistIR2+0x250>)
 8003f44:	f001 fcb6 	bl	80058b4 <HAL_ADC_PollForConversion>
 8003f48:	487d      	ldr	r0, [pc, #500]	; (8004140 <RobotMoveDistIR2+0x250>)
 8003f4a:	f001 fd3e 	bl	80059ca <HAL_ADC_GetValue>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b7c      	ldr	r3, [pc, #496]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	4a7b      	ldr	r2, [pc, #492]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a79      	ldr	r2, [pc, #484]	; (8004148 <RobotMoveDistIR2+0x258>)
 8003f62:	fb82 1203 	smull	r1, r2, r2, r3
 8003f66:	1151      	asrs	r1, r2, #5
 8003f68:	17da      	asrs	r2, r3, #31
 8003f6a:	1a8a      	subs	r2, r1, r2
 8003f6c:	2164      	movs	r1, #100	; 0x64
 8003f6e:	fb01 f202 	mul.w	r2, r1, r2
 8003f72:	1a9a      	subs	r2, r3, r2
 8003f74:	b292      	uxth	r2, r2
 8003f76:	4b71      	ldr	r3, [pc, #452]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	4b70      	ldr	r3, [pc, #448]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	2b62      	cmp	r3, #98	; 0x62
 8003f80:	d9db      	bls.n	8003f3a <RobotMoveDistIR2+0x4a>
 8003f82:	4b70      	ldr	r3, [pc, #448]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6d      	ldr	r2, [pc, #436]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc fab0 	bl	80004f4 <__aeabi_ui2d>
 8003f94:	a35e      	add	r3, pc, #376	; (adr r3, 8004110 <RobotMoveDistIR2+0x220>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc f96d 	bl	8000278 <__aeabi_dsub>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	a15d      	add	r1, pc, #372	; (adr r1, 8004118 <RobotMoveDistIR2+0x228>)
 8003fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa8:	f7fc fc48 	bl	800083c <__aeabi_ddiv>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fdd2 	bl	8000b5c <__aeabi_d2f>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4a64      	ldr	r2, [pc, #400]	; (800414c <RobotMoveDistIR2+0x25c>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b61      	ldr	r3, [pc, #388]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5e      	ldr	r2, [pc, #376]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003fc4:	8812      	ldrh	r2, [r2, #0]
 8003fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	4b60      	ldr	r3, [pc, #384]	; (8004150 <RobotMoveDistIR2+0x260>)
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e051      	b.n	800407c <RobotMoveDistIR2+0x18c>
		}else{
			__ADC_Read_Dist(&hadc2, dataPoint, IR_data_raw_acc, obsDist_IR, obsTick_IR);
 8003fd8:	4b58      	ldr	r3, [pc, #352]	; (800413c <RobotMoveDistIR2+0x24c>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e01f      	b.n	8004020 <RobotMoveDistIR2+0x130>
 8003fe0:	485c      	ldr	r0, [pc, #368]	; (8004154 <RobotMoveDistIR2+0x264>)
 8003fe2:	f001 fb95 	bl	8005710 <HAL_ADC_Start>
 8003fe6:	2114      	movs	r1, #20
 8003fe8:	485a      	ldr	r0, [pc, #360]	; (8004154 <RobotMoveDistIR2+0x264>)
 8003fea:	f001 fc63 	bl	80058b4 <HAL_ADC_PollForConversion>
 8003fee:	4859      	ldr	r0, [pc, #356]	; (8004154 <RobotMoveDistIR2+0x264>)
 8003ff0:	f001 fceb 	bl	80059ca <HAL_ADC_GetValue>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a51      	ldr	r2, [pc, #324]	; (8004144 <RobotMoveDistIR2+0x254>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b4e      	ldr	r3, [pc, #312]	; (800413c <RobotMoveDistIR2+0x24c>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	4a50      	ldr	r2, [pc, #320]	; (8004148 <RobotMoveDistIR2+0x258>)
 8004008:	fb82 1203 	smull	r1, r2, r2, r3
 800400c:	1151      	asrs	r1, r2, #5
 800400e:	17da      	asrs	r2, r3, #31
 8004010:	1a8a      	subs	r2, r1, r2
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f202 	mul.w	r2, r1, r2
 8004018:	1a9a      	subs	r2, r3, r2
 800401a:	b292      	uxth	r2, r2
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <RobotMoveDistIR2+0x24c>)
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	4b46      	ldr	r3, [pc, #280]	; (800413c <RobotMoveDistIR2+0x24c>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	2b62      	cmp	r3, #98	; 0x62
 8004026:	d9db      	bls.n	8003fe0 <RobotMoveDistIR2+0xf0>
 8004028:	4b46      	ldr	r3, [pc, #280]	; (8004144 <RobotMoveDistIR2+0x254>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a43      	ldr	r2, [pc, #268]	; (800413c <RobotMoveDistIR2+0x24c>)
 800402e:	8812      	ldrh	r2, [r2, #0]
 8004030:	fbb3 f3f2 	udiv	r3, r3, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fa5d 	bl	80004f4 <__aeabi_ui2d>
 800403a:	a335      	add	r3, pc, #212	; (adr r3, 8004110 <RobotMoveDistIR2+0x220>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f7fc f91a 	bl	8000278 <__aeabi_dsub>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	a133      	add	r1, pc, #204	; (adr r1, 8004118 <RobotMoveDistIR2+0x228>)
 800404a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800404e:	f7fc fbf5 	bl	800083c <__aeabi_ddiv>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	f7fc fd7f 	bl	8000b5c <__aeabi_d2f>
 800405e:	4603      	mov	r3, r0
 8004060:	4a3a      	ldr	r2, [pc, #232]	; (800414c <RobotMoveDistIR2+0x25c>)
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <RobotMoveDistIR2+0x254>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a34      	ldr	r2, [pc, #208]	; (800413c <RobotMoveDistIR2+0x24c>)
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004070:	b29a      	uxth	r2, r3
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <RobotMoveDistIR2+0x260>)
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	4b33      	ldr	r3, [pc, #204]	; (8004144 <RobotMoveDistIR2+0x254>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
		}
//	  Distance=UD;
		uint32_t dist=obsDist_IR;
 800407c:	4b33      	ldr	r3, [pc, #204]	; (800414c <RobotMoveDistIR2+0x25c>)
 800407e:	edd3 7a00 	vldr	s15, [r3]
 8004082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004086:	ee17 3a90 	vmov	r3, s15
 800408a:	60fb      	str	r3, [r7, #12]
	  if (dist < 70 && dist > 10) break;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b45      	cmp	r3, #69	; 0x45
 8004090:	d80b      	bhi.n	80040aa <RobotMoveDistIR2+0x1ba>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b0a      	cmp	r3, #10
 8004096:	d908      	bls.n	80040aa <RobotMoveDistIR2+0x1ba>
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
		  last_curTask_tick = HAL_GetTick();
	  }
	} while (1);

	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8004098:	4b2f      	ldr	r3, [pc, #188]	; (8004158 <RobotMoveDistIR2+0x268>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2200      	movs	r2, #0
 800409e:	635a      	str	r2, [r3, #52]	; 0x34
 80040a0:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <RobotMoveDistIR2+0x268>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80040a8:	e02d      	b.n	8004106 <RobotMoveDistIR2+0x216>
	  float dir = 1.0;
 80040aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040ae:	60bb      	str	r3, [r7, #8]
	  __SET_MOTOR_DIRECTION(&dir);
 80040b0:	2200      	movs	r2, #0
 80040b2:	2104      	movs	r1, #4
 80040b4:	4829      	ldr	r0, [pc, #164]	; (800415c <RobotMoveDistIR2+0x26c>)
 80040b6:	f002 fcad 	bl	8006a14 <HAL_GPIO_WritePin>
 80040ba:	2201      	movs	r2, #1
 80040bc:	2108      	movs	r1, #8
 80040be:	4827      	ldr	r0, [pc, #156]	; (800415c <RobotMoveDistIR2+0x26c>)
 80040c0:	f002 fca8 	bl	8006a14 <HAL_GPIO_WritePin>
 80040c4:	2200      	movs	r2, #0
 80040c6:	2120      	movs	r1, #32
 80040c8:	4824      	ldr	r0, [pc, #144]	; (800415c <RobotMoveDistIR2+0x26c>)
 80040ca:	f002 fca3 	bl	8006a14 <HAL_GPIO_WritePin>
 80040ce:	2201      	movs	r2, #1
 80040d0:	2110      	movs	r1, #16
 80040d2:	4822      	ldr	r0, [pc, #136]	; (800415c <RobotMoveDistIR2+0x26c>)
 80040d4:	f002 fc9e 	bl	8006a14 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() - last_curTask_tick >=20) {
 80040d8:	f001 faa6 	bl	8005628 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <RobotMoveDistIR2+0x248>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b13      	cmp	r3, #19
 80040e6:	f67f af21 	bls.w	8003f2c <RobotMoveDistIR2+0x3c>
		  speedScale = 1;
 80040ea:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <RobotMoveDistIR2+0x270>)
 80040ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040f0:	601a      	str	r2, [r3, #0]
		  StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80040f2:	491b      	ldr	r1, [pc, #108]	; (8004160 <RobotMoveDistIR2+0x270>)
 80040f4:	2002      	movs	r0, #2
 80040f6:	f7fe fc3f 	bl	8002978 <StraightLineMoveSpeedScale>
		  last_curTask_tick = HAL_GetTick();
 80040fa:	f001 fa95 	bl	8005628 <HAL_GetTick>
 80040fe:	4603      	mov	r3, r0
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <RobotMoveDistIR2+0x248>)
 8004102:	6013      	str	r3, [r2, #0]
	do {
 8004104:	e712      	b.n	8003f2c <RobotMoveDistIR2+0x3c>
}
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	f3af 8000 	nop.w
 8004110:	fb5723d3 	.word	0xfb5723d3
 8004114:	407046c5 	.word	0x407046c5
 8004118:	324c8366 	.word	0x324c8366
 800411c:	40d90b34 	.word	0x40d90b34
 8004120:	20000474 	.word	0x20000474
 8004124:	2000047a 	.word	0x2000047a
 8004128:	20000500 	.word	0x20000500
 800412c:	200004ec 	.word	0x200004ec
 8004130:	20000514 	.word	0x20000514
 8004134:	20000006 	.word	0x20000006
 8004138:	20000480 	.word	0x20000480
 800413c:	20000550 	.word	0x20000550
 8004140:	20000088 	.word	0x20000088
 8004144:	20000554 	.word	0x20000554
 8004148:	51eb851f 	.word	0x51eb851f
 800414c:	2000054c 	.word	0x2000054c
 8004150:	2000054a 	.word	0x2000054a
 8004154:	200000d0 	.word	0x200000d0
 8004158:	200003dc 	.word	0x200003dc
 800415c:	40020000 	.word	0x40020000
 8004160:	20000000 	.word	0x20000000
 8004164:	00000000 	.word	0x00000000

08004168 <RobotTurn>:


void RobotTurn(float * targetAngle) {
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af04      	add	r7, sp, #16
 800416e:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 8004170:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <RobotTurn+0x138>)
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <RobotTurn+0x13c>)
 800417a:	2200      	movs	r2, #0
 800417c:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 800417e:	f001 fa53 	bl	8005628 <HAL_GetTick>
 8004182:	4603      	mov	r3, r0
 8004184:	4a48      	ldr	r2, [pc, #288]	; (80042a8 <RobotTurn+0x140>)
 8004186:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 8004188:	f001 fa4e 	bl	8005628 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	4b46      	ldr	r3, [pc, #280]	; (80042a8 <RobotTurn+0x140>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b09      	cmp	r3, #9
 8004196:	d9f7      	bls.n	8004188 <RobotTurn+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8004198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800419c:	9302      	str	r3, [sp, #8]
 800419e:	2302      	movs	r3, #2
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	4b42      	ldr	r3, [pc, #264]	; (80042ac <RobotTurn+0x144>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2301      	movs	r3, #1
 80041a8:	2237      	movs	r2, #55	; 0x37
 80041aa:	21d0      	movs	r1, #208	; 0xd0
 80041ac:	4840      	ldr	r0, [pc, #256]	; (80042b0 <RobotTurn+0x148>)
 80041ae:	f002 fe89 	bl	8006ec4 <HAL_I2C_Mem_Read>
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <RobotTurn+0x144>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <RobotTurn+0x144>)
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	b21b      	sxth	r3, r3
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b21a      	sxth	r2, r3
 80041c4:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <RobotTurn+0x13c>)
 80041c6:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ * 0.01 / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS ;
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <RobotTurn+0x138>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f9b3 	bl	8000538 <__aeabi_f2d>
 80041d2:	4604      	mov	r4, r0
 80041d4:	460d      	mov	r5, r1
 80041d6:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <RobotTurn+0x13c>)
 80041d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f999 	bl	8000514 <__aeabi_i2d>
 80041e2:	a32b      	add	r3, pc, #172	; (adr r3, 8004290 <RobotTurn+0x128>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f7fc f9fe 	bl	80005e8 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	a328      	add	r3, pc, #160	; (adr r3, 8004298 <RobotTurn+0x130>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fc fb1f 	bl	800083c <__aeabi_ddiv>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	f7fc f839 	bl	800027c <__adddf3>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	f7fc fca3 	bl	8000b5c <__aeabi_d2f>
 8004216:	4603      	mov	r3, r0
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <RobotTurn+0x138>)
 800421a:	6013      	str	r3, [r2, #0]
//		  angleNow += gyroZ;

		  //OLED_ShowNumber(10,20,gyroZ,10,12);
		  if (abs(angleNow - *targetAngle) < 0.01) {
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <RobotTurn+0x138>)
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800422c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004230:	ee17 3a90 	vmov	r3, s15
 8004234:	2b00      	cmp	r3, #0
 8004236:	db0d      	blt.n	8004254 <RobotTurn+0xec>
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <RobotTurn+0x138>)
 800423a:	ed93 7a00 	vldr	s14, [r3]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	edd3 7a00 	vldr	s15, [r3]
 8004244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424c:	ee17 3a90 	vmov	r3, s15
 8004250:	2b00      	cmp	r3, #0
 8004252:	dd05      	ble.n	8004260 <RobotTurn+0xf8>
			  //OLED_ShowNumber(10,10,(int)angleNow,10,12);
			  //OLED_ShowNumber(10,20,(int)(*targetAngle),10,12);
			  break;

		  }
		  last_curTask_tick = HAL_GetTick();
 8004254:	f001 f9e8 	bl	8005628 <HAL_GetTick>
 8004258:	4603      	mov	r3, r0
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <RobotTurn+0x140>)
 800425c:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 800425e:	e793      	b.n	8004188 <RobotTurn+0x20>
			  break;
 8004260:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <RobotTurn+0x14c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <RobotTurn+0x14c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
	__RESET_SERVO_TURN(&htim1);
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <RobotTurn+0x150>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2296      	movs	r2, #150	; 0x96
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
 800427a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800427e:	f001 f9df 	bl	8005640 <HAL_Delay>
//	osDelay(200);
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bdb0      	pop	{r4, r5, r7, pc}
 800428a:	bf00      	nop
 800428c:	f3af 8000 	nop.w
 8004290:	47ae147b 	.word	0x47ae147b
 8004294:	3f847ae1 	.word	0x3f847ae1
 8004298:	66666666 	.word	0x66666666
 800429c:	40306666 	.word	0x40306666
 80042a0:	20000474 	.word	0x20000474
 80042a4:	2000047a 	.word	0x2000047a
 80042a8:	20000480 	.word	0x20000480
 80042ac:	20000478 	.word	0x20000478
 80042b0:	200001d8 	.word	0x200001d8
 80042b4:	200003dc 	.word	0x200003dc
 80042b8:	2000022c 	.word	0x2000022c
 80042bc:	00000000 	.word	0x00000000

080042c0 <RobotTurnWithoutReset>:

void RobotTurnWithoutReset(float * targetAngle) {
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	6078      	str	r0, [r7, #4]
	angleNow = 0; gyroZ = 0;
 80042c8:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <RobotTurnWithoutReset+0x128>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	4b46      	ldr	r3, [pc, #280]	; (80043ec <RobotTurnWithoutReset+0x12c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]
	last_curTask_tick = HAL_GetTick();
 80042d6:	f001 f9a7 	bl	8005628 <HAL_GetTick>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a44      	ldr	r2, [pc, #272]	; (80043f0 <RobotTurnWithoutReset+0x130>)
 80042de:	6013      	str	r3, [r2, #0]
	do {
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80042e0:	f001 f9a2 	bl	8005628 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <RobotTurnWithoutReset+0x130>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b09      	cmp	r3, #9
 80042ee:	d9f7      	bls.n	80042e0 <RobotTurnWithoutReset+0x20>
		  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80042f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	2302      	movs	r3, #2
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <RobotTurnWithoutReset+0x134>)
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2301      	movs	r3, #1
 8004300:	2237      	movs	r2, #55	; 0x37
 8004302:	21d0      	movs	r1, #208	; 0xd0
 8004304:	483c      	ldr	r0, [pc, #240]	; (80043f8 <RobotTurnWithoutReset+0x138>)
 8004306:	f002 fddd 	bl	8006ec4 <HAL_I2C_Mem_Read>
 800430a:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <RobotTurnWithoutReset+0x134>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	b21a      	sxth	r2, r3
 8004312:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <RobotTurnWithoutReset+0x134>)
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	b21b      	sxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b21a      	sxth	r2, r3
 800431c:	4b33      	ldr	r3, [pc, #204]	; (80043ec <RobotTurnWithoutReset+0x12c>)
 800431e:	801a      	strh	r2, [r3, #0]
		  angleNow += gyroZ * 0.01 / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS ;
 8004320:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <RobotTurnWithoutReset+0x128>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f907 	bl	8000538 <__aeabi_f2d>
 800432a:	4604      	mov	r4, r0
 800432c:	460d      	mov	r5, r1
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <RobotTurnWithoutReset+0x12c>)
 8004330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc f8ed 	bl	8000514 <__aeabi_i2d>
 800433a:	a327      	add	r3, pc, #156	; (adr r3, 80043d8 <RobotTurnWithoutReset+0x118>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc f952 	bl	80005e8 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	a324      	add	r3, pc, #144	; (adr r3, 80043e0 <RobotTurnWithoutReset+0x120>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fc fa73 	bl	800083c <__aeabi_ddiv>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fb ff8d 	bl	800027c <__adddf3>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	f7fc fbf7 	bl	8000b5c <__aeabi_d2f>
 800436e:	4603      	mov	r3, r0
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <RobotTurnWithoutReset+0x128>)
 8004372:	6013      	str	r3, [r2, #0]
//		  angleNow += gyroZ;

		  //OLED_ShowNumber(10,20,gyroZ,10,12);
		  if (abs(angleNow - *targetAngle) < 0.01) {
 8004374:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <RobotTurnWithoutReset+0x128>)
 8004376:	ed93 7a00 	vldr	s14, [r3]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004388:	ee17 3a90 	vmov	r3, s15
 800438c:	2b00      	cmp	r3, #0
 800438e:	db0d      	blt.n	80043ac <RobotTurnWithoutReset+0xec>
 8004390:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <RobotTurnWithoutReset+0x128>)
 8004392:	ed93 7a00 	vldr	s14, [r3]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a4:	ee17 3a90 	vmov	r3, s15
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	dd05      	ble.n	80043b8 <RobotTurnWithoutReset+0xf8>
			  //OLED_ShowNumber(10,10,(int)angleNow,10,12);
			  //OLED_ShowNumber(10,20,(int)(*targetAngle),10,12);
			  break;

		  }
		  last_curTask_tick = HAL_GetTick();
 80043ac:	f001 f93c 	bl	8005628 <HAL_GetTick>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <RobotTurnWithoutReset+0x130>)
 80043b4:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - last_curTask_tick >= 10) { // sample gyro every 10ms
 80043b6:	e793      	b.n	80042e0 <RobotTurnWithoutReset+0x20>
			  break;
 80043b8:	bf00      	nop
	  }
	} while(1);
	__SET_MOTOR_DUTY(&htim8, 0, 0);
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <RobotTurnWithoutReset+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <RobotTurnWithoutReset+0x13c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bdb0      	pop	{r4, r5, r7, pc}
 80043d2:	bf00      	nop
 80043d4:	f3af 8000 	nop.w
 80043d8:	47ae147b 	.word	0x47ae147b
 80043dc:	3f847ae1 	.word	0x3f847ae1
 80043e0:	66666666 	.word	0x66666666
 80043e4:	40306666 	.word	0x40306666
 80043e8:	20000474 	.word	0x20000474
 80043ec:	2000047a 	.word	0x2000047a
 80043f0:	20000480 	.word	0x20000480
 80043f4:	20000478 	.word	0x20000478
 80043f8:	200001d8 	.word	0x200001d8
 80043fc:	200003dc 	.word	0x200003dc

08004400 <FASTESTPATH_TURN_LEFT_90>:
//	__SET_MOTOR_DIRECTION(1);
//	__SET_MOTOR_DUTY(&htim8, 3000, 800);
//	RobotTurn(&targetAngle);
//}

void FASTESTPATH_TURN_LEFT_90() {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	// 3 bars
//	targetAngle = 75;
	// 2 bars
	targetAngle = 78;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <FASTESTPATH_TURN_LEFT_90+0x60>)
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <FASTESTPATH_TURN_LEFT_90+0x64>)
 8004408:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 80);
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <FASTESTPATH_TURN_LEFT_90+0x68>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2250      	movs	r2, #80	; 0x50
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
 8004412:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004416:	f001 f913 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800441a:	2200      	movs	r2, #0
 800441c:	2104      	movs	r1, #4
 800441e:	4813      	ldr	r0, [pc, #76]	; (800446c <FASTESTPATH_TURN_LEFT_90+0x6c>)
 8004420:	f002 faf8 	bl	8006a14 <HAL_GPIO_WritePin>
 8004424:	2201      	movs	r2, #1
 8004426:	2108      	movs	r1, #8
 8004428:	4810      	ldr	r0, [pc, #64]	; (800446c <FASTESTPATH_TURN_LEFT_90+0x6c>)
 800442a:	f002 faf3 	bl	8006a14 <HAL_GPIO_WritePin>
 800442e:	2200      	movs	r2, #0
 8004430:	2120      	movs	r1, #32
 8004432:	480e      	ldr	r0, [pc, #56]	; (800446c <FASTESTPATH_TURN_LEFT_90+0x6c>)
 8004434:	f002 faee 	bl	8006a14 <HAL_GPIO_WritePin>
 8004438:	2201      	movs	r2, #1
 800443a:	2110      	movs	r1, #16
 800443c:	480b      	ldr	r0, [pc, #44]	; (800446c <FASTESTPATH_TURN_LEFT_90+0x6c>)
 800443e:	f002 fae9 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 800, 5500);
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <FASTESTPATH_TURN_LEFT_90+0x70>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f44f 7248 	mov.w	r2, #800	; 0x320
 800444a:	635a      	str	r2, [r3, #52]	; 0x34
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <FASTESTPATH_TURN_LEFT_90+0x70>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f241 527c 	movw	r2, #5500	; 0x157c
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurn(&targetAngle);
 8004456:	4802      	ldr	r0, [pc, #8]	; (8004460 <FASTESTPATH_TURN_LEFT_90+0x60>)
 8004458:	f7ff fe86 	bl	8004168 <RobotTurn>
}
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000470 	.word	0x20000470
 8004464:	429c0000 	.word	0x429c0000
 8004468:	2000022c 	.word	0x2000022c
 800446c:	40020000 	.word	0x40020000
 8004470:	200003dc 	.word	0x200003dc

08004474 <FASTESTPATH_TURN_RIGHT_90>:

void FASTESTPATH_TURN_RIGHT_90() {
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	//3 bars
//	targetAngle = -77;
	// 2 bars
	targetAngle = -80;
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <FASTESTPATH_TURN_RIGHT_90+0x80>)
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <FASTESTPATH_TURN_RIGHT_90+0x84>)
 800447c:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 230);
 800447e:	4b1f      	ldr	r3, [pc, #124]	; (80044fc <FASTESTPATH_TURN_RIGHT_90+0x88>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	22e6      	movs	r2, #230	; 0xe6
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
 8004486:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800448a:	f001 f8d9 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800448e:	2200      	movs	r2, #0
 8004490:	2104      	movs	r1, #4
 8004492:	481b      	ldr	r0, [pc, #108]	; (8004500 <FASTESTPATH_TURN_RIGHT_90+0x8c>)
 8004494:	f002 fabe 	bl	8006a14 <HAL_GPIO_WritePin>
 8004498:	2201      	movs	r2, #1
 800449a:	2108      	movs	r1, #8
 800449c:	4818      	ldr	r0, [pc, #96]	; (8004500 <FASTESTPATH_TURN_RIGHT_90+0x8c>)
 800449e:	f002 fab9 	bl	8006a14 <HAL_GPIO_WritePin>
 80044a2:	2200      	movs	r2, #0
 80044a4:	2120      	movs	r1, #32
 80044a6:	4816      	ldr	r0, [pc, #88]	; (8004500 <FASTESTPATH_TURN_RIGHT_90+0x8c>)
 80044a8:	f002 fab4 	bl	8006a14 <HAL_GPIO_WritePin>
 80044ac:	2201      	movs	r2, #1
 80044ae:	2110      	movs	r1, #16
 80044b0:	4813      	ldr	r0, [pc, #76]	; (8004500 <FASTESTPATH_TURN_RIGHT_90+0x8c>)
 80044b2:	f002 faaf 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 5500, 800);
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <FASTESTPATH_TURN_RIGHT_90+0x90>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f241 527c 	movw	r2, #5500	; 0x157c
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <FASTESTPATH_TURN_RIGHT_90+0x90>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 80044ca:	480a      	ldr	r0, [pc, #40]	; (80044f4 <FASTESTPATH_TURN_RIGHT_90+0x80>)
 80044cc:	f7ff fef8 	bl	80042c0 <RobotTurnWithoutReset>
	htim1.Instance->CCR4=120;
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <FASTESTPATH_TURN_RIGHT_90+0x88>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2278      	movs	r2, #120	; 0x78
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(500);
 80044d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044dc:	f006 fe60 	bl	800b1a0 <osDelay>
	__RESET_SERVO_TURN(&htim1);
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <FASTESTPATH_TURN_RIGHT_90+0x88>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2296      	movs	r2, #150	; 0x96
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
 80044e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044ec:	f001 f8a8 	bl	8005640 <HAL_Delay>
}
 80044f0:	bf00      	nop
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000470 	.word	0x20000470
 80044f8:	c2a00000 	.word	0xc2a00000
 80044fc:	2000022c 	.word	0x2000022c
 8004500:	40020000 	.word	0x40020000
 8004504:	200003dc 	.word	0x200003dc

08004508 <FASTESTPATH_TURN_LEFT_180>:
//	__SET_MOTOR_DUTY(&htim8, 1000, 4500);
//	RobotTurnWithoutReset(&targetAngle);
//	__RESET_SERVO_TURN(&htim1);
//}

void FASTESTPATH_TURN_LEFT_180() {
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	targetAngle = 50;
 800450c:	4b47      	ldr	r3, [pc, #284]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 800450e:	4a48      	ldr	r2, [pc, #288]	; (8004630 <FASTESTPATH_TURN_LEFT_180+0x128>)
 8004510:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 110);
 8004512:	4b48      	ldr	r3, [pc, #288]	; (8004634 <FASTESTPATH_TURN_LEFT_180+0x12c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	226e      	movs	r2, #110	; 0x6e
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
 800451a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800451e:	f001 f88f 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 8004522:	2200      	movs	r2, #0
 8004524:	2104      	movs	r1, #4
 8004526:	4844      	ldr	r0, [pc, #272]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 8004528:	f002 fa74 	bl	8006a14 <HAL_GPIO_WritePin>
 800452c:	2201      	movs	r2, #1
 800452e:	2108      	movs	r1, #8
 8004530:	4841      	ldr	r0, [pc, #260]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 8004532:	f002 fa6f 	bl	8006a14 <HAL_GPIO_WritePin>
 8004536:	2200      	movs	r2, #0
 8004538:	2120      	movs	r1, #32
 800453a:	483f      	ldr	r0, [pc, #252]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 800453c:	f002 fa6a 	bl	8006a14 <HAL_GPIO_WritePin>
 8004540:	2201      	movs	r2, #1
 8004542:	2110      	movs	r1, #16
 8004544:	483c      	ldr	r0, [pc, #240]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 8004546:	f002 fa65 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 1000, 4500);
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004552:	635a      	str	r2, [r3, #52]	; 0x34
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f241 1294 	movw	r2, #4500	; 0x1194
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 800455e:	4833      	ldr	r0, [pc, #204]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 8004560:	f7ff feae 	bl	80042c0 <RobotTurnWithoutReset>
	scan();
 8004564:	f000 f916 	bl	8004794 <scan>
	targetAngle = -105;
 8004568:	4b30      	ldr	r3, [pc, #192]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 800456a:	4a35      	ldr	r2, [pc, #212]	; (8004640 <FASTESTPATH_TURN_LEFT_180+0x138>)
 800456c:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 200);
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <FASTESTPATH_TURN_LEFT_180+0x12c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	22c8      	movs	r2, #200	; 0xc8
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
 8004576:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800457a:	f001 f861 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800457e:	2200      	movs	r2, #0
 8004580:	2104      	movs	r1, #4
 8004582:	482d      	ldr	r0, [pc, #180]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 8004584:	f002 fa46 	bl	8006a14 <HAL_GPIO_WritePin>
 8004588:	2201      	movs	r2, #1
 800458a:	2108      	movs	r1, #8
 800458c:	482a      	ldr	r0, [pc, #168]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 800458e:	f002 fa41 	bl	8006a14 <HAL_GPIO_WritePin>
 8004592:	2200      	movs	r2, #0
 8004594:	2120      	movs	r1, #32
 8004596:	4828      	ldr	r0, [pc, #160]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 8004598:	f002 fa3c 	bl	8006a14 <HAL_GPIO_WritePin>
 800459c:	2201      	movs	r2, #1
 800459e:	2110      	movs	r1, #16
 80045a0:	4825      	ldr	r0, [pc, #148]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 80045a2:	f002 fa37 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 4500, 800);
 80045a6:	4b25      	ldr	r3, [pc, #148]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f241 1294 	movw	r2, #4500	; 0x1194
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 80045ba:	481c      	ldr	r0, [pc, #112]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 80045bc:	f7ff fe80 	bl	80042c0 <RobotTurnWithoutReset>
	targetAngle = 50;
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <FASTESTPATH_TURN_LEFT_180+0x128>)
 80045c4:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 110);
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <FASTESTPATH_TURN_LEFT_180+0x12c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	226e      	movs	r2, #110	; 0x6e
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
 80045ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80045d2:	f001 f835 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2104      	movs	r1, #4
 80045da:	4817      	ldr	r0, [pc, #92]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 80045dc:	f002 fa1a 	bl	8006a14 <HAL_GPIO_WritePin>
 80045e0:	2201      	movs	r2, #1
 80045e2:	2108      	movs	r1, #8
 80045e4:	4814      	ldr	r0, [pc, #80]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 80045e6:	f002 fa15 	bl	8006a14 <HAL_GPIO_WritePin>
 80045ea:	2200      	movs	r2, #0
 80045ec:	2120      	movs	r1, #32
 80045ee:	4812      	ldr	r0, [pc, #72]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 80045f0:	f002 fa10 	bl	8006a14 <HAL_GPIO_WritePin>
 80045f4:	2201      	movs	r2, #1
 80045f6:	2110      	movs	r1, #16
 80045f8:	480f      	ldr	r0, [pc, #60]	; (8004638 <FASTESTPATH_TURN_LEFT_180+0x130>)
 80045fa:	f002 fa0b 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 1000, 4500);
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004606:	635a      	str	r2, [r3, #52]	; 0x34
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <FASTESTPATH_TURN_LEFT_180+0x134>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f241 1294 	movw	r2, #4500	; 0x1194
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 8004612:	4806      	ldr	r0, [pc, #24]	; (800462c <FASTESTPATH_TURN_LEFT_180+0x124>)
 8004614:	f7ff fe54 	bl	80042c0 <RobotTurnWithoutReset>
	__RESET_SERVO_TURN(&htim1);
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <FASTESTPATH_TURN_LEFT_180+0x12c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2296      	movs	r2, #150	; 0x96
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
 8004620:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004624:	f001 f80c 	bl	8005640 <HAL_Delay>
}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000470 	.word	0x20000470
 8004630:	42480000 	.word	0x42480000
 8004634:	2000022c 	.word	0x2000022c
 8004638:	40020000 	.word	0x40020000
 800463c:	200003dc 	.word	0x200003dc
 8004640:	c2d20000 	.word	0xc2d20000

08004644 <FASTESTPATH_TURN_RIGHT_180>:

void FASTESTPATH_TURN_RIGHT_180() {
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	targetAngle = -45;
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 800464a:	4a4c      	ldr	r2, [pc, #304]	; (800477c <FASTESTPATH_TURN_RIGHT_180+0x138>)
 800464c:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 200);
 800464e:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <FASTESTPATH_TURN_RIGHT_180+0x13c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	22c8      	movs	r2, #200	; 0xc8
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
 8004656:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800465a:	f000 fff1 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 800465e:	2200      	movs	r2, #0
 8004660:	2104      	movs	r1, #4
 8004662:	4848      	ldr	r0, [pc, #288]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004664:	f002 f9d6 	bl	8006a14 <HAL_GPIO_WritePin>
 8004668:	2201      	movs	r2, #1
 800466a:	2108      	movs	r1, #8
 800466c:	4845      	ldr	r0, [pc, #276]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 800466e:	f002 f9d1 	bl	8006a14 <HAL_GPIO_WritePin>
 8004672:	2200      	movs	r2, #0
 8004674:	2120      	movs	r1, #32
 8004676:	4843      	ldr	r0, [pc, #268]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004678:	f002 f9cc 	bl	8006a14 <HAL_GPIO_WritePin>
 800467c:	2201      	movs	r2, #1
 800467e:	2110      	movs	r1, #16
 8004680:	4840      	ldr	r0, [pc, #256]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004682:	f002 f9c7 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 8004686:	4b40      	ldr	r3, [pc, #256]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800468e:	635a      	str	r2, [r3, #52]	; 0x34
 8004690:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 800469a:	4837      	ldr	r0, [pc, #220]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 800469c:	f7ff fe10 	bl	80042c0 <RobotTurnWithoutReset>
	scan();
 80046a0:	f000 f878 	bl	8004794 <scan>
	targetAngle = 87;
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 80046a6:	4a39      	ldr	r2, [pc, #228]	; (800478c <FASTESTPATH_TURN_RIGHT_180+0x148>)
 80046a8:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 110);
 80046aa:	4b35      	ldr	r3, [pc, #212]	; (8004780 <FASTESTPATH_TURN_RIGHT_180+0x13c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	226e      	movs	r2, #110	; 0x6e
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
 80046b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80046b6:	f000 ffc3 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2104      	movs	r1, #4
 80046be:	4831      	ldr	r0, [pc, #196]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 80046c0:	f002 f9a8 	bl	8006a14 <HAL_GPIO_WritePin>
 80046c4:	2201      	movs	r2, #1
 80046c6:	2108      	movs	r1, #8
 80046c8:	482e      	ldr	r0, [pc, #184]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 80046ca:	f002 f9a3 	bl	8006a14 <HAL_GPIO_WritePin>
 80046ce:	2200      	movs	r2, #0
 80046d0:	2120      	movs	r1, #32
 80046d2:	482c      	ldr	r0, [pc, #176]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 80046d4:	f002 f99e 	bl	8006a14 <HAL_GPIO_WritePin>
 80046d8:	2201      	movs	r2, #1
 80046da:	2110      	movs	r1, #16
 80046dc:	4829      	ldr	r0, [pc, #164]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 80046de:	f002 f999 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 1000, 4500);
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ea:	635a      	str	r2, [r3, #52]	; 0x34
 80046ec:	4b26      	ldr	r3, [pc, #152]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f241 1294 	movw	r2, #4500	; 0x1194
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 80046f6:	4820      	ldr	r0, [pc, #128]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 80046f8:	f7ff fde2 	bl	80042c0 <RobotTurnWithoutReset>
	targetAngle = -42;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 80046fe:	4a24      	ldr	r2, [pc, #144]	; (8004790 <FASTESTPATH_TURN_RIGHT_180+0x14c>)
 8004700:	601a      	str	r2, [r3, #0]
	__SET_SERVO_TURN(&htim1, 200);
 8004702:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <FASTESTPATH_TURN_RIGHT_180+0x13c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	22c8      	movs	r2, #200	; 0xc8
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
 800470a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800470e:	f000 ff97 	bl	8005640 <HAL_Delay>
	__SET_MOTOR_DIRECTION(1);
 8004712:	2200      	movs	r2, #0
 8004714:	2104      	movs	r1, #4
 8004716:	481b      	ldr	r0, [pc, #108]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004718:	f002 f97c 	bl	8006a14 <HAL_GPIO_WritePin>
 800471c:	2201      	movs	r2, #1
 800471e:	2108      	movs	r1, #8
 8004720:	4818      	ldr	r0, [pc, #96]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004722:	f002 f977 	bl	8006a14 <HAL_GPIO_WritePin>
 8004726:	2200      	movs	r2, #0
 8004728:	2120      	movs	r1, #32
 800472a:	4816      	ldr	r0, [pc, #88]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 800472c:	f002 f972 	bl	8006a14 <HAL_GPIO_WritePin>
 8004730:	2201      	movs	r2, #1
 8004732:	2110      	movs	r1, #16
 8004734:	4813      	ldr	r0, [pc, #76]	; (8004784 <FASTESTPATH_TURN_RIGHT_180+0x140>)
 8004736:	f002 f96d 	bl	8006a14 <HAL_GPIO_WritePin>
	__SET_MOTOR_DUTY(&htim8, 3000, 800);
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004742:	635a      	str	r2, [r3, #52]	; 0x34
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <FASTESTPATH_TURN_RIGHT_180+0x144>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 7248 	mov.w	r2, #800	; 0x320
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
	RobotTurnWithoutReset(&targetAngle);
 800474e:	480a      	ldr	r0, [pc, #40]	; (8004778 <FASTESTPATH_TURN_RIGHT_180+0x134>)
 8004750:	f7ff fdb6 	bl	80042c0 <RobotTurnWithoutReset>
	htim1.Instance->CCR4=120;
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <FASTESTPATH_TURN_RIGHT_180+0x13c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2278      	movs	r2, #120	; 0x78
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(300);
 800475c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004760:	f006 fd1e 	bl	800b1a0 <osDelay>
	__RESET_SERVO_TURN(&htim1);
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <FASTESTPATH_TURN_RIGHT_180+0x13c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2296      	movs	r2, #150	; 0x96
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
 800476c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004770:	f000 ff66 	bl	8005640 <HAL_Delay>
//	osDelay(200);
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000470 	.word	0x20000470
 800477c:	c2340000 	.word	0xc2340000
 8004780:	2000022c 	.word	0x2000022c
 8004784:	40020000 	.word	0x40020000
 8004788:	200003dc 	.word	0x200003dc
 800478c:	42ae0000 	.word	0x42ae0000
 8004790:	c2280000 	.word	0xc2280000

08004794 <scan>:
		  }
	  } while (1);
	  __SET_MOTOR_DUTY(&htim8, 0, 0);
}

void scan(){
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
	char scan = 'A';
 800479a:	2341      	movs	r3, #65	; 0x41
 800479c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, (uint8_t*)&scan,1, 0xFFFF);
 800479e:	1df9      	adds	r1, r7, #7
 80047a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a4:	2201      	movs	r2, #1
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <scan+0x28>)
 80047a8:	f005 fbaf 	bl	8009f0a <HAL_UART_Transmit>
	osDelay(10);
 80047ac:	200a      	movs	r0, #10
 80047ae:	f006 fcf7 	bl	800b1a0 <osDelay>
//		char key = aRxBuffer[0];
//		if (key != ' '){
//			return key;
//		}
//	}
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000424 	.word	0x20000424

080047c0 <receiveFromBuffer>:

char receiveFromBuffer(){
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
	for (;;){
		char key = aRxBuffer[0];
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <receiveFromBuffer+0x2c>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	71fb      	strb	r3, [r7, #7]
		if (key == 'L' || key == 'R'){
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	2b4c      	cmp	r3, #76	; 0x4c
 80047d0:	d002      	beq.n	80047d8 <receiveFromBuffer+0x18>
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b52      	cmp	r3, #82	; 0x52
 80047d6:	d1f6      	bne.n	80047c6 <receiveFromBuffer+0x6>
			aRxBuffer[0] = '-';
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <receiveFromBuffer+0x2c>)
 80047da:	222d      	movs	r2, #45	; 0x2d
 80047dc:	701a      	strb	r2, [r3, #0]
			return key;
 80047de:	79fb      	ldrb	r3, [r7, #7]
		}
	}
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	2000049c 	.word	0x2000049c

080047f0 <runUltrasonicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runUltrasonicTask */
void runUltrasonicTask(void *argument)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runUltrasonicTask */
  /* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80047f8:	2104      	movs	r1, #4
 80047fa:	4806      	ldr	r0, [pc, #24]	; (8004814 <runUltrasonicTask+0x24>)
 80047fc:	f004 f830 	bl	8008860 <HAL_TIM_IC_Start_IT>
  for(;;)
  {
//	  float d = 100;
//	  RobotMoveDist(&d,1,SPEED_MODE_1);
//	  __SET_MOTOR_DUTY(&htim8, 600, 1000);
	  HCSR04_Read();
 8004800:	f7fd f98a 	bl	8001b18 <HCSR04_Read>
	  uint8_t dist[20];
////	  osDelay(10);
	  Distance=UD;
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <runUltrasonicTask+0x28>)
 8004806:	781a      	ldrb	r2, [r3, #0]
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <runUltrasonicTask+0x2c>)
 800480a:	701a      	strb	r2, [r3, #0]
//	  OLED_ShowString(10,40,dist);
//
//	  sprintf(dist, "totDis: %5d", (int)totalDistance);
//	  OLED_ShowString(10,50,dist);
//	  OLED_Refresh_Gram();
	  osDelay(10);
 800480c:	200a      	movs	r0, #10
 800480e:	f006 fcc7 	bl	800b1a0 <osDelay>
  {
 8004812:	e7f5      	b.n	8004800 <runUltrasonicTask+0x10>
 8004814:	200002bc 	.word	0x200002bc
 8004818:	20000007 	.word	0x20000007
 800481c:	20000006 	.word	0x20000006

08004820 <runFastestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_runFastestTask */
void runFastestTask(void *argument)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFastestTask */

	__RESET_SERVO_TURN(&htim1);
 8004828:	4bbb      	ldr	r3, [pc, #748]	; (8004b18 <runFastestTask+0x2f8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2296      	movs	r2, #150	; 0x96
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
 8004830:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004834:	f000 ff04 	bl	8005640 <HAL_Delay>

	while (aRxBuffer[0] != 'S'){
 8004838:	e000      	b.n	800483c <runFastestTask+0x1c>
		continue;
 800483a:	bf00      	nop
	while (aRxBuffer[0] != 'S'){
 800483c:	4bb7      	ldr	r3, [pc, #732]	; (8004b1c <runFastestTask+0x2fc>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b53      	cmp	r3, #83	; 0x53
 8004842:	d1fa      	bne.n	800483a <runFastestTask+0x1a>
	}
	osDelay(10);
 8004844:	200a      	movs	r0, #10
 8004846:	f006 fcab 	bl	800b1a0 <osDelay>
	totalDistance += Distance;
 800484a:	4bb5      	ldr	r3, [pc, #724]	; (8004b20 <runFastestTask+0x300>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004856:	4bb3      	ldr	r3, [pc, #716]	; (8004b24 <runFastestTask+0x304>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004860:	4bb0      	ldr	r3, [pc, #704]	; (8004b24 <runFastestTask+0x304>)
 8004862:	edc3 7a00 	vstr	s15, [r3]
	// take first pic
	scan();
 8004866:	f7ff ff95 	bl	8004794 <scan>
	targetDist1 = 30;
 800486a:	4baf      	ldr	r3, [pc, #700]	; (8004b28 <runFastestTask+0x308>)
 800486c:	4aaf      	ldr	r2, [pc, #700]	; (8004b2c <runFastestTask+0x30c>)
 800486e:	601a      	str	r2, [r3, #0]
	// move straight till obstacle
	RobotMoveDistObstacleUS(&targetDist1, SPEED_MODE_2);
 8004870:	2102      	movs	r1, #2
 8004872:	48ad      	ldr	r0, [pc, #692]	; (8004b28 <runFastestTask+0x308>)
 8004874:	f7ff f8e4 	bl	8003a40 <RobotMoveDistObstacleUS>

// Receive first image
    char resp = receiveFromBuffer();
 8004878:	f7ff ffa2 	bl	80047c0 <receiveFromBuffer>
 800487c:	4603      	mov	r3, r0
 800487e:	75fb      	strb	r3, [r7, #23]
//	char resp = 'R';

	if (resp == 'L'){
 8004880:	7dfb      	ldrb	r3, [r7, #23]
 8004882:	2b4c      	cmp	r3, #76	; 0x4c
 8004884:	d104      	bne.n	8004890 <runFastestTask+0x70>
		FASTESTPATH_TURN_LEFT_180();
 8004886:	f7ff fe3f 	bl	8004508 <FASTESTPATH_TURN_LEFT_180>
		scan();
 800488a:	f7ff ff83 	bl	8004794 <scan>
 800488e:	e003      	b.n	8004898 <runFastestTask+0x78>
	}  else{
		FASTESTPATH_TURN_RIGHT_180();
 8004890:	f7ff fed8 	bl	8004644 <FASTESTPATH_TURN_RIGHT_180>
		scan();
 8004894:	f7ff ff7e 	bl	8004794 <scan>
	}

	// move straight till obstacle
	totalDistance += Distance;
 8004898:	4ba1      	ldr	r3, [pc, #644]	; (8004b20 <runFastestTask+0x300>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a4:	4b9f      	ldr	r3, [pc, #636]	; (8004b24 <runFastestTask+0x304>)
 80048a6:	edd3 7a00 	vldr	s15, [r3]
 80048aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ae:	4b9d      	ldr	r3, [pc, #628]	; (8004b24 <runFastestTask+0x304>)
 80048b0:	edc3 7a00 	vstr	s15, [r3]
//	__RESET_SERVO_TURN(&htim1);
	targetDist2 = 30;
 80048b4:	4b9e      	ldr	r3, [pc, #632]	; (8004b30 <runFastestTask+0x310>)
 80048b6:	4a9d      	ldr	r2, [pc, #628]	; (8004b2c <runFastestTask+0x30c>)
 80048b8:	601a      	str	r2, [r3, #0]
	RobotMoveDistObstacleUS(&targetDist2, SPEED_MODE_2);
 80048ba:	2102      	movs	r1, #2
 80048bc:	489c      	ldr	r0, [pc, #624]	; (8004b30 <runFastestTask+0x310>)
 80048be:	f7ff f8bf 	bl	8003a40 <RobotMoveDistObstacleUS>
//	osDelay(500);
	osDelay(10);
 80048c2:	200a      	movs	r0, #10
 80048c4:	f006 fc6c 	bl	800b1a0 <osDelay>


	// Receive 2nd picture
	 resp = receiveFromBuffer();
 80048c8:	f7ff ff7a 	bl	80047c0 <receiveFromBuffer>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]
//	resp = 'R';
	if (resp == 'L'){
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b4c      	cmp	r3, #76	; 0x4c
 80048d4:	f040 80b8 	bne.w	8004a48 <runFastestTask+0x228>
//		OLED_ShowString(10,10,dist);
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_LEFT_90();
 80048d8:	f7ff fd92 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
//		osDelay(10);
		//TODO
		osDelay(10);
 80048dc:	200a      	movs	r0, #10
 80048de:	f006 fc5f 	bl	800b1a0 <osDelay>
		// go straight IR
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDistIR(SPEED_MODE_2, 1);
 80048e2:	2101      	movs	r1, #1
 80048e4:	2002      	movs	r0, #2
 80048e6:	f7ff f9c7 	bl	8003c78 <RobotMoveDistIR>

		// go straight
		float a = 10.0;
 80048ea:	4b92      	ldr	r3, [pc, #584]	; (8004b34 <runFastestTask+0x314>)
 80048ec:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 80048ee:	f107 0310 	add.w	r3, r7, #16
 80048f2:	2200      	movs	r2, #0
 80048f4:	2101      	movs	r1, #1
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fd7a 	bl	80033f0 <RobotMoveDist>
		osDelay(200);
 80048fc:	20c8      	movs	r0, #200	; 0xc8
 80048fe:	f006 fc4f 	bl	800b1a0 <osDelay>

		// go right
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_RIGHT_90();
 8004902:	f7ff fdb7 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>
		osDelay(10);
 8004906:	200a      	movs	r0, #10
 8004908:	f006 fc4a 	bl	800b1a0 <osDelay>
//		htim1.Instance->CCR4=120;
//		osDelay(200);
//		__RESET_SERVO_TURN(&htim1);

		// go straight
		a = 15.0;
 800490c:	4b8a      	ldr	r3, [pc, #552]	; (8004b38 <runFastestTask+0x318>)
 800490e:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004910:	f107 0310 	add.w	r3, r7, #16
 8004914:	2200      	movs	r2, #0
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe fd69 	bl	80033f0 <RobotMoveDist>
//		osDelay(10);
		//TODO
		osDelay(200);
 800491e:	20c8      	movs	r0, #200	; 0xc8
 8004920:	f006 fc3e 	bl	800b1a0 <osDelay>

		// go right
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_RIGHT_90();
 8004924:	f7ff fda6 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>
		osDelay(10);
 8004928:	200a      	movs	r0, #10
 800492a:	f006 fc39 	bl	800b1a0 <osDelay>
//		htim1.Instance->CCR4=120;
//		osDelay(200);
//		__RESET_SERVO_TURN(&htim1);
//		osDelay(2000);

		a = 5.0;
 800492e:	4b83      	ldr	r3, [pc, #524]	; (8004b3c <runFastestTask+0x31c>)
 8004930:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	2200      	movs	r2, #0
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fd58 	bl	80033f0 <RobotMoveDist>
		//TODO
		osDelay(200);
 8004940:	20c8      	movs	r0, #200	; 0xc8
 8004942:	f006 fc2d 	bl	800b1a0 <osDelay>

		// go straight IR
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDistIR(SPEED_MODE_2, 1);
 8004946:	2101      	movs	r1, #1
 8004948:	2002      	movs	r0, #2
 800494a:	f7ff f995 	bl	8003c78 <RobotMoveDistIR>
		osDelay(10);
 800494e:	200a      	movs	r0, #10
 8004950:	f006 fc26 	bl	800b1a0 <osDelay>

		// go straight
		a = 15.0;
 8004954:	4b78      	ldr	r3, [pc, #480]	; (8004b38 <runFastestTask+0x318>)
 8004956:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	2200      	movs	r2, #0
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fd45 	bl	80033f0 <RobotMoveDist>
//		osDelay(10);
		//TODO
		osDelay(200);
 8004966:	20c8      	movs	r0, #200	; 0xc8
 8004968:	f006 fc1a 	bl	800b1a0 <osDelay>

		// go right
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_RIGHT_90();
 800496c:	f7ff fd82 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>
		osDelay(10);
 8004970:	200a      	movs	r0, #10
 8004972:	f006 fc15 	bl	800b1a0 <osDelay>
//		htim1.Instance->CCR4=120;
//		osDelay(200);

		// go straight
//		__RESET_SERVO_TURN(&htim1);
		if (totalDistance > 200){
 8004976:	4b6b      	ldr	r3, [pc, #428]	; (8004b24 <runFastestTask+0x304>)
 8004978:	edd3 7a00 	vldr	s15, [r3]
 800497c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004b40 <runFastestTask+0x320>
 8004980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	dd13      	ble.n	80049b2 <runFastestTask+0x192>
			totalDistance *= 1.15;
 800498a:	4b66      	ldr	r3, [pc, #408]	; (8004b24 <runFastestTask+0x304>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fdd2 	bl	8000538 <__aeabi_f2d>
 8004994:	a35e      	add	r3, pc, #376	; (adr r3, 8004b10 <runFastestTask+0x2f0>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fe25 	bl	80005e8 <__aeabi_dmul>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	f7fc f8d9 	bl	8000b5c <__aeabi_d2f>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <runFastestTask+0x304>)
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	e012      	b.n	80049d8 <runFastestTask+0x1b8>
		}else{
			totalDistance *= 1.2;
 80049b2:	4b5c      	ldr	r3, [pc, #368]	; (8004b24 <runFastestTask+0x304>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb fdbe 	bl	8000538 <__aeabi_f2d>
 80049bc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80049c0:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <runFastestTask+0x324>)
 80049c2:	f7fb fe11 	bl	80005e8 <__aeabi_dmul>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7fc f8c5 	bl	8000b5c <__aeabi_d2f>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4a53      	ldr	r2, [pc, #332]	; (8004b24 <runFastestTask+0x304>)
 80049d6:	6013      	str	r3, [r2, #0]
		}
//		totalDistance *= 1.2;
		RobotMoveDistBack(&totalDistance,DIR_FORWARD,SPEED_MODE_T);
 80049d8:	2200      	movs	r2, #0
 80049da:	2101      	movs	r1, #1
 80049dc:	4851      	ldr	r0, [pc, #324]	; (8004b24 <runFastestTask+0x304>)
 80049de:	f7fe fe9b 	bl	8003718 <RobotMoveDistBack>
		osDelay(200);
 80049e2:	20c8      	movs	r0, #200	; 0xc8
 80049e4:	f006 fbdc 	bl	800b1a0 <osDelay>

		// go right
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_RIGHT_90();
 80049e8:	f7ff fd44 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>

		osDelay(10);
 80049ec:	200a      	movs	r0, #10
 80049ee:	f006 fbd7 	bl	800b1a0 <osDelay>
//		htim1.Instance->CCR4=120;
//		osDelay(200);
//		__RESET_SERVO_TURN(&htim1);

		// go back abit
		a = 45.0;
 80049f2:	4b55      	ldr	r3, [pc, #340]	; (8004b48 <runFastestTask+0x328>)
 80049f4:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_BACKWARD,SPEED_MODE_T);
 80049f6:	f107 0310 	add.w	r3, r7, #16
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fcf6 	bl	80033f0 <RobotMoveDist>
		osDelay(500);
 8004a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a08:	f006 fbca 	bl	800b1a0 <osDelay>

		// go straight till IR
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDistIR2(SPEED_MODE_2, 0);
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7ff fa6e 	bl	8003ef0 <RobotMoveDistIR2>
		osDelay(500);
 8004a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a18:	f006 fbc2 	bl	800b1a0 <osDelay>

		// go straight
		a = 20.0;
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <runFastestTask+0x32c>)
 8004a1e:	613b      	str	r3, [r7, #16]
//		__RESET_SERVO_TURN(&htim1);
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004a20:	f107 0310 	add.w	r3, r7, #16
 8004a24:	2200      	movs	r2, #0
 8004a26:	2101      	movs	r1, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fce1 	bl	80033f0 <RobotMoveDist>
		osDelay(10);
 8004a2e:	200a      	movs	r0, #10
 8004a30:	f006 fbb6 	bl	800b1a0 <osDelay>


		// go left
//		__RESET_SERVO_TURN(&htim1);
		FASTESTPATH_TURN_LEFT_90();
 8004a34:	f7ff fce4 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
//		osDelay(10);

		// go straight till us
		targetDist3 = 20;
 8004a38:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <runFastestTask+0x330>)
 8004a3a:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <runFastestTask+0x32c>)
 8004a3c:	601a      	str	r2, [r3, #0]
		RobotMoveDistObstacleUS(&targetDist3, SPEED_MODE_2);
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4843      	ldr	r0, [pc, #268]	; (8004b50 <runFastestTask+0x330>)
 8004a42:	f7fe fffd 	bl	8003a40 <RobotMoveDistObstacleUS>
//			  __ACK_TASK_DONE(&huart3, rxMsg);

//		  }
//	  }
  /* USER CODE END runFastestTask */
}
 8004a46:	e0d2      	b.n	8004bee <runFastestTask+0x3ce>
		FASTESTPATH_TURN_RIGHT_90();
 8004a48:	f7ff fd14 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>
		osDelay(10);
 8004a4c:	200a      	movs	r0, #10
 8004a4e:	f006 fba7 	bl	800b1a0 <osDelay>
		RobotMoveDistIR(SPEED_MODE_2, 0);
 8004a52:	2100      	movs	r1, #0
 8004a54:	2002      	movs	r0, #2
 8004a56:	f7ff f90f 	bl	8003c78 <RobotMoveDistIR>
		float a = 5.0;
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <runFastestTask+0x31c>)
 8004a5c:	60fb      	str	r3, [r7, #12]
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	2200      	movs	r2, #0
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fcc2 	bl	80033f0 <RobotMoveDist>
		osDelay(200);
 8004a6c:	20c8      	movs	r0, #200	; 0xc8
 8004a6e:	f006 fb97 	bl	800b1a0 <osDelay>
		FASTESTPATH_TURN_LEFT_90();
 8004a72:	f7ff fcc5 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
		osDelay(10);
 8004a76:	200a      	movs	r0, #10
 8004a78:	f006 fb92 	bl	800b1a0 <osDelay>
		a = 15.0;
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <runFastestTask+0x318>)
 8004a7e:	60fb      	str	r3, [r7, #12]
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	2200      	movs	r2, #0
 8004a86:	2101      	movs	r1, #1
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe fcb1 	bl	80033f0 <RobotMoveDist>
		osDelay(200);
 8004a8e:	20c8      	movs	r0, #200	; 0xc8
 8004a90:	f006 fb86 	bl	800b1a0 <osDelay>
		FASTESTPATH_TURN_LEFT_90();
 8004a94:	f7ff fcb4 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
		osDelay(10);
 8004a98:	200a      	movs	r0, #10
 8004a9a:	f006 fb81 	bl	800b1a0 <osDelay>
		a = 5.0;
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <runFastestTask+0x31c>)
 8004aa0:	60fb      	str	r3, [r7, #12]
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fca0 	bl	80033f0 <RobotMoveDist>
		osDelay(200);
 8004ab0:	20c8      	movs	r0, #200	; 0xc8
 8004ab2:	f006 fb75 	bl	800b1a0 <osDelay>
		RobotMoveDistIR(SPEED_MODE_2, 0);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	2002      	movs	r0, #2
 8004aba:	f7ff f8dd 	bl	8003c78 <RobotMoveDistIR>
		osDelay(200);
 8004abe:	20c8      	movs	r0, #200	; 0xc8
 8004ac0:	f006 fb6e 	bl	800b1a0 <osDelay>
		FASTESTPATH_TURN_LEFT_90();
 8004ac4:	f7ff fc9c 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
		osDelay(10);
 8004ac8:	200a      	movs	r0, #10
 8004aca:	f006 fb69 	bl	800b1a0 <osDelay>
		if (totalDistance > 200){
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <runFastestTask+0x304>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004b40 <runFastestTask+0x320>
 8004ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	dd38      	ble.n	8004b54 <runFastestTask+0x334>
			totalDistance *= 1.15;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <runFastestTask+0x304>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fd26 	bl	8000538 <__aeabi_f2d>
 8004aec:	a308      	add	r3, pc, #32	; (adr r3, 8004b10 <runFastestTask+0x2f0>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fd79 	bl	80005e8 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fc f82d 	bl	8000b5c <__aeabi_d2f>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <runFastestTask+0x304>)
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e037      	b.n	8004b7a <runFastestTask+0x35a>
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w
 8004b10:	66666666 	.word	0x66666666
 8004b14:	3ff26666 	.word	0x3ff26666
 8004b18:	2000022c 	.word	0x2000022c
 8004b1c:	2000049c 	.word	0x2000049c
 8004b20:	20000006 	.word	0x20000006
 8004b24:	20000558 	.word	0x20000558
 8004b28:	20000484 	.word	0x20000484
 8004b2c:	41f00000 	.word	0x41f00000
 8004b30:	20000488 	.word	0x20000488
 8004b34:	41200000 	.word	0x41200000
 8004b38:	41700000 	.word	0x41700000
 8004b3c:	40a00000 	.word	0x40a00000
 8004b40:	43480000 	.word	0x43480000
 8004b44:	3ff33333 	.word	0x3ff33333
 8004b48:	42340000 	.word	0x42340000
 8004b4c:	41a00000 	.word	0x41a00000
 8004b50:	2000048c 	.word	0x2000048c
			totalDistance *= 1.2;
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <runFastestTask+0x3d8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fced 	bl	8000538 <__aeabi_f2d>
 8004b5e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004b62:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <runFastestTask+0x3dc>)
 8004b64:	f7fb fd40 	bl	80005e8 <__aeabi_dmul>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7fb fff4 	bl	8000b5c <__aeabi_d2f>
 8004b74:	4603      	mov	r3, r0
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <runFastestTask+0x3d8>)
 8004b78:	6013      	str	r3, [r2, #0]
		RobotMoveDistBack(&totalDistance,DIR_FORWARD,SPEED_MODE_T);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	481e      	ldr	r0, [pc, #120]	; (8004bf8 <runFastestTask+0x3d8>)
 8004b80:	f7fe fdca 	bl	8003718 <RobotMoveDistBack>
		osDelay(200);
 8004b84:	20c8      	movs	r0, #200	; 0xc8
 8004b86:	f006 fb0b 	bl	800b1a0 <osDelay>
		FASTESTPATH_TURN_LEFT_90();
 8004b8a:	f7ff fc39 	bl	8004400 <FASTESTPATH_TURN_LEFT_90>
		osDelay(10);
 8004b8e:	200a      	movs	r0, #10
 8004b90:	f006 fb06 	bl	800b1a0 <osDelay>
		a = 40.0;
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <runFastestTask+0x3e0>)
 8004b96:	60fb      	str	r3, [r7, #12]
		RobotMoveDist(&a,DIR_BACKWARD,SPEED_MODE_T);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fc25 	bl	80033f0 <RobotMoveDist>
		osDelay(500);
 8004ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004baa:	f006 faf9 	bl	800b1a0 <osDelay>
		RobotMoveDistIR2(SPEED_MODE_2,1);
 8004bae:	2101      	movs	r1, #1
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f7ff f99d 	bl	8003ef0 <RobotMoveDistIR2>
		osDelay(500);
 8004bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bba:	f006 faf1 	bl	800b1a0 <osDelay>
		a = 20.0;
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <runFastestTask+0x3e4>)
 8004bc0:	60fb      	str	r3, [r7, #12]
		RobotMoveDist(&a,DIR_FORWARD,SPEED_MODE_T);
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fc10 	bl	80033f0 <RobotMoveDist>
		osDelay(10);
 8004bd0:	200a      	movs	r0, #10
 8004bd2:	f006 fae5 	bl	800b1a0 <osDelay>
		FASTESTPATH_TURN_RIGHT_90();
 8004bd6:	f7ff fc4d 	bl	8004474 <FASTESTPATH_TURN_RIGHT_90>
		osDelay(10);
 8004bda:	200a      	movs	r0, #10
 8004bdc:	f006 fae0 	bl	800b1a0 <osDelay>
		targetDist4 = 20;
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <runFastestTask+0x3e8>)
 8004be2:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <runFastestTask+0x3e4>)
 8004be4:	601a      	str	r2, [r3, #0]
		RobotMoveDistObstacleUS(&targetDist4, SPEED_MODE_2);
 8004be6:	2102      	movs	r1, #2
 8004be8:	4807      	ldr	r0, [pc, #28]	; (8004c08 <runFastestTask+0x3e8>)
 8004bea:	f7fe ff29 	bl	8003a40 <RobotMoveDistObstacleUS>
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000558 	.word	0x20000558
 8004bfc:	3ff33333 	.word	0x3ff33333
 8004c00:	42200000 	.word	0x42200000
 8004c04:	41a00000 	.word	0x41a00000
 8004c08:	20000490 	.word	0x20000490

08004c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c1e:	f000 fcef 	bl	8005600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40001000 	.word	0x40001000

08004c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c34:	b672      	cpsid	i
}
 8004c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <Error_Handler+0x8>
	...

08004c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_MspInit+0x54>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <HAL_MspInit+0x54>)
 8004c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c50:	6453      	str	r3, [r2, #68]	; 0x44
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_MspInit+0x54>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_MspInit+0x54>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <HAL_MspInit+0x54>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_MspInit+0x54>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	210f      	movs	r1, #15
 8004c7e:	f06f 0001 	mvn.w	r0, #1
 8004c82:	f001 f985 	bl	8005f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800

08004c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <HAL_ADC_MspInit+0x198>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d158      	bne.n	8004d68 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	4b5d      	ldr	r3, [pc, #372]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc6:	4b5a      	ldr	r3, [pc, #360]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a55      	ldr	r2, [pc, #340]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cfa:	f107 031c 	add.w	r3, r7, #28
 8004cfe:	4619      	mov	r1, r3
 8004d00:	484c      	ldr	r0, [pc, #304]	; (8004e34 <HAL_ADC_MspInit+0x1a0>)
 8004d02:	f001 fceb 	bl	80066dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004d06:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d08:	4a4c      	ldr	r2, [pc, #304]	; (8004e3c <HAL_ADC_MspInit+0x1a8>)
 8004d0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004d0c:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d12:	4b49      	ldr	r3, [pc, #292]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d18:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d26:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d2e:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d4a:	483b      	ldr	r0, [pc, #236]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d4c:	f001 f94a 	bl	8005fe4 <HAL_DMA_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004d56:	f7ff ff6b 	bl	8004c30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a36      	ldr	r2, [pc, #216]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d60:	4a35      	ldr	r2, [pc, #212]	; (8004e38 <HAL_ADC_MspInit+0x1a4>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004d66:	e05d      	b.n	8004e24 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <HAL_ADC_MspInit+0x1ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d158      	bne.n	8004e24 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d80:	6453      	str	r3, [r2, #68]	; 0x44
 8004d82:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_ADC_MspInit+0x19c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004daa:	2304      	movs	r3, #4
 8004dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dae:	2303      	movs	r3, #3
 8004db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db6:	f107 031c 	add.w	r3, r7, #28
 8004dba:	4619      	mov	r1, r3
 8004dbc:	481d      	ldr	r0, [pc, #116]	; (8004e34 <HAL_ADC_MspInit+0x1a0>)
 8004dbe:	f001 fc8d 	bl	80066dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dc4:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <HAL_ADC_MspInit+0x1b4>)
 8004dc6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004de2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dea:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004df2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004df4:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dfa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004e08:	480e      	ldr	r0, [pc, #56]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004e0a:	f001 f8eb 	bl	8005fe4 <HAL_DMA_Init>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004e14:	f7ff ff0c 	bl	8004c30 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_ADC_MspInit+0x1b0>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004e24:	bf00      	nop
 8004e26:	3730      	adds	r7, #48	; 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40012000 	.word	0x40012000
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40020800 	.word	0x40020800
 8004e38:	20000118 	.word	0x20000118
 8004e3c:	40026410 	.word	0x40026410
 8004e40:	40012100 	.word	0x40012100
 8004e44:	20000178 	.word	0x20000178
 8004e48:	40026440 	.word	0x40026440

08004e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <HAL_I2C_MspInit+0x84>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d12c      	bne.n	8004ec8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7e:	4b15      	ldr	r3, [pc, #84]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e90:	2312      	movs	r3, #18
 8004e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <HAL_I2C_MspInit+0x8c>)
 8004ea8:	f001 fc18 	bl	80066dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eba:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_I2C_MspInit+0x88>)
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ec8:	bf00      	nop
 8004eca:	3728      	adds	r7, #40	; 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40005400 	.word	0x40005400
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40020400 	.word	0x40020400

08004edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 031c 	add.w	r3, r7, #28
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3f      	ldr	r2, [pc, #252]	; (8004ff8 <HAL_TIM_Base_MspInit+0x11c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d116      	bne.n	8004f2c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4a3d      	ldr	r2, [pc, #244]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2105      	movs	r1, #5
 8004f1e:	2019      	movs	r0, #25
 8004f20:	f001 f836 	bl	8005f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f24:	2019      	movs	r0, #25
 8004f26:	f001 f84f 	bl	8005fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f2a:	e060      	b.n	8004fee <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a33      	ldr	r2, [pc, #204]	; (8005000 <HAL_TIM_Base_MspInit+0x124>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d134      	bne.n	8004fa0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b2d      	ldr	r3, [pc, #180]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a28      	ldr	r2, [pc, #160]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f6e:	2330      	movs	r3, #48	; 0x30
 8004f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f72:	2302      	movs	r3, #2
 8004f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f82:	f107 031c 	add.w	r3, r7, #28
 8004f86:	4619      	mov	r1, r3
 8004f88:	481e      	ldr	r0, [pc, #120]	; (8005004 <HAL_TIM_Base_MspInit+0x128>)
 8004f8a:	f001 fba7 	bl	80066dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2105      	movs	r1, #5
 8004f92:	201d      	movs	r0, #29
 8004f94:	f000 fffc 	bl	8005f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f98:	201d      	movs	r0, #29
 8004f9a:	f001 f815 	bl	8005fc8 <HAL_NVIC_EnableIRQ>
}
 8004f9e:	e026      	b.n	8004fee <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM7)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIM_Base_MspInit+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fb4:	f043 0320 	orr.w	r3, r3, #32
 8004fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	e012      	b.n	8004fee <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <HAL_TIM_Base_MspInit+0x130>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10d      	bne.n	8004fee <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_TIM_Base_MspInit+0x120>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
}
 8004fee:	bf00      	nop
 8004ff0:	3730      	adds	r7, #48	; 0x30
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40010000 	.word	0x40010000
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40000400 	.word	0x40000400
 8005004:	40020400 	.word	0x40020400
 8005008:	40001400 	.word	0x40001400
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d14a      	bne.n	80050c8 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	4b26      	ldr	r3, [pc, #152]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6413      	str	r3, [r2, #64]	; 0x40
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6313      	str	r3, [r2, #48]	; 0x30
 800505e:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <HAL_TIM_Encoder_MspInit+0xc0>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508c:	2302      	movs	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	480c      	ldr	r0, [pc, #48]	; (80050d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80050a4:	f001 fb1a 	bl	80066dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80050a8:	2308      	movs	r3, #8
 80050aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ac:	2302      	movs	r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050b8:	2301      	movs	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	4619      	mov	r1, r3
 80050c2:	4805      	ldr	r0, [pc, #20]	; (80050d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 80050c4:	f001 fb0a 	bl	80066dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050c8:	bf00      	nop
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40020000 	.word	0x40020000
 80050d8:	40020400 	.word	0x40020400

080050dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 031c 	add.w	r3, r7, #28
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <HAL_TIM_IC_MspInit+0xe8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12d      	bne.n	800515a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b2e      	ldr	r3, [pc, #184]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b27      	ldr	r3, [pc, #156]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800513a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005148:	2302      	movs	r3, #2
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800514c:	f107 031c 	add.w	r3, r7, #28
 8005150:	4619      	mov	r1, r3
 8005152:	481e      	ldr	r0, [pc, #120]	; (80051cc <HAL_TIM_IC_MspInit+0xf0>)
 8005154:	f001 fac2 	bl	80066dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005158:	e030      	b.n	80051bc <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM5)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <HAL_TIM_IC_MspInit+0xf4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d12b      	bne.n	80051bc <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	4a16      	ldr	r2, [pc, #88]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 800516e:	f043 0308 	orr.w	r3, r3, #8
 8005172:	6413      	str	r3, [r2, #64]	; 0x40
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	4a0f      	ldr	r2, [pc, #60]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6313      	str	r3, [r2, #48]	; 0x30
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <HAL_TIM_IC_MspInit+0xec>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800519c:	2301      	movs	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	2302      	movs	r3, #2
 80051a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80051ac:	2302      	movs	r3, #2
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b0:	f107 031c 	add.w	r3, r7, #28
 80051b4:	4619      	mov	r1, r3
 80051b6:	4807      	ldr	r0, [pc, #28]	; (80051d4 <HAL_TIM_IC_MspInit+0xf8>)
 80051b8:	f001 fa90 	bl	80066dc <HAL_GPIO_Init>
}
 80051bc:	bf00      	nop
 80051be:	3730      	adds	r7, #48	; 0x30
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40020c00 	.word	0x40020c00
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40020000 	.word	0x40020000

080051d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a24      	ldr	r2, [pc, #144]	; (8005288 <HAL_TIM_MspPostInit+0xb0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d11f      	bne.n	800523a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a22      	ldr	r2, [pc, #136]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 8005204:	f043 0310 	orr.w	r3, r3, #16
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800521a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005228:	2301      	movs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	4619      	mov	r1, r3
 8005232:	4817      	ldr	r0, [pc, #92]	; (8005290 <HAL_TIM_MspPostInit+0xb8>)
 8005234:	f001 fa52 	bl	80066dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005238:	e022      	b.n	8005280 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIM_MspPostInit+0xbc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d11d      	bne.n	8005280 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	4a0f      	ldr	r2, [pc, #60]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	6313      	str	r3, [r2, #48]	; 0x30
 8005254:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_TIM_MspPostInit+0xb4>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005260:	23c0      	movs	r3, #192	; 0xc0
 8005262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005264:	2302      	movs	r3, #2
 8005266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005270:	2303      	movs	r3, #3
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	4619      	mov	r1, r3
 800527a:	4807      	ldr	r0, [pc, #28]	; (8005298 <HAL_TIM_MspPostInit+0xc0>)
 800527c:	f001 fa2e 	bl	80066dc <HAL_GPIO_Init>
}
 8005280:	bf00      	nop
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40010000 	.word	0x40010000
 800528c:	40023800 	.word	0x40023800
 8005290:	40021000 	.word	0x40021000
 8005294:	40010400 	.word	0x40010400
 8005298:	40020800 	.word	0x40020800

0800529c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <HAL_UART_MspInit+0x94>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d134      	bne.n	8005328 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
 80052ce:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a14      	ldr	r2, [pc, #80]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052e4:	f043 0304 	orr.w	r3, r3, #4
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_UART_MspInit+0x98>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fc:	2302      	movs	r3, #2
 80052fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005304:	2303      	movs	r3, #3
 8005306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005308:	2307      	movs	r3, #7
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800530c:	f107 0314 	add.w	r3, r7, #20
 8005310:	4619      	mov	r1, r3
 8005312:	4809      	ldr	r0, [pc, #36]	; (8005338 <HAL_UART_MspInit+0x9c>)
 8005314:	f001 f9e2 	bl	80066dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005318:	2200      	movs	r2, #0
 800531a:	2105      	movs	r1, #5
 800531c:	2027      	movs	r0, #39	; 0x27
 800531e:	f000 fe37 	bl	8005f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005322:	2027      	movs	r0, #39	; 0x27
 8005324:	f000 fe50 	bl	8005fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005328:	bf00      	nop
 800532a:	3728      	adds	r7, #40	; 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40004800 	.word	0x40004800
 8005334:	40023800 	.word	0x40023800
 8005338:	40020800 	.word	0x40020800

0800533c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	4b33      	ldr	r3, [pc, #204]	; (8005420 <HAL_InitTick+0xe4>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	4a32      	ldr	r2, [pc, #200]	; (8005420 <HAL_InitTick+0xe4>)
 8005356:	f043 0310 	orr.w	r3, r3, #16
 800535a:	6413      	str	r3, [r2, #64]	; 0x40
 800535c:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_InitTick+0xe4>)
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005368:	f107 0210 	add.w	r2, r7, #16
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f002 ffa8 	bl	80082c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005382:	f002 ff79 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 8005386:	6378      	str	r0, [r7, #52]	; 0x34
 8005388:	e004      	b.n	8005394 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800538a:	f002 ff75 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 800538e:	4603      	mov	r3, r0
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_InitTick+0xe8>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	0c9b      	lsrs	r3, r3, #18
 800539e:	3b01      	subs	r3, #1
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <HAL_InitTick+0xec>)
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <HAL_InitTick+0xf0>)
 80053a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_InitTick+0xec>)
 80053aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80053b0:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_InitTick+0xec>)
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <HAL_InitTick+0xec>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053bc:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <HAL_InitTick+0xec>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_InitTick+0xec>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80053c8:	4817      	ldr	r0, [pc, #92]	; (8005428 <HAL_InitTick+0xec>)
 80053ca:	f002 ffaf 	bl	800832c <HAL_TIM_Base_Init>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80053d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11b      	bne.n	8005414 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053dc:	4812      	ldr	r0, [pc, #72]	; (8005428 <HAL_InitTick+0xec>)
 80053de:	f003 f85d 	bl	800849c <HAL_TIM_Base_Start_IT>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80053e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d111      	bne.n	8005414 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053f0:	2036      	movs	r0, #54	; 0x36
 80053f2:	f000 fde9 	bl	8005fc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b0f      	cmp	r3, #15
 80053fa:	d808      	bhi.n	800540e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053fc:	2200      	movs	r2, #0
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	2036      	movs	r0, #54	; 0x36
 8005402:	f000 fdc5 	bl	8005f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <HAL_InitTick+0xf4>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e002      	b.n	8005414 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005418:	4618      	mov	r0, r3
 800541a:	3738      	adds	r7, #56	; 0x38
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	431bde83 	.word	0x431bde83
 8005428:	20000560 	.word	0x20000560
 800542c:	40001000 	.word	0x40001000
 8005430:	20000010 	.word	0x20000010

08005434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005438:	e7fe      	b.n	8005438 <NMI_Handler+0x4>

0800543a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800543e:	e7fe      	b.n	800543e <HardFault_Handler+0x4>

08005440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005444:	e7fe      	b.n	8005444 <MemManage_Handler+0x4>

08005446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800544a:	e7fe      	b.n	800544a <BusFault_Handler+0x4>

0800544c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <UsageFault_Handler+0x4>

08005452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005464:	4802      	ldr	r0, [pc, #8]	; (8005470 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005466:	f003 fc57 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2000022c 	.word	0x2000022c

08005474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005478:	4802      	ldr	r0, [pc, #8]	; (8005484 <TIM3_IRQHandler+0x10>)
 800547a:	f003 fc4d 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200002bc 	.word	0x200002bc

08005488 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800548c:	4802      	ldr	r0, [pc, #8]	; (8005498 <USART3_IRQHandler+0x10>)
 800548e:	f004 fdff 	bl	800a090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000424 	.word	0x20000424

0800549c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054a0:	4802      	ldr	r0, [pc, #8]	; (80054ac <TIM6_DAC_IRQHandler+0x10>)
 80054a2:	f003 fc39 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000560 	.word	0x20000560

080054b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <DMA2_Stream0_IRQHandler+0x10>)
 80054b6:	f000 fed5 	bl	8006264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000118 	.word	0x20000118

080054c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80054c8:	4802      	ldr	r0, [pc, #8]	; (80054d4 <DMA2_Stream2_IRQHandler+0x10>)
 80054ca:	f000 fecb 	bl	8006264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000178 	.word	0x20000178

080054d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <_sbrk+0x5c>)
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <_sbrk+0x60>)
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <_sbrk+0x64>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <_sbrk+0x64>)
 80054f6:	4a12      	ldr	r2, [pc, #72]	; (8005540 <_sbrk+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054fa:	4b10      	ldr	r3, [pc, #64]	; (800553c <_sbrk+0x64>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	429a      	cmp	r2, r3
 8005506:	d207      	bcs.n	8005518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005508:	f008 fce8 	bl	800dedc <__errno>
 800550c:	4603      	mov	r3, r0
 800550e:	220c      	movs	r2, #12
 8005510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	e009      	b.n	800552c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <_sbrk+0x64>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <_sbrk+0x64>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <_sbrk+0x64>)
 8005528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20020000 	.word	0x20020000
 8005538:	00000400 	.word	0x00000400
 800553c:	200005a8 	.word	0x200005a8
 8005540:	20005448 	.word	0x20005448

08005544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <SystemInit+0x20>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	4a05      	ldr	r2, [pc, #20]	; (8005564 <SystemInit+0x20>)
 8005550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800556c:	480d      	ldr	r0, [pc, #52]	; (80055a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800556e:	490e      	ldr	r1, [pc, #56]	; (80055a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005574:	e002      	b.n	800557c <LoopCopyDataInit>

08005576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800557a:	3304      	adds	r3, #4

0800557c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800557c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800557e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005580:	d3f9      	bcc.n	8005576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005582:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005584:	4c0b      	ldr	r4, [pc, #44]	; (80055b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005588:	e001      	b.n	800558e <LoopFillZerobss>

0800558a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800558a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800558c:	3204      	adds	r2, #4

0800558e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800558e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005590:	d3fb      	bcc.n	800558a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005592:	f7ff ffd7 	bl	8005544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005596:	f008 fca7 	bl	800dee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800559a:	f7fb fcad 	bl	8000ef8 <main>
  bx  lr    
 800559e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80055ac:	0800e9fc 	.word	0x0800e9fc
  ldr r2, =_sbss
 80055b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80055b4:	20005448 	.word	0x20005448

080055b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055b8:	e7fe      	b.n	80055b8 <ADC_IRQHandler>
	...

080055bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055c0:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_Init+0x40>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <HAL_Init+0x40>)
 80055c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_Init+0x40>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_Init+0x40>)
 80055d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055d8:	4b08      	ldr	r3, [pc, #32]	; (80055fc <HAL_Init+0x40>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a07      	ldr	r2, [pc, #28]	; (80055fc <HAL_Init+0x40>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e4:	2003      	movs	r0, #3
 80055e6:	f000 fcc8 	bl	8005f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055ea:	200f      	movs	r0, #15
 80055ec:	f7ff fea6 	bl	800533c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055f0:	f7ff fb24 	bl	8004c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023c00 	.word	0x40023c00

08005600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <HAL_IncTick+0x20>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_IncTick+0x24>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4413      	add	r3, r2
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <HAL_IncTick+0x24>)
 8005612:	6013      	str	r3, [r2, #0]
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000014 	.word	0x20000014
 8005624:	200005ac 	.word	0x200005ac

08005628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return uwTick;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_GetTick+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200005ac 	.word	0x200005ac

08005640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005648:	f7ff ffee 	bl	8005628 <HAL_GetTick>
 800564c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d005      	beq.n	8005666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_Delay+0x44>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005666:	bf00      	nop
 8005668:	f7ff ffde 	bl	8005628 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d8f7      	bhi.n	8005668 <HAL_Delay+0x28>
  {
  }
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000014 	.word	0x20000014

08005688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e033      	b.n	8005706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff faf4 	bl	8004c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d118      	bne.n	80056f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056ce:	f023 0302 	bic.w	r3, r3, #2
 80056d2:	f043 0202 	orr.w	r2, r3, #2
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 faa4 	bl	8005c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
 80056f6:	e001      	b.n	80056fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_ADC_Start+0x1a>
 8005726:	2302      	movs	r3, #2
 8005728:	e0b2      	b.n	8005890 <HAL_ADC_Start+0x180>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d018      	beq.n	8005772 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005750:	4b52      	ldr	r3, [pc, #328]	; (800589c <HAL_ADC_Start+0x18c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_ADC_Start+0x190>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0c9a      	lsrs	r2, r3, #18
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005764:	e002      	b.n	800576c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3b01      	subs	r3, #1
 800576a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f9      	bne.n	8005766 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d17a      	bne.n	8005876 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057be:	d106      	bne.n	80057ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	f023 0206 	bic.w	r2, r3, #6
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
 80057cc:	e002      	b.n	80057d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057dc:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_ADC_Start+0x194>)
 80057de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d12a      	bne.n	800584c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <HAL_ADC_Start+0x198>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d015      	beq.n	800582c <HAL_ADC_Start+0x11c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a29      	ldr	r2, [pc, #164]	; (80058ac <HAL_ADC_Start+0x19c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d105      	bne.n	8005816 <HAL_ADC_Start+0x106>
 800580a:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <HAL_ADC_Start+0x194>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a25      	ldr	r2, [pc, #148]	; (80058b0 <HAL_ADC_Start+0x1a0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d136      	bne.n	800588e <HAL_ADC_Start+0x17e>
 8005820:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_ADC_Start+0x194>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d130      	bne.n	800588e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d129      	bne.n	800588e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005848:	609a      	str	r2, [r3, #8]
 800584a:	e020      	b.n	800588e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_ADC_Start+0x198>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d11b      	bne.n	800588e <HAL_ADC_Start+0x17e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d114      	bne.n	800588e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	e00b      	b.n	800588e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f043 0210 	orr.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	431bde83 	.word	0x431bde83
 80058a4:	40012300 	.word	0x40012300
 80058a8:	40012000 	.word	0x40012000
 80058ac:	40012100 	.word	0x40012100
 80058b0:	40012200 	.word	0x40012200

080058b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d0:	d113      	bne.n	80058fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e0:	d10b      	bne.n	80058fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e063      	b.n	80059c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80058fa:	f7ff fe95 	bl	8005628 <HAL_GetTick>
 80058fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005900:	e021      	b.n	8005946 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d01d      	beq.n	8005946 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <HAL_ADC_PollForConversion+0x6c>
 8005910:	f7ff fe8a 	bl	8005628 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d212      	bcs.n	8005946 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d00b      	beq.n	8005946 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e03d      	b.n	80059c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d1d6      	bne.n	8005902 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0212 	mvn.w	r2, #18
 800595c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d123      	bne.n	80059c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11f      	bne.n	80059c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800598a:	2b00      	cmp	r3, #0
 800598c:	d006      	beq.n	800599c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005998:	2b00      	cmp	r3, #0
 800599a:	d111      	bne.n	80059c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f043 0201 	orr.w	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_ConfigChannel+0x1c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e105      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x228>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d925      	bls.n	8005a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68d9      	ldr	r1, [r3, #12]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	3b1e      	subs	r3, #30
 8005a26:	2207      	movs	r2, #7
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43da      	mvns	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	400a      	ands	r2, r1
 8005a34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4618      	mov	r0, r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4403      	add	r3, r0
 8005a4e:	3b1e      	subs	r3, #30
 8005a50:	409a      	lsls	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	e022      	b.n	8005aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6919      	ldr	r1, [r3, #16]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	2207      	movs	r2, #7
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	4618      	mov	r0, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4403      	add	r3, r0
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d824      	bhi.n	8005af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	3b05      	subs	r3, #5
 8005abc:	221f      	movs	r2, #31
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	400a      	ands	r2, r1
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4618      	mov	r0, r3
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3b05      	subs	r3, #5
 8005ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	635a      	str	r2, [r3, #52]	; 0x34
 8005af2:	e04c      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d824      	bhi.n	8005b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b23      	subs	r3, #35	; 0x23
 8005b0e:	221f      	movs	r2, #31
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43da      	mvns	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	3b23      	subs	r3, #35	; 0x23
 8005b38:	fa00 f203 	lsl.w	r2, r0, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
 8005b44:	e023      	b.n	8005b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	3b41      	subs	r3, #65	; 0x41
 8005b58:	221f      	movs	r2, #31
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	400a      	ands	r2, r1
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4618      	mov	r0, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	3b41      	subs	r3, #65	; 0x41
 8005b82:	fa00 f203 	lsl.w	r2, r0, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b8e:	4b22      	ldr	r3, [pc, #136]	; (8005c18 <HAL_ADC_ConfigChannel+0x234>)
 8005b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_ADC_ConfigChannel+0x238>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d109      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x1cc>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b12      	cmp	r3, #18
 8005ba2:	d105      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_ADC_ConfigChannel+0x238>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d123      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x21e>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d003      	beq.n	8005bca <HAL_ADC_ConfigChannel+0x1e6>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b11      	cmp	r3, #17
 8005bc8:	d11b      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d111      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <HAL_ADC_ConfigChannel+0x23c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <HAL_ADC_ConfigChannel+0x240>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	0c9a      	lsrs	r2, r3, #18
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bf4:	e002      	b.n	8005bfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f9      	bne.n	8005bf6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012300 	.word	0x40012300
 8005c1c:	40012000 	.word	0x40012000
 8005c20:	2000000c 	.word	0x2000000c
 8005c24:	431bde83 	.word	0x431bde83

08005c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c30:	4b79      	ldr	r3, [pc, #484]	; (8005e18 <ADC_Init+0x1f0>)
 8005c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6899      	ldr	r1, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	4a58      	ldr	r2, [pc, #352]	; (8005e1c <ADC_Init+0x1f4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6899      	ldr	r1, [r3, #8]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
 8005d04:	e00f      	b.n	8005d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0202 	bic.w	r2, r2, #2
 8005d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7e1b      	ldrb	r3, [r3, #24]
 8005d40:	005a      	lsls	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01b      	beq.n	8005d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	035a      	lsls	r2, r3, #13
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	e007      	b.n	8005d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	051a      	lsls	r2, r3, #20
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dde:	025a      	lsls	r2, r3, #9
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6899      	ldr	r1, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	029a      	lsls	r2, r3, #10
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40012300 	.word	0x40012300
 8005e1c:	0f000001 	.word	0x0f000001

08005e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <__NVIC_SetPriorityGrouping+0x44>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e52:	4a04      	ldr	r2, [pc, #16]	; (8005e64 <__NVIC_SetPriorityGrouping+0x44>)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	60d3      	str	r3, [r2, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <__NVIC_GetPriorityGrouping+0x18>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	f003 0307 	and.w	r3, r3, #7
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db0b      	blt.n	8005eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	4907      	ldr	r1, [pc, #28]	; (8005ebc <__NVIC_EnableIRQ+0x38>)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000e100 	.word	0xe000e100

08005ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	db0a      	blt.n	8005eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	490c      	ldr	r1, [pc, #48]	; (8005f0c <__NVIC_SetPriority+0x4c>)
 8005eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ede:	0112      	lsls	r2, r2, #4
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ee8:	e00a      	b.n	8005f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4908      	ldr	r1, [pc, #32]	; (8005f10 <__NVIC_SetPriority+0x50>)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	3b04      	subs	r3, #4
 8005ef8:	0112      	lsls	r2, r2, #4
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	440b      	add	r3, r1
 8005efe:	761a      	strb	r2, [r3, #24]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000e100 	.word	0xe000e100
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f1c3 0307 	rsb	r3, r3, #7
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	bf28      	it	cs
 8005f32:	2304      	movcs	r3, #4
 8005f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2b06      	cmp	r3, #6
 8005f3c:	d902      	bls.n	8005f44 <NVIC_EncodePriority+0x30>
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3b03      	subs	r3, #3
 8005f42:	e000      	b.n	8005f46 <NVIC_EncodePriority+0x32>
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f48:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	401a      	ands	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	fa01 f303 	lsl.w	r3, r1, r3
 8005f66:	43d9      	mvns	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f6c:	4313      	orrs	r3, r2
         );
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3724      	adds	r7, #36	; 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ff4c 	bl	8005e20 <__NVIC_SetPriorityGrouping>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa2:	f7ff ff61 	bl	8005e68 <__NVIC_GetPriorityGrouping>
 8005fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	6978      	ldr	r0, [r7, #20]
 8005fae:	f7ff ffb1 	bl	8005f14 <NVIC_EncodePriority>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff ff80 	bl	8005ec0 <__NVIC_SetPriority>
}
 8005fc0:	bf00      	nop
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff54 	bl	8005e84 <__NVIC_EnableIRQ>
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ff0:	f7ff fb1a 	bl	8005628 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e099      	b.n	8006134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006020:	e00f      	b.n	8006042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006022:	f7ff fb01 	bl	8005628 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b05      	cmp	r3, #5
 800602e:	d908      	bls.n	8006042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2203      	movs	r2, #3
 800603a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e078      	b.n	8006134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e8      	bne.n	8006022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4b38      	ldr	r3, [pc, #224]	; (800613c <HAL_DMA_Init+0x158>)
 800605c:	4013      	ands	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800606e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800607a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b04      	cmp	r3, #4
 800609a:	d107      	bne.n	80060ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	4313      	orrs	r3, r2
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d117      	bne.n	8006106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa7b 	bl	80065e4 <DMA_CheckFifoParam>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2240      	movs	r2, #64	; 0x40
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006102:	2301      	movs	r3, #1
 8006104:	e016      	b.n	8006134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa32 	bl	8006578 <DMA_CalcBaseAndBitshift>
 8006114:	4603      	mov	r3, r0
 8006116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611c:	223f      	movs	r2, #63	; 0x3f
 800611e:	409a      	lsls	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	f010803f 	.word	0xf010803f

08006140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800614e:	f7ff fa6b 	bl	8005628 <HAL_GetTick>
 8006152:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d008      	beq.n	8006172 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e052      	b.n	8006218 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0216 	bic.w	r2, r2, #22
 8006180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_DMA_Abort+0x62>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0208 	bic.w	r2, r2, #8
 80061b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061c2:	e013      	b.n	80061ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061c4:	f7ff fa30 	bl	8005628 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d90c      	bls.n	80061ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2203      	movs	r2, #3
 80061dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e015      	b.n	8006218 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e4      	bne.n	80061c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fe:	223f      	movs	r2, #63	; 0x3f
 8006200:	409a      	lsls	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d004      	beq.n	800623e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e00c      	b.n	8006258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2205      	movs	r2, #5
 8006242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006270:	4b8e      	ldr	r3, [pc, #568]	; (80064ac <HAL_DMA_IRQHandler+0x248>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a8e      	ldr	r2, [pc, #568]	; (80064b0 <HAL_DMA_IRQHandler+0x24c>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	0a9b      	lsrs	r3, r3, #10
 800627c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	2208      	movs	r2, #8
 8006290:	409a      	lsls	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01a      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d013      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	2208      	movs	r2, #8
 80062be:	409a      	lsls	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d4:	2201      	movs	r2, #1
 80062d6:	409a      	lsls	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d012      	beq.n	8006306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	2201      	movs	r2, #1
 80062f4:	409a      	lsls	r2, r3
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	2204      	movs	r2, #4
 800630c:	409a      	lsls	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	2204      	movs	r2, #4
 800632a:	409a      	lsls	r2, r3
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	f043 0204 	orr.w	r2, r3, #4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	2210      	movs	r2, #16
 8006342:	409a      	lsls	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d043      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d03c      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635e:	2210      	movs	r2, #16
 8006360:	409a      	lsls	r2, r3
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d018      	beq.n	80063a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d024      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
 8006392:	e01f      	b.n	80063d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01b      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
 80063a4:	e016      	b.n	80063d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0208 	bic.w	r2, r2, #8
 80063c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	2220      	movs	r2, #32
 80063da:	409a      	lsls	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 808f 	beq.w	8006504 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8087 	beq.w	8006504 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	2220      	movs	r2, #32
 80063fc:	409a      	lsls	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b05      	cmp	r3, #5
 800640c:	d136      	bne.n	800647c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0216 	bic.w	r2, r2, #22
 800641c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <HAL_DMA_IRQHandler+0x1da>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0208 	bic.w	r2, r2, #8
 800644c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	223f      	movs	r2, #63	; 0x3f
 8006454:	409a      	lsls	r2, r3
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	2b00      	cmp	r3, #0
 8006470:	d07e      	beq.n	8006570 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
        }
        return;
 800647a:	e079      	b.n	8006570 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01d      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	2b00      	cmp	r3, #0
 800649e:	d031      	beq.n	8006504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
 80064a8:	e02c      	b.n	8006504 <HAL_DMA_IRQHandler+0x2a0>
 80064aa:	bf00      	nop
 80064ac:	2000000c 	.word	0x2000000c
 80064b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d023      	beq.n	8006504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	e01e      	b.n	8006504 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10f      	bne.n	80064f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0210 	bic.w	r2, r2, #16
 80064e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2b00      	cmp	r3, #0
 800650a:	d032      	beq.n	8006572 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d022      	beq.n	800655e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2205      	movs	r2, #5
 800651c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3301      	adds	r3, #1
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	429a      	cmp	r2, r3
 800653a:	d307      	bcc.n	800654c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f2      	bne.n	8006530 <HAL_DMA_IRQHandler+0x2cc>
 800654a:	e000      	b.n	800654e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800654c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	e000      	b.n	8006572 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006570:	bf00      	nop
    }
  }
}
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	3b10      	subs	r3, #16
 8006588:	4a14      	ldr	r2, [pc, #80]	; (80065dc <DMA_CalcBaseAndBitshift+0x64>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006592:	4a13      	ldr	r2, [pc, #76]	; (80065e0 <DMA_CalcBaseAndBitshift+0x68>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d909      	bls.n	80065ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	659a      	str	r2, [r3, #88]	; 0x58
 80065b8:	e007      	b.n	80065ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	aaaaaaab 	.word	0xaaaaaaab
 80065e0:	0800e9b0 	.word	0x0800e9b0

080065e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11f      	bne.n	800663e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b03      	cmp	r3, #3
 8006602:	d856      	bhi.n	80066b2 <DMA_CheckFifoParam+0xce>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <DMA_CheckFifoParam+0x28>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	0800661d 	.word	0x0800661d
 8006610:	0800662f 	.word	0x0800662f
 8006614:	0800661d 	.word	0x0800661d
 8006618:	080066b3 	.word	0x080066b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d046      	beq.n	80066b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800662c:	e043      	b.n	80066b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006636:	d140      	bne.n	80066ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800663c:	e03d      	b.n	80066ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d121      	bne.n	800668c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d837      	bhi.n	80066be <DMA_CheckFifoParam+0xda>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <DMA_CheckFifoParam+0x70>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006665 	.word	0x08006665
 8006658:	0800666b 	.word	0x0800666b
 800665c:	08006665 	.word	0x08006665
 8006660:	0800667d 	.word	0x0800667d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
      break;
 8006668:	e030      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d025      	beq.n	80066c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800667a:	e022      	b.n	80066c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006684:	d11f      	bne.n	80066c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800668a:	e01c      	b.n	80066c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d903      	bls.n	800669a <DMA_CheckFifoParam+0xb6>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d003      	beq.n	80066a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006698:	e018      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
      break;
 800669e:	e015      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	e00b      	b.n	80066ca <DMA_CheckFifoParam+0xe6>
      break;
 80066b2:	bf00      	nop
 80066b4:	e00a      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;
 80066b6:	bf00      	nop
 80066b8:	e008      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;
 80066ba:	bf00      	nop
 80066bc:	e006      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;
 80066be:	bf00      	nop
 80066c0:	e004      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;
 80066c2:	bf00      	nop
 80066c4:	e002      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;   
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <DMA_CheckFifoParam+0xe8>
      break;
 80066ca:	bf00      	nop
    }
  } 
  
  return status; 
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop

080066dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066dc:	b480      	push	{r7}
 80066de:	b089      	sub	sp, #36	; 0x24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e16b      	b.n	80069d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066f8:	2201      	movs	r2, #1
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4013      	ands	r3, r2
 800670a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	429a      	cmp	r2, r3
 8006712:	f040 815a 	bne.w	80069ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b01      	cmp	r3, #1
 8006720:	d005      	beq.n	800672e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800672a:	2b02      	cmp	r3, #2
 800672c:	d130      	bne.n	8006790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	2203      	movs	r2, #3
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4313      	orrs	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006764:	2201      	movs	r2, #1
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	4013      	ands	r3, r2
 8006772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	f003 0201 	and.w	r2, r3, #1
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4313      	orrs	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	2b03      	cmp	r3, #3
 800679a:	d017      	beq.n	80067cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	2203      	movs	r2, #3
 80067a8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ac:	43db      	mvns	r3, r3
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	4013      	ands	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d123      	bne.n	8006820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	08da      	lsrs	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3208      	adds	r2, #8
 80067e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	220f      	movs	r2, #15
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	43db      	mvns	r3, r3
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	4013      	ands	r3, r2
 80067fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4313      	orrs	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	08da      	lsrs	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3208      	adds	r2, #8
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	2203      	movs	r2, #3
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4013      	ands	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f003 0203 	and.w	r2, r3, #3
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	4313      	orrs	r3, r2
 800684c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80b4 	beq.w	80069ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4b60      	ldr	r3, [pc, #384]	; (80069e8 <HAL_GPIO_Init+0x30c>)
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	4a5f      	ldr	r2, [pc, #380]	; (80069e8 <HAL_GPIO_Init+0x30c>)
 800686c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006870:	6453      	str	r3, [r2, #68]	; 0x44
 8006872:	4b5d      	ldr	r3, [pc, #372]	; (80069e8 <HAL_GPIO_Init+0x30c>)
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800687e:	4a5b      	ldr	r2, [pc, #364]	; (80069ec <HAL_GPIO_Init+0x310>)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	3302      	adds	r3, #2
 8006886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	220f      	movs	r2, #15
 8006896:	fa02 f303 	lsl.w	r3, r2, r3
 800689a:	43db      	mvns	r3, r3
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	4013      	ands	r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a52      	ldr	r2, [pc, #328]	; (80069f0 <HAL_GPIO_Init+0x314>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02b      	beq.n	8006902 <HAL_GPIO_Init+0x226>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a51      	ldr	r2, [pc, #324]	; (80069f4 <HAL_GPIO_Init+0x318>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d025      	beq.n	80068fe <HAL_GPIO_Init+0x222>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a50      	ldr	r2, [pc, #320]	; (80069f8 <HAL_GPIO_Init+0x31c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01f      	beq.n	80068fa <HAL_GPIO_Init+0x21e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a4f      	ldr	r2, [pc, #316]	; (80069fc <HAL_GPIO_Init+0x320>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d019      	beq.n	80068f6 <HAL_GPIO_Init+0x21a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a4e      	ldr	r2, [pc, #312]	; (8006a00 <HAL_GPIO_Init+0x324>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_GPIO_Init+0x216>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a4d      	ldr	r2, [pc, #308]	; (8006a04 <HAL_GPIO_Init+0x328>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00d      	beq.n	80068ee <HAL_GPIO_Init+0x212>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a4c      	ldr	r2, [pc, #304]	; (8006a08 <HAL_GPIO_Init+0x32c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d007      	beq.n	80068ea <HAL_GPIO_Init+0x20e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a4b      	ldr	r2, [pc, #300]	; (8006a0c <HAL_GPIO_Init+0x330>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <HAL_GPIO_Init+0x20a>
 80068e2:	2307      	movs	r3, #7
 80068e4:	e00e      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068e6:	2308      	movs	r3, #8
 80068e8:	e00c      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068ea:	2306      	movs	r3, #6
 80068ec:	e00a      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068ee:	2305      	movs	r3, #5
 80068f0:	e008      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068f2:	2304      	movs	r3, #4
 80068f4:	e006      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068f6:	2303      	movs	r3, #3
 80068f8:	e004      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e002      	b.n	8006904 <HAL_GPIO_Init+0x228>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_GPIO_Init+0x228>
 8006902:	2300      	movs	r3, #0
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	f002 0203 	and.w	r2, r2, #3
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	4093      	lsls	r3, r2
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006914:	4935      	ldr	r1, [pc, #212]	; (80069ec <HAL_GPIO_Init+0x310>)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	089b      	lsrs	r3, r3, #2
 800691a:	3302      	adds	r3, #2
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006922:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <HAL_GPIO_Init+0x334>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	43db      	mvns	r3, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4013      	ands	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006946:	4a32      	ldr	r2, [pc, #200]	; (8006a10 <HAL_GPIO_Init+0x334>)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800694c:	4b30      	ldr	r3, [pc, #192]	; (8006a10 <HAL_GPIO_Init+0x334>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006970:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <HAL_GPIO_Init+0x334>)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <HAL_GPIO_Init+0x334>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	43db      	mvns	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4013      	ands	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800699a:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <HAL_GPIO_Init+0x334>)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <HAL_GPIO_Init+0x334>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069c4:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_GPIO_Init+0x334>)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	f67f ae90 	bls.w	80066f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3724      	adds	r7, #36	; 0x24
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40020000 	.word	0x40020000
 80069f4:	40020400 	.word	0x40020400
 80069f8:	40020800 	.word	0x40020800
 80069fc:	40020c00 	.word	0x40020c00
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40021400 	.word	0x40021400
 8006a08:	40021800 	.word	0x40021800
 8006a0c:	40021c00 	.word	0x40021c00
 8006a10:	40013c00 	.word	0x40013c00

08006a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
 8006a20:	4613      	mov	r3, r2
 8006a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a24:	787b      	ldrb	r3, [r7, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a30:	e003      	b.n	8006a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a32:	887b      	ldrh	r3, [r7, #2]
 8006a34:	041a      	lsls	r2, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e12b      	b.n	8006cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fe f9ec 	bl	8004e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	; 0x24
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006aac:	f001 fbe4 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 8006ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4a81      	ldr	r2, [pc, #516]	; (8006cbc <HAL_I2C_Init+0x274>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d807      	bhi.n	8006acc <HAL_I2C_Init+0x84>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a80      	ldr	r2, [pc, #512]	; (8006cc0 <HAL_I2C_Init+0x278>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	bf94      	ite	ls
 8006ac4:	2301      	movls	r3, #1
 8006ac6:	2300      	movhi	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e006      	b.n	8006ada <HAL_I2C_Init+0x92>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a7d      	ldr	r2, [pc, #500]	; (8006cc4 <HAL_I2C_Init+0x27c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bf94      	ite	ls
 8006ad4:	2301      	movls	r3, #1
 8006ad6:	2300      	movhi	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e0e7      	b.n	8006cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a78      	ldr	r2, [pc, #480]	; (8006cc8 <HAL_I2C_Init+0x280>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	0c9b      	lsrs	r3, r3, #18
 8006aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a6a      	ldr	r2, [pc, #424]	; (8006cbc <HAL_I2C_Init+0x274>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d802      	bhi.n	8006b1c <HAL_I2C_Init+0xd4>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	e009      	b.n	8006b30 <HAL_I2C_Init+0xe8>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	4a69      	ldr	r2, [pc, #420]	; (8006ccc <HAL_I2C_Init+0x284>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	099b      	lsrs	r3, r3, #6
 8006b2e:	3301      	adds	r3, #1
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	495c      	ldr	r1, [pc, #368]	; (8006cbc <HAL_I2C_Init+0x274>)
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	d819      	bhi.n	8006b84 <HAL_I2C_Init+0x13c>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1e59      	subs	r1, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b64:	400b      	ands	r3, r1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_I2C_Init+0x138>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1e59      	subs	r1, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b7e:	e051      	b.n	8006c24 <HAL_I2C_Init+0x1dc>
 8006b80:	2304      	movs	r3, #4
 8006b82:	e04f      	b.n	8006c24 <HAL_I2C_Init+0x1dc>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d111      	bne.n	8006bb0 <HAL_I2C_Init+0x168>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	1e58      	subs	r0, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	440b      	add	r3, r1
 8006b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	e012      	b.n	8006bd6 <HAL_I2C_Init+0x18e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1e58      	subs	r0, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	0099      	lsls	r1, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bf0c      	ite	eq
 8006bd0:	2301      	moveq	r3, #1
 8006bd2:	2300      	movne	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_I2C_Init+0x196>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e022      	b.n	8006c24 <HAL_I2C_Init+0x1dc>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10e      	bne.n	8006c04 <HAL_I2C_Init+0x1bc>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1e58      	subs	r0, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6859      	ldr	r1, [r3, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	440b      	add	r3, r1
 8006bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c02:	e00f      	b.n	8006c24 <HAL_I2C_Init+0x1dc>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	1e58      	subs	r0, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6859      	ldr	r1, [r3, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	0099      	lsls	r1, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	6809      	ldr	r1, [r1, #0]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69da      	ldr	r2, [r3, #28]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6911      	ldr	r1, [r2, #16]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68d2      	ldr	r2, [r2, #12]
 8006c5e:	4311      	orrs	r1, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	000186a0 	.word	0x000186a0
 8006cc0:	001e847f 	.word	0x001e847f
 8006cc4:	003d08ff 	.word	0x003d08ff
 8006cc8:	431bde83 	.word	0x431bde83
 8006ccc:	10624dd3 	.word	0x10624dd3

08006cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	817b      	strh	r3, [r7, #10]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	813b      	strh	r3, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cea:	f7fe fc9d 	bl	8005628 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	f040 80d9 	bne.w	8006eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	2319      	movs	r3, #25
 8006d04:	2201      	movs	r2, #1
 8006d06:	496d      	ldr	r1, [pc, #436]	; (8006ebc <HAL_I2C_Mem_Write+0x1ec>)
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fc7f 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e0cc      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_I2C_Mem_Write+0x56>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e0c5      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d007      	beq.n	8006d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2221      	movs	r2, #33	; 0x21
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2240      	movs	r2, #64	; 0x40
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a4d      	ldr	r2, [pc, #308]	; (8006ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d8e:	88f8      	ldrh	r0, [r7, #6]
 8006d90:	893a      	ldrh	r2, [r7, #8]
 8006d92:	8979      	ldrh	r1, [r7, #10]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fab6 	bl	8007310 <I2C_RequestMemoryWrite>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d052      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e081      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fd00 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d107      	bne.n	8006dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e06b      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d11b      	bne.n	8006e50 <HAL_I2C_Mem_Write+0x180>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d017      	beq.n	8006e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1aa      	bne.n	8006dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fcec 	bl	800783a <I2C_WaitOnBTFFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d107      	bne.n	8006e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e016      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	00100002 	.word	0x00100002
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	; 0x30
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	813b      	strh	r3, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ede:	f7fe fba3 	bl	8005628 <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	f040 8208 	bne.w	8007302 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	2319      	movs	r3, #25
 8006ef8:	2201      	movs	r2, #1
 8006efa:	497b      	ldr	r1, [pc, #492]	; (80070e8 <HAL_I2C_Mem_Read+0x224>)
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fb85 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e1fb      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_I2C_Mem_Read+0x56>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e1f4      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d007      	beq.n	8006f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2222      	movs	r2, #34	; 0x22
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2240      	movs	r2, #64	; 0x40
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	; (80070ec <HAL_I2C_Mem_Read+0x228>)
 8006f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f82:	88f8      	ldrh	r0, [r7, #6]
 8006f84:	893a      	ldrh	r2, [r7, #8]
 8006f86:	8979      	ldrh	r1, [r7, #10]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4603      	mov	r3, r0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fa52 	bl	800743c <I2C_RequestMemoryRead>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e1b0      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006faa:	2300      	movs	r3, #0
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e184      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d11b      	bne.n	8007012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e164      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007016:	2b02      	cmp	r3, #2
 8007018:	d11b      	bne.n	8007052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	e144      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007068:	e138      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706e:	2b03      	cmp	r3, #3
 8007070:	f200 80f1 	bhi.w	8007256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007078:	2b01      	cmp	r3, #1
 800707a:	d123      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fc1b 	bl	80078bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e139      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070c2:	e10b      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d14e      	bne.n	800716a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	2200      	movs	r2, #0
 80070d4:	4906      	ldr	r1, [pc, #24]	; (80070f0 <HAL_I2C_Mem_Read+0x22c>)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa98 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e10e      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
 80070e6:	bf00      	nop
 80070e8:	00100002 	.word	0x00100002
 80070ec:	ffff0000 	.word	0xffff0000
 80070f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007168:	e0b8      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	2200      	movs	r2, #0
 8007172:	4966      	ldr	r1, [pc, #408]	; (800730c <HAL_I2C_Mem_Read+0x448>)
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa49 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0bf      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2200      	movs	r2, #0
 80071ce:	494f      	ldr	r1, [pc, #316]	; (800730c <HAL_I2C_Mem_Read+0x448>)
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fa1b 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e091      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007254:	e042      	b.n	80072dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fb2e 	bl	80078bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e04c      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d118      	bne.n	80072dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f aec2 	bne.w	800706a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	; 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	00010004 	.word	0x00010004

08007310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4603      	mov	r3, r0
 8007320:	817b      	strh	r3, [r7, #10]
 8007322:	460b      	mov	r3, r1
 8007324:	813b      	strh	r3, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2200      	movs	r2, #0
 8007342:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f960 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007360:	d103      	bne.n	800736a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e05f      	b.n	800742e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800736e:	897b      	ldrh	r3, [r7, #10]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800737c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	492d      	ldr	r1, [pc, #180]	; (8007438 <I2C_RequestMemoryWrite+0x128>)
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f998 	bl	80076ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e04c      	b.n	800742e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ac:	6a39      	ldr	r1, [r7, #32]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fa02 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d107      	bne.n	80073d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e02b      	b.n	800742e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d105      	bne.n	80073e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073dc:	893b      	ldrh	r3, [r7, #8]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	611a      	str	r2, [r3, #16]
 80073e6:	e021      	b.n	800742c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073e8:	893b      	ldrh	r3, [r7, #8]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	6a39      	ldr	r1, [r7, #32]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f9dc 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00d      	beq.n	8007422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b04      	cmp	r3, #4
 800740c:	d107      	bne.n	800741e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e005      	b.n	800742e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	00010002 	.word	0x00010002

0800743c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4603      	mov	r3, r0
 800744c:	817b      	strh	r3, [r7, #10]
 800744e:	460b      	mov	r3, r1
 8007450:	813b      	strh	r3, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	2200      	movs	r2, #0
 800747e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f8c2 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00d      	beq.n	80074aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749c:	d103      	bne.n	80074a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e0aa      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074aa:	897b      	ldrh	r3, [r7, #10]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	6a3a      	ldr	r2, [r7, #32]
 80074be:	4952      	ldr	r1, [pc, #328]	; (8007608 <I2C_RequestMemoryRead+0x1cc>)
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f8fa 	bl	80076ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e097      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	6a39      	ldr	r1, [r7, #32]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f964 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d107      	bne.n	800750e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e076      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d105      	bne.n	8007524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007518:	893b      	ldrh	r3, [r7, #8]
 800751a:	b2da      	uxtb	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	611a      	str	r2, [r3, #16]
 8007522:	e021      	b.n	8007568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007524:	893b      	ldrh	r3, [r7, #8]
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	b29b      	uxth	r3, r3
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007534:	6a39      	ldr	r1, [r7, #32]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f93e 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00d      	beq.n	800755e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b04      	cmp	r3, #4
 8007548:	d107      	bne.n	800755a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e050      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800755e:	893b      	ldrh	r3, [r7, #8]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	6a39      	ldr	r1, [r7, #32]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 f923 	bl	80077b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	2b04      	cmp	r3, #4
 800757e:	d107      	bne.n	8007590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e035      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f82b 	bl	800760c <I2C_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00d      	beq.n	80075d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ca:	d103      	bne.n	80075d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e013      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075d8:	897b      	ldrh	r3, [r7, #10]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	4906      	ldr	r1, [pc, #24]	; (8007608 <I2C_RequestMemoryRead+0x1cc>)
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f863 	bl	80076ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	00010002 	.word	0x00010002

0800760c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800761c:	e025      	b.n	800766a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d021      	beq.n	800766a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7fd ffff 	bl	8005628 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d116      	bne.n	800766a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	f043 0220 	orr.w	r2, r3, #32
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e023      	b.n	80076b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10d      	bne.n	8007690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	43da      	mvns	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf0c      	ite	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	2300      	movne	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	e00c      	b.n	80076aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	43da      	mvns	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d0b6      	beq.n	800761e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076c8:	e051      	b.n	800776e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d8:	d123      	bne.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e046      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d021      	beq.n	800776e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772a:	f7fd ff7d 	bl	8005628 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d116      	bne.n	800776e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e020      	b.n	80077b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	0c1b      	lsrs	r3, r3, #16
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10c      	bne.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	43da      	mvns	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e00b      	b.n	80077aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	43da      	mvns	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4013      	ands	r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d18d      	bne.n	80076ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c4:	e02d      	b.n	8007822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f8ce 	bl	8007968 <I2C_IsAcknowledgeFailed>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e02d      	b.n	8007832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d021      	beq.n	8007822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fd ff23 	bl	8005628 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d116      	bne.n	8007822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f043 0220 	orr.w	r2, r3, #32
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e007      	b.n	8007832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d1ca      	bne.n	80077c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007846:	e02d      	b.n	80078a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f88d 	bl	8007968 <I2C_IsAcknowledgeFailed>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e02d      	b.n	80078b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d021      	beq.n	80078a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007860:	f7fd fee2 	bl	8005628 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d116      	bne.n	80078a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	f043 0220 	orr.w	r2, r3, #32
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e007      	b.n	80078b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d1ca      	bne.n	8007848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078c8:	e042      	b.n	8007950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d119      	bne.n	800790c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0210 	mvn.w	r2, #16
 80078e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e029      	b.n	8007960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790c:	f7fd fe8c 	bl	8005628 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	d302      	bcc.n	8007922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d116      	bne.n	8007950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f043 0220 	orr.w	r2, r3, #32
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e007      	b.n	8007960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d1b5      	bne.n	80078ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797e:	d11b      	bne.n	80079b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	f043 0204 	orr.w	r2, r3, #4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_PWR_EnableBkUpAccess+0x24>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80079da:	687b      	ldr	r3, [r7, #4]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	420e0020 	.word	0x420e0020
 80079ec:	40007000 	.word	0x40007000

080079f0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_PWR_DisableBkUpAccess+0x20>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <HAL_PWR_DisableBkUpAccess+0x24>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007a02:	687b      	ldr	r3, [r7, #4]
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	420e0020 	.word	0x420e0020
 8007a14:	40007000 	.word	0x40007000

08007a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e267      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d075      	beq.n	8007b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a36:	4b88      	ldr	r3, [pc, #544]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d00c      	beq.n	8007a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a42:	4b85      	ldr	r3, [pc, #532]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d112      	bne.n	8007a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a4e:	4b82      	ldr	r3, [pc, #520]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5a:	d10b      	bne.n	8007a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5c:	4b7e      	ldr	r3, [pc, #504]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d05b      	beq.n	8007b20 <HAL_RCC_OscConfig+0x108>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d157      	bne.n	8007b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e242      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCC_OscConfig+0x74>
 8007a7e:	4b76      	ldr	r3, [pc, #472]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a75      	ldr	r2, [pc, #468]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e01d      	b.n	8007ac8 <HAL_RCC_OscConfig+0xb0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a94:	d10c      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x98>
 8007a96:	4b70      	ldr	r3, [pc, #448]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a6f      	ldr	r2, [pc, #444]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4b6d      	ldr	r3, [pc, #436]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a6c      	ldr	r2, [pc, #432]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	e00b      	b.n	8007ac8 <HAL_RCC_OscConfig+0xb0>
 8007ab0:	4b69      	ldr	r3, [pc, #420]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a68      	ldr	r2, [pc, #416]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4b66      	ldr	r3, [pc, #408]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d013      	beq.n	8007af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fd fdaa 	bl	8005628 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fd fda6 	bl	8005628 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	; 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e207      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aea:	4b5b      	ldr	r3, [pc, #364]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0xc0>
 8007af6:	e014      	b.n	8007b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af8:	f7fd fd96 	bl	8005628 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b00:	f7fd fd92 	bl	8005628 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b64      	cmp	r3, #100	; 0x64
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e1f3      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b12:	4b51      	ldr	r3, [pc, #324]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0xe8>
 8007b1e:	e000      	b.n	8007b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d063      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b2e:	4b4a      	ldr	r3, [pc, #296]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3a:	4b47      	ldr	r3, [pc, #284]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d11c      	bne.n	8007b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b46:	4b44      	ldr	r3, [pc, #272]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d116      	bne.n	8007b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b52:	4b41      	ldr	r3, [pc, #260]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_RCC_OscConfig+0x152>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e1c7      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6a:	4b3b      	ldr	r3, [pc, #236]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4937      	ldr	r1, [pc, #220]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b7e:	e03a      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d020      	beq.n	8007bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCC_OscConfig+0x244>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8e:	f7fd fd4b 	bl	8005628 <HAL_GetTick>
 8007b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b96:	f7fd fd47 	bl	8005628 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e1a8      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0f0      	beq.n	8007b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb4:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	4925      	ldr	r1, [pc, #148]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	600b      	str	r3, [r1, #0]
 8007bc8:	e015      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <HAL_RCC_OscConfig+0x244>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fd fd2a 	bl	8005628 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fd fd26 	bl	8005628 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e187      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bea:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d036      	beq.n	8007c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0a:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <HAL_RCC_OscConfig+0x248>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c10:	f7fd fd0a 	bl	8005628 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c18:	f7fd fd06 	bl	8005628 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e167      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0x200>
 8007c36:	e01b      	b.n	8007c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_RCC_OscConfig+0x248>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c3e:	f7fd fcf3 	bl	8005628 <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c44:	e00e      	b.n	8007c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c46:	f7fd fcef 	bl	8005628 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d907      	bls.n	8007c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e150      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	42470000 	.word	0x42470000
 8007c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c64:	4b88      	ldr	r3, [pc, #544]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1ea      	bne.n	8007c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8097 	beq.w	8007dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c82:	4b81      	ldr	r3, [pc, #516]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10f      	bne.n	8007cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	4b7d      	ldr	r3, [pc, #500]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	4a7c      	ldr	r2, [pc, #496]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9e:	4b7a      	ldr	r3, [pc, #488]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cae:	4b77      	ldr	r3, [pc, #476]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d118      	bne.n	8007cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cba:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a73      	ldr	r2, [pc, #460]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc6:	f7fd fcaf 	bl	8005628 <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cce:	f7fd fcab 	bl	8005628 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e10c      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce0:	4b6a      	ldr	r3, [pc, #424]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCC_OscConfig+0x2ea>
 8007cf4:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	4a63      	ldr	r2, [pc, #396]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007d00:	e01c      	b.n	8007d3c <HAL_RCC_OscConfig+0x324>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d10c      	bne.n	8007d24 <HAL_RCC_OscConfig+0x30c>
 8007d0a:	4b5f      	ldr	r3, [pc, #380]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	4a5e      	ldr	r2, [pc, #376]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d10:	f043 0304 	orr.w	r3, r3, #4
 8007d14:	6713      	str	r3, [r2, #112]	; 0x70
 8007d16:	4b5c      	ldr	r3, [pc, #368]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	4a5b      	ldr	r2, [pc, #364]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6713      	str	r3, [r2, #112]	; 0x70
 8007d22:	e00b      	b.n	8007d3c <HAL_RCC_OscConfig+0x324>
 8007d24:	4b58      	ldr	r3, [pc, #352]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d28:	4a57      	ldr	r2, [pc, #348]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d30:	4b55      	ldr	r3, [pc, #340]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	4a54      	ldr	r2, [pc, #336]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d36:	f023 0304 	bic.w	r3, r3, #4
 8007d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7fd fc70 	bl	8005628 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fd fc6c 	bl	8005628 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e0cb      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d62:	4b49      	ldr	r3, [pc, #292]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0ee      	beq.n	8007d4c <HAL_RCC_OscConfig+0x334>
 8007d6e:	e014      	b.n	8007d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d70:	f7fd fc5a 	bl	8005628 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d78:	f7fd fc56 	bl	8005628 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e0b5      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d8e:	4b3e      	ldr	r3, [pc, #248]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1ee      	bne.n	8007d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d105      	bne.n	8007dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80a1 	beq.w	8007ef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007db6:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d05c      	beq.n	8007e7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d141      	bne.n	8007e4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fd fc2a 	bl	8005628 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fd fc26 	bl	8005628 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e087      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b27      	ldr	r3, [pc, #156]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69da      	ldr	r2, [r3, #28]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	491b      	ldr	r1, [pc, #108]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e20:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e26:	f7fd fbff 	bl	8005628 <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e2e:	f7fd fbfb 	bl	8005628 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e05c      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0f0      	beq.n	8007e2e <HAL_RCC_OscConfig+0x416>
 8007e4c:	e054      	b.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e54:	f7fd fbe8 	bl	8005628 <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e5c:	f7fd fbe4 	bl	8005628 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e045      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f0      	bne.n	8007e5c <HAL_RCC_OscConfig+0x444>
 8007e7a:	e03d      	b.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e038      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	40007000 	.word	0x40007000
 8007e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <HAL_RCC_OscConfig+0x4ec>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d028      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d121      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d11a      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d111      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	3b01      	subs	r3, #1
 8007ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d107      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40023800 	.word	0x40023800

08007f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0cc      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f1c:	4b68      	ldr	r3, [pc, #416]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d90c      	bls.n	8007f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2a:	4b65      	ldr	r3, [pc, #404]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f32:	4b63      	ldr	r3, [pc, #396]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0b8      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d020      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f5c:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	4a58      	ldr	r2, [pc, #352]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f74:	4b53      	ldr	r3, [pc, #332]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	4a52      	ldr	r2, [pc, #328]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f80:	4b50      	ldr	r3, [pc, #320]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	494d      	ldr	r1, [pc, #308]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d044      	beq.n	8008028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa6:	4b47      	ldr	r3, [pc, #284]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d119      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e07f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d003      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc6:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e06f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd6:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e067      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fe6:	4b37      	ldr	r3, [pc, #220]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 0203 	bic.w	r2, r3, #3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4934      	ldr	r1, [pc, #208]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff8:	f7fd fb16 	bl	8005628 <HAL_GetTick>
 8007ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffe:	e00a      	b.n	8008016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008000:	f7fd fb12 	bl	8005628 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	f241 3288 	movw	r2, #5000	; 0x1388
 800800e:	4293      	cmp	r3, r2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e04f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 020c 	and.w	r2, r3, #12
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	429a      	cmp	r2, r3
 8008026:	d1eb      	bne.n	8008000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d20c      	bcs.n	8008050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800803e:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d001      	beq.n	8008050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e032      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800805c:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4916      	ldr	r1, [pc, #88]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800806a:	4313      	orrs	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	490e      	ldr	r1, [pc, #56]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800808e:	f000 f821 	bl	80080d4 <HAL_RCC_GetSysClockFreq>
 8008092:	4602      	mov	r2, r0
 8008094:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	490a      	ldr	r1, [pc, #40]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 80080a0:	5ccb      	ldrb	r3, [r1, r3]
 80080a2:	fa22 f303 	lsr.w	r3, r2, r3
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 80080a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <HAL_RCC_ClockConfig+0x1c8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd f944 	bl	800533c <HAL_InitTick>

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40023c00 	.word	0x40023c00
 80080c4:	40023800 	.word	0x40023800
 80080c8:	0800e998 	.word	0x0800e998
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	20000010 	.word	0x20000010

080080d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d8:	b090      	sub	sp, #64	; 0x40
 80080da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e4:	2300      	movs	r3, #0
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080ec:	4b59      	ldr	r3, [pc, #356]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 030c 	and.w	r3, r3, #12
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d00d      	beq.n	8008114 <HAL_RCC_GetSysClockFreq+0x40>
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	f200 80a1 	bhi.w	8008240 <HAL_RCC_GetSysClockFreq+0x16c>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_RCC_GetSysClockFreq+0x34>
 8008102:	2b04      	cmp	r3, #4
 8008104:	d003      	beq.n	800810e <HAL_RCC_GetSysClockFreq+0x3a>
 8008106:	e09b      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008108:	4b53      	ldr	r3, [pc, #332]	; (8008258 <HAL_RCC_GetSysClockFreq+0x184>)
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800810c:	e09b      	b.n	8008246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800810e:	4b53      	ldr	r3, [pc, #332]	; (800825c <HAL_RCC_GetSysClockFreq+0x188>)
 8008110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008112:	e098      	b.n	8008246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008114:	4b4f      	ldr	r3, [pc, #316]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800811e:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d028      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812a:	4b4a      	ldr	r3, [pc, #296]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	099b      	lsrs	r3, r3, #6
 8008130:	2200      	movs	r2, #0
 8008132:	623b      	str	r3, [r7, #32]
 8008134:	627a      	str	r2, [r7, #36]	; 0x24
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800813c:	2100      	movs	r1, #0
 800813e:	4b47      	ldr	r3, [pc, #284]	; (800825c <HAL_RCC_GetSysClockFreq+0x188>)
 8008140:	fb03 f201 	mul.w	r2, r3, r1
 8008144:	2300      	movs	r3, #0
 8008146:	fb00 f303 	mul.w	r3, r0, r3
 800814a:	4413      	add	r3, r2
 800814c:	4a43      	ldr	r2, [pc, #268]	; (800825c <HAL_RCC_GetSysClockFreq+0x188>)
 800814e:	fba0 1202 	umull	r1, r2, r0, r2
 8008152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008154:	460a      	mov	r2, r1
 8008156:	62ba      	str	r2, [r7, #40]	; 0x28
 8008158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800815a:	4413      	add	r3, r2
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	2200      	movs	r2, #0
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	61fa      	str	r2, [r7, #28]
 8008166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800816a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800816e:	f7f8 fd45 	bl	8000bfc <__aeabi_uldivmod>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4613      	mov	r3, r2
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817a:	e053      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800817c:	4b35      	ldr	r3, [pc, #212]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	099b      	lsrs	r3, r3, #6
 8008182:	2200      	movs	r2, #0
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	617a      	str	r2, [r7, #20]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800818e:	f04f 0b00 	mov.w	fp, #0
 8008192:	4652      	mov	r2, sl
 8008194:	465b      	mov	r3, fp
 8008196:	f04f 0000 	mov.w	r0, #0
 800819a:	f04f 0100 	mov.w	r1, #0
 800819e:	0159      	lsls	r1, r3, #5
 80081a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081a4:	0150      	lsls	r0, r2, #5
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	ebb2 080a 	subs.w	r8, r2, sl
 80081ae:	eb63 090b 	sbc.w	r9, r3, fp
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80081c6:	ebb2 0408 	subs.w	r4, r2, r8
 80081ca:	eb63 0509 	sbc.w	r5, r3, r9
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	00eb      	lsls	r3, r5, #3
 80081d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081dc:	00e2      	lsls	r2, r4, #3
 80081de:	4614      	mov	r4, r2
 80081e0:	461d      	mov	r5, r3
 80081e2:	eb14 030a 	adds.w	r3, r4, sl
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	eb45 030b 	adc.w	r3, r5, fp
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081fa:	4629      	mov	r1, r5
 80081fc:	028b      	lsls	r3, r1, #10
 80081fe:	4621      	mov	r1, r4
 8008200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008204:	4621      	mov	r1, r4
 8008206:	028a      	lsls	r2, r1, #10
 8008208:	4610      	mov	r0, r2
 800820a:	4619      	mov	r1, r3
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	2200      	movs	r2, #0
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	60fa      	str	r2, [r7, #12]
 8008214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008218:	f7f8 fcf0 	bl	8000bfc <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4613      	mov	r3, r2
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008224:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <HAL_RCC_GetSysClockFreq+0x180>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	3301      	adds	r3, #1
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	fbb2 f3f3 	udiv	r3, r2, r3
 800823c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800823e:	e002      	b.n	8008246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <HAL_RCC_GetSysClockFreq+0x184>)
 8008242:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008248:	4618      	mov	r0, r3
 800824a:	3740      	adds	r7, #64	; 0x40
 800824c:	46bd      	mov	sp, r7
 800824e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800
 8008258:	00f42400 	.word	0x00f42400
 800825c:	017d7840 	.word	0x017d7840

08008260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008264:	4b03      	ldr	r3, [pc, #12]	; (8008274 <HAL_RCC_GetHCLKFreq+0x14>)
 8008266:	681b      	ldr	r3, [r3, #0]
}
 8008268:	4618      	mov	r0, r3
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c

08008278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800827c:	f7ff fff0 	bl	8008260 <HAL_RCC_GetHCLKFreq>
 8008280:	4602      	mov	r2, r0
 8008282:	4b05      	ldr	r3, [pc, #20]	; (8008298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	0a9b      	lsrs	r3, r3, #10
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	4903      	ldr	r1, [pc, #12]	; (800829c <HAL_RCC_GetPCLK1Freq+0x24>)
 800828e:	5ccb      	ldrb	r3, [r1, r3]
 8008290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	bd80      	pop	{r7, pc}
 8008298:	40023800 	.word	0x40023800
 800829c:	0800e9a8 	.word	0x0800e9a8

080082a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082a4:	f7ff ffdc 	bl	8008260 <HAL_RCC_GetHCLKFreq>
 80082a8:	4602      	mov	r2, r0
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	0b5b      	lsrs	r3, r3, #13
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	4903      	ldr	r1, [pc, #12]	; (80082c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082b6:	5ccb      	ldrb	r3, [r1, r3]
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082bc:	4618      	mov	r0, r3
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40023800 	.word	0x40023800
 80082c4:	0800e9a8 	.word	0x0800e9a8

080082c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220f      	movs	r2, #15
 80082d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <HAL_RCC_GetClockConfig+0x5c>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 0203 	and.w	r2, r3, #3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <HAL_RCC_GetClockConfig+0x5c>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082f0:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <HAL_RCC_GetClockConfig+0x5c>)
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082fc:	4b09      	ldr	r3, [pc, #36]	; (8008324 <HAL_RCC_GetClockConfig+0x5c>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	08db      	lsrs	r3, r3, #3
 8008302:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <HAL_RCC_GetClockConfig+0x60>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0207 	and.w	r2, r3, #7
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40023800 	.word	0x40023800
 8008328:	40023c00 	.word	0x40023c00

0800832c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e041      	b.n	80083c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fc fdc2 	bl	8004edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f001 f864 	bl	8009438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e046      	b.n	8008472 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a23      	ldr	r2, [pc, #140]	; (8008480 <HAL_TIM_Base_Start+0xb4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d022      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fe:	d01d      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1f      	ldr	r2, [pc, #124]	; (8008484 <HAL_TIM_Base_Start+0xb8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <HAL_TIM_Base_Start+0xbc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1c      	ldr	r2, [pc, #112]	; (800848c <HAL_TIM_Base_Start+0xc0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <HAL_TIM_Base_Start+0xc4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a19      	ldr	r2, [pc, #100]	; (8008494 <HAL_TIM_Base_Start+0xc8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_TIM_Base_Start+0x70>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <HAL_TIM_Base_Start+0xcc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d111      	bne.n	8008460 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b06      	cmp	r3, #6
 800844c:	d010      	beq.n	8008470 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0201 	orr.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845e:	e007      	b.n	8008470 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40010000 	.word	0x40010000
 8008484:	40000400 	.word	0x40000400
 8008488:	40000800 	.word	0x40000800
 800848c:	40000c00 	.word	0x40000c00
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40001800 	.word	0x40001800

0800849c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d001      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e04e      	b.n	8008552 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a23      	ldr	r2, [pc, #140]	; (8008560 <HAL_TIM_Base_Start_IT+0xc4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d022      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d01d      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <HAL_TIM_Base_Start_IT+0xc8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d018      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_TIM_Base_Start_IT+0xcc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d013      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <HAL_TIM_Base_Start_IT+0xd0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00e      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <HAL_TIM_Base_Start_IT+0xd4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d009      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a19      	ldr	r2, [pc, #100]	; (8008574 <HAL_TIM_Base_Start_IT+0xd8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d004      	beq.n	800851c <HAL_TIM_Base_Start_IT+0x80>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a18      	ldr	r2, [pc, #96]	; (8008578 <HAL_TIM_Base_Start_IT+0xdc>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d111      	bne.n	8008540 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b06      	cmp	r3, #6
 800852c:	d010      	beq.n	8008550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853e:	e007      	b.n	8008550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	40010000 	.word	0x40010000
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40010400 	.word	0x40010400
 8008574:	40014000 	.word	0x40014000
 8008578:	40001800 	.word	0x40001800

0800857c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e041      	b.n	8008612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f839 	bl	800861a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f000 ff3c 	bl	8009438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d109      	bne.n	8008654 <HAL_TIM_PWM_Start+0x24>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	bf14      	ite	ne
 800864c:	2301      	movne	r3, #1
 800864e:	2300      	moveq	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	e022      	b.n	800869a <HAL_TIM_PWM_Start+0x6a>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b04      	cmp	r3, #4
 8008658:	d109      	bne.n	800866e <HAL_TIM_PWM_Start+0x3e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b01      	cmp	r3, #1
 8008664:	bf14      	ite	ne
 8008666:	2301      	movne	r3, #1
 8008668:	2300      	moveq	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	e015      	b.n	800869a <HAL_TIM_PWM_Start+0x6a>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b08      	cmp	r3, #8
 8008672:	d109      	bne.n	8008688 <HAL_TIM_PWM_Start+0x58>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	bf14      	ite	ne
 8008680:	2301      	movne	r3, #1
 8008682:	2300      	moveq	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	e008      	b.n	800869a <HAL_TIM_PWM_Start+0x6a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b01      	cmp	r3, #1
 8008692:	bf14      	ite	ne
 8008694:	2301      	movne	r3, #1
 8008696:	2300      	moveq	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e07c      	b.n	800879c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <HAL_TIM_PWM_Start+0x82>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b0:	e013      	b.n	80086da <HAL_TIM_PWM_Start+0xaa>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d104      	bne.n	80086c2 <HAL_TIM_PWM_Start+0x92>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c0:	e00b      	b.n	80086da <HAL_TIM_PWM_Start+0xaa>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d104      	bne.n	80086d2 <HAL_TIM_PWM_Start+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d0:	e003      	b.n	80086da <HAL_TIM_PWM_Start+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2201      	movs	r2, #1
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fabc 	bl	8009c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2d      	ldr	r2, [pc, #180]	; (80087a4 <HAL_TIM_PWM_Start+0x174>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_TIM_PWM_Start+0xcc>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <HAL_TIM_PWM_Start+0x178>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d101      	bne.n	8008700 <HAL_TIM_PWM_Start+0xd0>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <HAL_TIM_PWM_Start+0xd2>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <HAL_TIM_PWM_Start+0x174>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d022      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008728:	d01d      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1f      	ldr	r2, [pc, #124]	; (80087ac <HAL_TIM_PWM_Start+0x17c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1d      	ldr	r2, [pc, #116]	; (80087b0 <HAL_TIM_PWM_Start+0x180>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <HAL_TIM_PWM_Start+0x184>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a16      	ldr	r2, [pc, #88]	; (80087a8 <HAL_TIM_PWM_Start+0x178>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <HAL_TIM_PWM_Start+0x188>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_TIM_PWM_Start+0x136>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a16      	ldr	r2, [pc, #88]	; (80087bc <HAL_TIM_PWM_Start+0x18c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d111      	bne.n	800878a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b06      	cmp	r3, #6
 8008776:	d010      	beq.n	800879a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008788:	e007      	b.n	800879a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0201 	orr.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40010400 	.word	0x40010400
 80087ac:	40000400 	.word	0x40000400
 80087b0:	40000800 	.word	0x40000800
 80087b4:	40000c00 	.word	0x40000c00
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40001800 	.word	0x40001800

080087c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e041      	b.n	8008856 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fc fc78 	bl	80050dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f000 fe1a 	bl	8009438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <HAL_TIM_IC_Start_IT+0x1e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800887a:	b2db      	uxtb	r3, r3
 800887c:	e013      	b.n	80088a6 <HAL_TIM_IC_Start_IT+0x46>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b04      	cmp	r3, #4
 8008882:	d104      	bne.n	800888e <HAL_TIM_IC_Start_IT+0x2e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e00b      	b.n	80088a6 <HAL_TIM_IC_Start_IT+0x46>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b08      	cmp	r3, #8
 8008892:	d104      	bne.n	800889e <HAL_TIM_IC_Start_IT+0x3e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800889a:	b2db      	uxtb	r3, r3
 800889c:	e003      	b.n	80088a6 <HAL_TIM_IC_Start_IT+0x46>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d104      	bne.n	80088b8 <HAL_TIM_IC_Start_IT+0x58>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	e013      	b.n	80088e0 <HAL_TIM_IC_Start_IT+0x80>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d104      	bne.n	80088c8 <HAL_TIM_IC_Start_IT+0x68>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	e00b      	b.n	80088e0 <HAL_TIM_IC_Start_IT+0x80>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d104      	bne.n	80088d8 <HAL_TIM_IC_Start_IT+0x78>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	e003      	b.n	80088e0 <HAL_TIM_IC_Start_IT+0x80>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d102      	bne.n	80088ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80088e8:	7b7b      	ldrb	r3, [r7, #13]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d001      	beq.n	80088f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0cc      	b.n	8008a8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <HAL_TIM_IC_Start_IT+0xa2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008900:	e013      	b.n	800892a <HAL_TIM_IC_Start_IT+0xca>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b04      	cmp	r3, #4
 8008906:	d104      	bne.n	8008912 <HAL_TIM_IC_Start_IT+0xb2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008910:	e00b      	b.n	800892a <HAL_TIM_IC_Start_IT+0xca>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b08      	cmp	r3, #8
 8008916:	d104      	bne.n	8008922 <HAL_TIM_IC_Start_IT+0xc2>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008920:	e003      	b.n	800892a <HAL_TIM_IC_Start_IT+0xca>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_TIM_IC_Start_IT+0xda>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008938:	e013      	b.n	8008962 <HAL_TIM_IC_Start_IT+0x102>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b04      	cmp	r3, #4
 800893e:	d104      	bne.n	800894a <HAL_TIM_IC_Start_IT+0xea>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008948:	e00b      	b.n	8008962 <HAL_TIM_IC_Start_IT+0x102>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b08      	cmp	r3, #8
 800894e:	d104      	bne.n	800895a <HAL_TIM_IC_Start_IT+0xfa>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008958:	e003      	b.n	8008962 <HAL_TIM_IC_Start_IT+0x102>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b0c      	cmp	r3, #12
 8008966:	d841      	bhi.n	80089ec <HAL_TIM_IC_Start_IT+0x18c>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <HAL_TIM_IC_Start_IT+0x110>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089a5 	.word	0x080089a5
 8008974:	080089ed 	.word	0x080089ed
 8008978:	080089ed 	.word	0x080089ed
 800897c:	080089ed 	.word	0x080089ed
 8008980:	080089b7 	.word	0x080089b7
 8008984:	080089ed 	.word	0x080089ed
 8008988:	080089ed 	.word	0x080089ed
 800898c:	080089ed 	.word	0x080089ed
 8008990:	080089c9 	.word	0x080089c9
 8008994:	080089ed 	.word	0x080089ed
 8008998:	080089ed 	.word	0x080089ed
 800899c:	080089ed 	.word	0x080089ed
 80089a0:	080089db 	.word	0x080089db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0202 	orr.w	r2, r2, #2
 80089b2:	60da      	str	r2, [r3, #12]
      break;
 80089b4:	e01d      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0204 	orr.w	r2, r2, #4
 80089c4:	60da      	str	r2, [r3, #12]
      break;
 80089c6:	e014      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0208 	orr.w	r2, r2, #8
 80089d6:	60da      	str	r2, [r3, #12]
      break;
 80089d8:	e00b      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0210 	orr.w	r2, r2, #16
 80089e8:	60da      	str	r2, [r3, #12]
      break;
 80089ea:	e002      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
      break;
 80089f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d148      	bne.n	8008a8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2201      	movs	r2, #1
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f92d 	bl	8009c60 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a22      	ldr	r2, [pc, #136]	; (8008a94 <HAL_TIM_IC_Start_IT+0x234>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d022      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a18:	d01d      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <HAL_TIM_IC_Start_IT+0x238>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d018      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a1c      	ldr	r2, [pc, #112]	; (8008a9c <HAL_TIM_IC_Start_IT+0x23c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <HAL_TIM_IC_Start_IT+0x240>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00e      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <HAL_TIM_IC_Start_IT+0x244>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <HAL_TIM_IC_Start_IT+0x248>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d004      	beq.n	8008a56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a16      	ldr	r2, [pc, #88]	; (8008aac <HAL_TIM_IC_Start_IT+0x24c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d111      	bne.n	8008a7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d010      	beq.n	8008a8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	e007      	b.n	8008a8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0201 	orr.w	r2, r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40000400 	.word	0x40000400
 8008a9c:	40000800 	.word	0x40000800
 8008aa0:	40000c00 	.word	0x40000c00
 8008aa4:	40010400 	.word	0x40010400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40001800 	.word	0x40001800

08008ab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e097      	b.n	8008bf4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fc fa99 	bl	8005010 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 fc97 	bl	8009438 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	4313      	orrs	r3, r2
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b50:	f023 030c 	bic.w	r3, r3, #12
 8008b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	011a      	lsls	r2, r3, #4
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	031b      	lsls	r3, r3, #12
 8008b80:	4313      	orrs	r3, r2
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d110      	bne.n	8008c4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d102      	bne.n	8008c38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c32:	7b7b      	ldrb	r3, [r7, #13]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e069      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c4c:	e031      	b.n	8008cb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d110      	bne.n	8008c76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d102      	bne.n	8008c60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c5a:	7b3b      	ldrb	r3, [r7, #12]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d001      	beq.n	8008c64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e055      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c74:	e01d      	b.n	8008cb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d108      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d105      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c82:	7b7b      	ldrb	r3, [r7, #13]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d102      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c88:	7b3b      	ldrb	r3, [r7, #12]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e03e      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_TIM_Encoder_Start+0xc4>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d008      	beq.n	8008cd0 <HAL_TIM_Encoder_Start+0xd4>
 8008cbe:	e00f      	b.n	8008ce0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 ffc9 	bl	8009c60 <TIM_CCxChannelCmd>
      break;
 8008cce:	e016      	b.n	8008cfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	2104      	movs	r1, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 ffc1 	bl	8009c60 <TIM_CCxChannelCmd>
      break;
 8008cde:	e00e      	b.n	8008cfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 ffb9 	bl	8009c60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2104      	movs	r1, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 ffb2 	bl	8009c60 <TIM_CCxChannelCmd>
      break;
 8008cfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d122      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d11b      	bne.n	8008d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f06f 0202 	mvn.w	r2, #2
 8008d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f9 fb8c 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008d60:	e005      	b.n	8008d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fb4a 	bl	80093fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb51 	bl	8009410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d122      	bne.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b04      	cmp	r3, #4
 8008d8e:	d11b      	bne.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0204 	mvn.w	r2, #4
 8008d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7f9 fb62 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008db4:	e005      	b.n	8008dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fb20 	bl	80093fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb27 	bl	8009410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d122      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d11b      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f06f 0208 	mvn.w	r2, #8
 8008dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2204      	movs	r2, #4
 8008df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7f9 fb38 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008e08:	e005      	b.n	8008e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 faf6 	bl	80093fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fafd 	bl	8009410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b10      	cmp	r3, #16
 8008e28:	d122      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0310 	and.w	r3, r3, #16
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d11b      	bne.n	8008e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0210 	mvn.w	r2, #16
 8008e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2208      	movs	r2, #8
 8008e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 fb0e 	bl	8002478 <HAL_TIM_IC_CaptureCallback>
 8008e5c:	e005      	b.n	8008e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 facc 	bl	80093fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fad3 	bl	8009410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d10e      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d107      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0201 	mvn.w	r2, #1
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fb feb8 	bl	8004c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea6:	2b80      	cmp	r3, #128	; 0x80
 8008ea8:	d10e      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb4:	2b80      	cmp	r3, #128	; 0x80
 8008eb6:	d107      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 ffca 	bl	8009e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	d10e      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b40      	cmp	r3, #64	; 0x40
 8008ee2:	d107      	bne.n	8008ef4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa98 	bl	8009424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d10e      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d107      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0220 	mvn.w	r2, #32
 8008f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 ff94 	bl	8009e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008f42:	2302      	movs	r3, #2
 8008f44:	e088      	b.n	8009058 <HAL_TIM_IC_ConfigChannel+0x130>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11b      	bne.n	8008f8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f000 fcb8 	bl	80098d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f022 020c 	bic.w	r2, r2, #12
 8008f76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6999      	ldr	r1, [r3, #24]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	619a      	str	r2, [r3, #24]
 8008f8a:	e060      	b.n	800904e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d11c      	bne.n	8008fcc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f000 fd3c 	bl	8009a1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	699a      	ldr	r2, [r3, #24]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6999      	ldr	r1, [r3, #24]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	021a      	lsls	r2, r3, #8
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	619a      	str	r2, [r3, #24]
 8008fca:	e040      	b.n	800904e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b08      	cmp	r3, #8
 8008fd0:	d11b      	bne.n	800900a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6819      	ldr	r1, [r3, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f000 fd89 	bl	8009af8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 020c 	bic.w	r2, r2, #12
 8008ff4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69d9      	ldr	r1, [r3, #28]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	61da      	str	r2, [r3, #28]
 8009008:	e021      	b.n	800904e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	d11c      	bne.n	800904a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6819      	ldr	r1, [r3, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f000 fda6 	bl	8009b70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69da      	ldr	r2, [r3, #28]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009032:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69d9      	ldr	r1, [r3, #28]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	021a      	lsls	r2, r3, #8
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	61da      	str	r2, [r3, #28]
 8009048:	e001      	b.n	800904e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009056:	7dfb      	ldrb	r3, [r7, #23]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800907a:	2302      	movs	r3, #2
 800907c:	e0ae      	b.n	80091dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	f200 809f 	bhi.w	80091cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090c9 	.word	0x080090c9
 8009098:	080091cd 	.word	0x080091cd
 800909c:	080091cd 	.word	0x080091cd
 80090a0:	080091cd 	.word	0x080091cd
 80090a4:	08009109 	.word	0x08009109
 80090a8:	080091cd 	.word	0x080091cd
 80090ac:	080091cd 	.word	0x080091cd
 80090b0:	080091cd 	.word	0x080091cd
 80090b4:	0800914b 	.word	0x0800914b
 80090b8:	080091cd 	.word	0x080091cd
 80090bc:	080091cd 	.word	0x080091cd
 80090c0:	080091cd 	.word	0x080091cd
 80090c4:	0800918b 	.word	0x0800918b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fa52 	bl	8009578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0208 	orr.w	r2, r2, #8
 80090e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0204 	bic.w	r2, r2, #4
 80090f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6999      	ldr	r1, [r3, #24]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	619a      	str	r2, [r3, #24]
      break;
 8009106:	e064      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 faa2 	bl	8009658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699a      	ldr	r2, [r3, #24]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6999      	ldr	r1, [r3, #24]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	021a      	lsls	r2, r3, #8
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	619a      	str	r2, [r3, #24]
      break;
 8009148:	e043      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 faf7 	bl	8009744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0208 	orr.w	r2, r2, #8
 8009164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0204 	bic.w	r2, r2, #4
 8009174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69d9      	ldr	r1, [r3, #28]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	61da      	str	r2, [r3, #28]
      break;
 8009188:	e023      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fb4b 	bl	800982c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69d9      	ldr	r1, [r3, #28]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	021a      	lsls	r2, r3, #8
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	61da      	str	r2, [r3, #28]
      break;
 80091ca:	e002      	b.n	80091d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	75fb      	strb	r3, [r7, #23]
      break;
 80091d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d101      	bne.n	8009200 <HAL_TIM_ConfigClockSource+0x1c>
 80091fc:	2302      	movs	r3, #2
 80091fe:	e0b4      	b.n	800936a <HAL_TIM_ConfigClockSource+0x186>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800921e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009238:	d03e      	beq.n	80092b8 <HAL_TIM_ConfigClockSource+0xd4>
 800923a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800923e:	f200 8087 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009246:	f000 8086 	beq.w	8009356 <HAL_TIM_ConfigClockSource+0x172>
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924e:	d87f      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009250:	2b70      	cmp	r3, #112	; 0x70
 8009252:	d01a      	beq.n	800928a <HAL_TIM_ConfigClockSource+0xa6>
 8009254:	2b70      	cmp	r3, #112	; 0x70
 8009256:	d87b      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009258:	2b60      	cmp	r3, #96	; 0x60
 800925a:	d050      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x11a>
 800925c:	2b60      	cmp	r3, #96	; 0x60
 800925e:	d877      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b50      	cmp	r3, #80	; 0x50
 8009262:	d03c      	beq.n	80092de <HAL_TIM_ConfigClockSource+0xfa>
 8009264:	2b50      	cmp	r3, #80	; 0x50
 8009266:	d873      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009268:	2b40      	cmp	r3, #64	; 0x40
 800926a:	d058      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x13a>
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d86f      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009270:	2b30      	cmp	r3, #48	; 0x30
 8009272:	d064      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x15a>
 8009274:	2b30      	cmp	r3, #48	; 0x30
 8009276:	d86b      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009278:	2b20      	cmp	r3, #32
 800927a:	d060      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x15a>
 800927c:	2b20      	cmp	r3, #32
 800927e:	d867      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d05c      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x15a>
 8009284:	2b10      	cmp	r3, #16
 8009286:	d05a      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x15a>
 8009288:	e062      	b.n	8009350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	6899      	ldr	r1, [r3, #8]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f000 fcc1 	bl	8009c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	609a      	str	r2, [r3, #8]
      break;
 80092b6:	e04f      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6899      	ldr	r1, [r3, #8]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f000 fcaa 	bl	8009c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092da:	609a      	str	r2, [r3, #8]
      break;
 80092dc:	e03c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6859      	ldr	r1, [r3, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f000 fb68 	bl	80099c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2150      	movs	r1, #80	; 0x50
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fc77 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 80092fc:	e02c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6859      	ldr	r1, [r3, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	461a      	mov	r2, r3
 800930c:	f000 fbc4 	bl	8009a98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2160      	movs	r1, #96	; 0x60
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fc67 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800931c:	e01c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6859      	ldr	r1, [r3, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	461a      	mov	r2, r3
 800932c:	f000 fb48 	bl	80099c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2140      	movs	r1, #64	; 0x40
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fc57 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800933c:	e00c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	4610      	mov	r0, r2
 800934a:	f000 fc4e 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800934e:	e003      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e000      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b0c      	cmp	r3, #12
 8009386:	d831      	bhi.n	80093ec <HAL_TIM_ReadCapturedValue+0x78>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <HAL_TIM_ReadCapturedValue+0x1c>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093c5 	.word	0x080093c5
 8009394:	080093ed 	.word	0x080093ed
 8009398:	080093ed 	.word	0x080093ed
 800939c:	080093ed 	.word	0x080093ed
 80093a0:	080093cf 	.word	0x080093cf
 80093a4:	080093ed 	.word	0x080093ed
 80093a8:	080093ed 	.word	0x080093ed
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093ed 	.word	0x080093ed
 80093b8:	080093ed 	.word	0x080093ed
 80093bc:	080093ed 	.word	0x080093ed
 80093c0:	080093e3 	.word	0x080093e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	60fb      	str	r3, [r7, #12]

      break;
 80093cc:	e00f      	b.n	80093ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	60fb      	str	r3, [r7, #12]

      break;
 80093d6:	e00a      	b.n	80093ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	60fb      	str	r3, [r7, #12]

      break;
 80093e0:	e005      	b.n	80093ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	60fb      	str	r3, [r7, #12]

      break;
 80093ea:	e000      	b.n	80093ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80093ec:	bf00      	nop
  }

  return tmpreg;
 80093ee:	68fb      	ldr	r3, [r7, #12]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a40      	ldr	r2, [pc, #256]	; (800954c <TIM_Base_SetConfig+0x114>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <TIM_Base_SetConfig+0x40>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009456:	d00f      	beq.n	8009478 <TIM_Base_SetConfig+0x40>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a3d      	ldr	r2, [pc, #244]	; (8009550 <TIM_Base_SetConfig+0x118>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00b      	beq.n	8009478 <TIM_Base_SetConfig+0x40>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a3c      	ldr	r2, [pc, #240]	; (8009554 <TIM_Base_SetConfig+0x11c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a3b      	ldr	r2, [pc, #236]	; (8009558 <TIM_Base_SetConfig+0x120>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a3a      	ldr	r2, [pc, #232]	; (800955c <TIM_Base_SetConfig+0x124>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a2f      	ldr	r2, [pc, #188]	; (800954c <TIM_Base_SetConfig+0x114>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d02b      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d027      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a2c      	ldr	r2, [pc, #176]	; (8009550 <TIM_Base_SetConfig+0x118>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d023      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2b      	ldr	r2, [pc, #172]	; (8009554 <TIM_Base_SetConfig+0x11c>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d01f      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2a      	ldr	r2, [pc, #168]	; (8009558 <TIM_Base_SetConfig+0x120>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01b      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a29      	ldr	r2, [pc, #164]	; (800955c <TIM_Base_SetConfig+0x124>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d017      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a28      	ldr	r2, [pc, #160]	; (8009560 <TIM_Base_SetConfig+0x128>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d013      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a27      	ldr	r2, [pc, #156]	; (8009564 <TIM_Base_SetConfig+0x12c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00f      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a26      	ldr	r2, [pc, #152]	; (8009568 <TIM_Base_SetConfig+0x130>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00b      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a25      	ldr	r2, [pc, #148]	; (800956c <TIM_Base_SetConfig+0x134>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d007      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a24      	ldr	r2, [pc, #144]	; (8009570 <TIM_Base_SetConfig+0x138>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d003      	beq.n	80094ea <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a23      	ldr	r2, [pc, #140]	; (8009574 <TIM_Base_SetConfig+0x13c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d108      	bne.n	80094fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a0a      	ldr	r2, [pc, #40]	; (800954c <TIM_Base_SetConfig+0x114>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_Base_SetConfig+0xf8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a0c      	ldr	r2, [pc, #48]	; (800955c <TIM_Base_SetConfig+0x124>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d103      	bne.n	8009538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	615a      	str	r2, [r3, #20]
}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40010400 	.word	0x40010400
 8009560:	40014000 	.word	0x40014000
 8009564:	40014400 	.word	0x40014400
 8009568:	40014800 	.word	0x40014800
 800956c:	40001800 	.word	0x40001800
 8009570:	40001c00 	.word	0x40001c00
 8009574:	40002000 	.word	0x40002000

08009578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f023 0201 	bic.w	r2, r3, #1
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0303 	bic.w	r3, r3, #3
 80095ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f023 0302 	bic.w	r3, r3, #2
 80095c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a20      	ldr	r2, [pc, #128]	; (8009650 <TIM_OC1_SetConfig+0xd8>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <TIM_OC1_SetConfig+0x64>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a1f      	ldr	r2, [pc, #124]	; (8009654 <TIM_OC1_SetConfig+0xdc>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d10c      	bne.n	80095f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f023 0308 	bic.w	r3, r3, #8
 80095e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f023 0304 	bic.w	r3, r3, #4
 80095f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a15      	ldr	r2, [pc, #84]	; (8009650 <TIM_OC1_SetConfig+0xd8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d003      	beq.n	8009606 <TIM_OC1_SetConfig+0x8e>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a14      	ldr	r2, [pc, #80]	; (8009654 <TIM_OC1_SetConfig+0xdc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d111      	bne.n	800962a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800960c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	4313      	orrs	r3, r2
 800961e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	4313      	orrs	r3, r2
 8009628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	621a      	str	r2, [r3, #32]
}
 8009644:	bf00      	nop
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	40010000 	.word	0x40010000
 8009654:	40010400 	.word	0x40010400

08009658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	f023 0210 	bic.w	r2, r3, #16
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800968e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0320 	bic.w	r3, r3, #32
 80096a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a22      	ldr	r2, [pc, #136]	; (800973c <TIM_OC2_SetConfig+0xe4>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_OC2_SetConfig+0x68>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a21      	ldr	r2, [pc, #132]	; (8009740 <TIM_OC2_SetConfig+0xe8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d10d      	bne.n	80096dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a17      	ldr	r2, [pc, #92]	; (800973c <TIM_OC2_SetConfig+0xe4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d003      	beq.n	80096ec <TIM_OC2_SetConfig+0x94>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a16      	ldr	r2, [pc, #88]	; (8009740 <TIM_OC2_SetConfig+0xe8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d113      	bne.n	8009714 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	4313      	orrs	r3, r2
 8009706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000
 8009740:	40010400 	.word	0x40010400

08009744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800978c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a21      	ldr	r2, [pc, #132]	; (8009824 <TIM_OC3_SetConfig+0xe0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_OC3_SetConfig+0x66>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a20      	ldr	r2, [pc, #128]	; (8009828 <TIM_OC3_SetConfig+0xe4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d10d      	bne.n	80097c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a16      	ldr	r2, [pc, #88]	; (8009824 <TIM_OC3_SetConfig+0xe0>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d003      	beq.n	80097d6 <TIM_OC3_SetConfig+0x92>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a15      	ldr	r2, [pc, #84]	; (8009828 <TIM_OC3_SetConfig+0xe4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d113      	bne.n	80097fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	011b      	lsls	r3, r3, #4
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	621a      	str	r2, [r3, #32]
}
 8009818:	bf00      	nop
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	40010000 	.word	0x40010000
 8009828:	40010400 	.word	0x40010400

0800982c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800985a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	021b      	lsls	r3, r3, #8
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	4313      	orrs	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	031b      	lsls	r3, r3, #12
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	4313      	orrs	r3, r2
 8009882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <TIM_OC4_SetConfig+0xa4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_OC4_SetConfig+0x68>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <TIM_OC4_SetConfig+0xa8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d109      	bne.n	80098a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800989a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	019b      	lsls	r3, r3, #6
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	40010000 	.word	0x40010000
 80098d4:	40010400 	.word	0x40010400

080098d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	f023 0201 	bic.w	r2, r3, #1
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4a28      	ldr	r2, [pc, #160]	; (80099a4 <TIM_TI1_SetConfig+0xcc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d01b      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990c:	d017      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4a25      	ldr	r2, [pc, #148]	; (80099a8 <TIM_TI1_SetConfig+0xd0>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d013      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4a24      	ldr	r2, [pc, #144]	; (80099ac <TIM_TI1_SetConfig+0xd4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00f      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4a23      	ldr	r2, [pc, #140]	; (80099b0 <TIM_TI1_SetConfig+0xd8>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00b      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4a22      	ldr	r2, [pc, #136]	; (80099b4 <TIM_TI1_SetConfig+0xdc>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d007      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4a21      	ldr	r2, [pc, #132]	; (80099b8 <TIM_TI1_SetConfig+0xe0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_TI1_SetConfig+0x66>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4a20      	ldr	r2, [pc, #128]	; (80099bc <TIM_TI1_SetConfig+0xe4>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d101      	bne.n	8009942 <TIM_TI1_SetConfig+0x6a>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <TIM_TI1_SetConfig+0x6c>
 8009942:	2300      	movs	r3, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d008      	beq.n	800995a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e003      	b.n	8009962 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f043 0301 	orr.w	r3, r3, #1
 8009960:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	b2db      	uxtb	r3, r3
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f023 030a 	bic.w	r3, r3, #10
 800997c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f003 030a 	and.w	r3, r3, #10
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	4313      	orrs	r3, r2
 8009988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	621a      	str	r2, [r3, #32]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40001800 	.word	0x40001800

080099c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f023 0201 	bic.w	r2, r3, #1
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f023 030a 	bic.w	r3, r3, #10
 80099fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	621a      	str	r2, [r3, #32]
}
 8009a12:	bf00      	nop
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b087      	sub	sp, #28
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	f023 0210 	bic.w	r2, r3, #16
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	031b      	lsls	r3, r3, #12
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	621a      	str	r2, [r3, #32]
}
 8009a8c:	bf00      	nop
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	f023 0210 	bic.w	r2, r3, #16
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ac2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	031b      	lsls	r3, r3, #12
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	621a      	str	r2, [r3, #32]
}
 8009aec:	bf00      	nop
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f023 0303 	bic.w	r3, r3, #3
 8009b24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	621a      	str	r2, [r3, #32]
}
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	031b      	lsls	r3, r3, #12
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	031b      	lsls	r3, r3, #12
 8009bc8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f043 0307 	orr.w	r3, r3, #7
 8009c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	021a      	lsls	r2, r3, #8
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	431a      	orrs	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	609a      	str	r2, [r3, #8]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f003 031f 	and.w	r3, r3, #31
 8009c72:	2201      	movs	r2, #1
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a1a      	ldr	r2, [r3, #32]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	401a      	ands	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1a      	ldr	r2, [r3, #32]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f003 031f 	and.w	r3, r3, #31
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	fa01 f303 	lsl.w	r3, r1, r3
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	621a      	str	r2, [r3, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
	...

08009cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e05a      	b.n	8009d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a21      	ldr	r2, [pc, #132]	; (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d022      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d10:	d01d      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1d      	ldr	r2, [pc, #116]	; (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d018      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d013      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00e      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d009      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a17      	ldr	r2, [pc, #92]	; (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d004      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a15      	ldr	r2, [pc, #84]	; (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d10c      	bne.n	8009d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40000400 	.word	0x40000400
 8009d90:	40000800 	.word	0x40000800
 8009d94:	40000c00 	.word	0x40000c00
 8009d98:	40010400 	.word	0x40010400
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40001800 	.word	0x40001800

08009da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e03d      	b.n	8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e03f      	b.n	8009f02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d106      	bne.n	8009e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7fb fa00 	bl	800529c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2224      	movs	r2, #36	; 0x24
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fddf 	bl	800aa78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	695a      	ldr	r2, [r3, #20]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b08a      	sub	sp, #40	; 0x28
 8009f0e:	af02      	add	r7, sp, #8
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	603b      	str	r3, [r7, #0]
 8009f16:	4613      	mov	r3, r2
 8009f18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d17c      	bne.n	800a024 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <HAL_UART_Transmit+0x2c>
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e075      	b.n	800a026 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_UART_Transmit+0x3e>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e06e      	b.n	800a026 <HAL_UART_Transmit+0x11c>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2221      	movs	r2, #33	; 0x21
 8009f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f5e:	f7fb fb63 	bl	8005628 <HAL_GetTick>
 8009f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	88fa      	ldrh	r2, [r7, #6]
 8009f68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f78:	d108      	bne.n	8009f8c <HAL_UART_Transmit+0x82>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	e003      	b.n	8009f94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f9c:	e02a      	b.n	8009ff4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2180      	movs	r1, #128	; 0x80
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fb1f 	bl	800a5ec <UART_WaitOnFlagUntilTimeout>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e036      	b.n	800a026 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	3302      	adds	r3, #2
 8009fd2:	61bb      	str	r3, [r7, #24]
 8009fd4:	e007      	b.n	8009fe6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1cf      	bne.n	8009f9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2200      	movs	r2, #0
 800a006:	2140      	movs	r1, #64	; 0x40
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 faef 	bl	800a5ec <UART_WaitOnFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e006      	b.n	800a026 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	e000      	b.n	800a026 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a024:	2302      	movs	r3, #2
  }
}
 800a026:	4618      	mov	r0, r3
 800a028:	3720      	adds	r7, #32
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	4613      	mov	r3, r2
 800a03a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b20      	cmp	r3, #32
 800a046:	d11d      	bne.n	800a084 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_UART_Receive_IT+0x26>
 800a04e:	88fb      	ldrh	r3, [r7, #6]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e016      	b.n	800a086 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_UART_Receive_IT+0x38>
 800a062:	2302      	movs	r3, #2
 800a064:	e00f      	b.n	800a086 <HAL_UART_Receive_IT+0x58>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a074:	88fb      	ldrh	r3, [r7, #6]
 800a076:	461a      	mov	r2, r3
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fb24 	bl	800a6c8 <UART_Start_Receive_IT>
 800a080:	4603      	mov	r3, r0
 800a082:	e000      	b.n	800a086 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b0ba      	sub	sp, #232	; 0xe8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10f      	bne.n	800a0f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d009      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x66>
 800a0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fc07 	bl	800a902 <UART_Receive_IT>
      return;
 800a0f4:	e256      	b.n	800a5a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80de 	beq.w	800a2bc <HAL_UART_IRQHandler+0x22c>
 800a100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a110:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 80d1 	beq.w	800a2bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00b      	beq.n	800a13e <HAL_UART_IRQHandler+0xae>
 800a126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	f043 0201 	orr.w	r2, r3, #1
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <HAL_UART_IRQHandler+0xd2>
 800a14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	f043 0202 	orr.w	r2, r3, #2
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <HAL_UART_IRQHandler+0xf6>
 800a16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	f043 0204 	orr.w	r2, r3, #4
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18a:	f003 0308 	and.w	r3, r3, #8
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d011      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x126>
 800a192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d105      	bne.n	800a1aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a19e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	f043 0208 	orr.w	r2, r3, #8
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 81ed 	beq.w	800a59a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c4:	f003 0320 	and.w	r3, r3, #32
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d008      	beq.n	800a1de <HAL_UART_IRQHandler+0x14e>
 800a1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1d0:	f003 0320 	and.w	r3, r3, #32
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fb92 	bl	800a902 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e8:	2b40      	cmp	r3, #64	; 0x40
 800a1ea:	bf0c      	ite	eq
 800a1ec:	2301      	moveq	r3, #1
 800a1ee:	2300      	movne	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <HAL_UART_IRQHandler+0x17a>
 800a202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d04f      	beq.n	800a2aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fa9a 	bl	800a744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21a:	2b40      	cmp	r3, #64	; 0x40
 800a21c:	d141      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3314      	adds	r3, #20
 800a224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a23c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3314      	adds	r3, #20
 800a246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a24a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a24e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1d9      	bne.n	800a21e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d013      	beq.n	800a29a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	4a7d      	ldr	r2, [pc, #500]	; (800a46c <HAL_UART_IRQHandler+0x3dc>)
 800a278:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fb ffce 	bl	8006220 <HAL_DMA_Abort_IT>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d016      	beq.n	800a2b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a298:	e00e      	b.n	800a2b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f990 	bl	800a5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a0:	e00a      	b.n	800a2b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f98c 	bl	800a5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a8:	e006      	b.n	800a2b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f988 	bl	800a5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2b6:	e170      	b.n	800a59a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b8:	bf00      	nop
    return;
 800a2ba:	e16e      	b.n	800a59a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 814a 	bne.w	800a55a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 8143 	beq.w	800a55a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 813c 	beq.w	800a55a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60bb      	str	r3, [r7, #8]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a302:	2b40      	cmp	r3, #64	; 0x40
 800a304:	f040 80b4 	bne.w	800a470 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a314:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 8140 	beq.w	800a59e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a326:	429a      	cmp	r2, r3
 800a328:	f080 8139 	bcs.w	800a59e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a332:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33e:	f000 8088 	beq.w	800a452 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	330c      	adds	r3, #12
 800a348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a350:	e853 3f00 	ldrex	r3, [r3]
 800a354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a35c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	330c      	adds	r3, #12
 800a36a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a36e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a37a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1d9      	bne.n	800a342 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3314      	adds	r3, #20
 800a394:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a39e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3314      	adds	r3, #20
 800a3ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e1      	bne.n	800a38e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3314      	adds	r3, #20
 800a3ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e3      	bne.n	800a3ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2220      	movs	r2, #32
 800a406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	330c      	adds	r3, #12
 800a416:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a422:	f023 0310 	bic.w	r3, r3, #16
 800a426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	330c      	adds	r3, #12
 800a430:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a434:	65ba      	str	r2, [r7, #88]	; 0x58
 800a436:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a43a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e3      	bne.n	800a410 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fb fe77 	bl	8006140 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f8b6 	bl	800a5d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a468:	e099      	b.n	800a59e <HAL_UART_IRQHandler+0x50e>
 800a46a:	bf00      	nop
 800a46c:	0800a80b 	.word	0x0800a80b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a478:	b29b      	uxth	r3, r3
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 808b 	beq.w	800a5a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a48c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 8086 	beq.w	800a5a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	330c      	adds	r3, #12
 800a49c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	e853 3f00 	ldrex	r3, [r3]
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4ba:	647a      	str	r2, [r7, #68]	; 0x44
 800a4bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e3      	bne.n	800a496 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3314      	adds	r3, #20
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3314      	adds	r3, #20
 800a4ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4f2:	633a      	str	r2, [r7, #48]	; 0x30
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e3      	bne.n	800a4ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2220      	movs	r2, #32
 800a50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	330c      	adds	r3, #12
 800a51a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60fb      	str	r3, [r7, #12]
   return(result);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0310 	bic.w	r3, r3, #16
 800a52a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	330c      	adds	r3, #12
 800a534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a538:	61fa      	str	r2, [r7, #28]
 800a53a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53c:	69b9      	ldr	r1, [r7, #24]
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	e841 2300 	strex	r3, r2, [r1]
 800a544:	617b      	str	r3, [r7, #20]
   return(result);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1e3      	bne.n	800a514 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a54c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f83e 	bl	800a5d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a558:	e023      	b.n	800a5a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <HAL_UART_IRQHandler+0x4ea>
 800a566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f95d 	bl	800a832 <UART_Transmit_IT>
    return;
 800a578:	e014      	b.n	800a5a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00e      	beq.n	800a5a4 <HAL_UART_IRQHandler+0x514>
 800a586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d008      	beq.n	800a5a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f99d 	bl	800a8d2 <UART_EndTransmit_IT>
    return;
 800a598:	e004      	b.n	800a5a4 <HAL_UART_IRQHandler+0x514>
    return;
 800a59a:	bf00      	nop
 800a59c:	e002      	b.n	800a5a4 <HAL_UART_IRQHandler+0x514>
      return;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <HAL_UART_IRQHandler+0x514>
      return;
 800a5a2:	bf00      	nop
  }
}
 800a5a4:	37e8      	adds	r7, #232	; 0xe8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop

0800a5ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b090      	sub	sp, #64	; 0x40
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fc:	e050      	b.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a604:	d04c      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <UART_WaitOnFlagUntilTimeout+0x30>
 800a60c:	f7fb f80c 	bl	8005628 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a618:	429a      	cmp	r2, r3
 800a61a:	d241      	bcs.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	330c      	adds	r3, #12
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	330c      	adds	r3, #12
 800a63a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a63c:	637a      	str	r2, [r7, #52]	; 0x34
 800a63e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e5      	bne.n	800a61c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3314      	adds	r3, #20
 800a656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f023 0301 	bic.w	r3, r3, #1
 800a666:	63bb      	str	r3, [r7, #56]	; 0x38
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3314      	adds	r3, #20
 800a66e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a670:	623a      	str	r2, [r7, #32]
 800a672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	6a3a      	ldr	r2, [r7, #32]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e5      	bne.n	800a650 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e00f      	b.n	800a6c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d09f      	beq.n	800a5fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3740      	adds	r7, #64	; 0x40
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	88fa      	ldrh	r2, [r7, #6]
 800a6e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	88fa      	ldrh	r2, [r7, #6]
 800a6e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2222      	movs	r2, #34	; 0x22
 800a6f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d007      	beq.n	800a716 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a714:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f042 0201 	orr.w	r2, r2, #1
 800a724:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0220 	orr.w	r2, r2, #32
 800a734:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b095      	sub	sp, #84	; 0x54
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a762:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a76c:	643a      	str	r2, [r7, #64]	; 0x40
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3314      	adds	r3, #20
 800a786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	64bb      	str	r3, [r7, #72]	; 0x48
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3314      	adds	r3, #20
 800a79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e5      	bne.n	800a780 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d119      	bne.n	800a7f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	e853 3f00 	ldrex	r3, [r3]
 800a7ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f023 0310 	bic.w	r3, r3, #16
 800a7d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	330c      	adds	r3, #12
 800a7da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7dc:	61ba      	str	r2, [r7, #24]
 800a7de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6979      	ldr	r1, [r7, #20]
 800a7e2:	69ba      	ldr	r2, [r7, #24]
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e5      	bne.n	800a7bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7fe:	bf00      	nop
 800a800:	3754      	adds	r7, #84	; 0x54
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff fecb 	bl	800a5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a832:	b480      	push	{r7}
 800a834:	b085      	sub	sp, #20
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b21      	cmp	r3, #33	; 0x21
 800a844:	d13e      	bne.n	800a8c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a84e:	d114      	bne.n	800a87a <UART_Transmit_IT+0x48>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d110      	bne.n	800a87a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a86c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	1c9a      	adds	r2, r3, #2
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	621a      	str	r2, [r3, #32]
 800a878:	e008      	b.n	800a88c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	1c59      	adds	r1, r3, #1
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6211      	str	r1, [r2, #32]
 800a884:	781a      	ldrb	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	b29b      	uxth	r3, r3
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	4619      	mov	r1, r3
 800a89a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10f      	bne.n	800a8c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e000      	b.n	800a8c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8c4:	2302      	movs	r3, #2
  }
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff fe5a 	bl	800a5ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b08c      	sub	sp, #48	; 0x30
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b22      	cmp	r3, #34	; 0x22
 800a914:	f040 80ab 	bne.w	800aa6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a920:	d117      	bne.n	800a952 <UART_Receive_IT+0x50>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d113      	bne.n	800a952 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a940:	b29a      	uxth	r2, r3
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	1c9a      	adds	r2, r3, #2
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	629a      	str	r2, [r3, #40]	; 0x28
 800a950:	e026      	b.n	800a9a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a958:	2300      	movs	r3, #0
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a964:	d007      	beq.n	800a976 <UART_Receive_IT+0x74>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <UART_Receive_IT+0x82>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e008      	b.n	800a996 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a990:	b2da      	uxtb	r2, r3
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d15a      	bne.n	800aa6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0220 	bic.w	r2, r2, #32
 800a9c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	695a      	ldr	r2, [r3, #20]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f022 0201 	bic.w	r2, r2, #1
 800a9e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d135      	bne.n	800aa60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	330c      	adds	r3, #12
 800aa00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	613b      	str	r3, [r7, #16]
   return(result);
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f023 0310 	bic.w	r3, r3, #16
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	330c      	adds	r3, #12
 800aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1a:	623a      	str	r2, [r7, #32]
 800aa1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	69f9      	ldr	r1, [r7, #28]
 800aa20:	6a3a      	ldr	r2, [r7, #32]
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e5      	bne.n	800a9fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d10a      	bne.n	800aa52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fdbb 	bl	800a5d4 <HAL_UARTEx_RxEventCallback>
 800aa5e:	e002      	b.n	800aa66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7f7 f879 	bl	8001b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e002      	b.n	800aa70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e000      	b.n	800aa70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa6e:	2302      	movs	r3, #2
  }
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3730      	adds	r7, #48	; 0x30
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa7c:	b0c0      	sub	sp, #256	; 0x100
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa94:	68d9      	ldr	r1, [r3, #12]
 800aa96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	ea40 0301 	orr.w	r3, r0, r1
 800aaa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aaa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	431a      	orrs	r2, r3
 800aab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aad0:	f021 010c 	bic.w	r1, r1, #12
 800aad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aade:	430b      	orrs	r3, r1
 800aae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aaee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf2:	6999      	ldr	r1, [r3, #24]
 800aaf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	ea40 0301 	orr.w	r3, r0, r1
 800aafe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	4b8f      	ldr	r3, [pc, #572]	; (800ad44 <UART_SetConfig+0x2cc>)
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d005      	beq.n	800ab18 <UART_SetConfig+0xa0>
 800ab0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b8d      	ldr	r3, [pc, #564]	; (800ad48 <UART_SetConfig+0x2d0>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d104      	bne.n	800ab22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab18:	f7fd fbc2 	bl	80082a0 <HAL_RCC_GetPCLK2Freq>
 800ab1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab20:	e003      	b.n	800ab2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab22:	f7fd fba9 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 800ab26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab34:	f040 810c 	bne.w	800ad50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	1891      	adds	r1, r2, r2
 800ab50:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab52:	415b      	adcs	r3, r3
 800ab54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab5a:	4621      	mov	r1, r4
 800ab5c:	eb12 0801 	adds.w	r8, r2, r1
 800ab60:	4629      	mov	r1, r5
 800ab62:	eb43 0901 	adc.w	r9, r3, r1
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	f04f 0300 	mov.w	r3, #0
 800ab6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab7a:	4690      	mov	r8, r2
 800ab7c:	4699      	mov	r9, r3
 800ab7e:	4623      	mov	r3, r4
 800ab80:	eb18 0303 	adds.w	r3, r8, r3
 800ab84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab88:	462b      	mov	r3, r5
 800ab8a:	eb49 0303 	adc.w	r3, r9, r3
 800ab8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aba6:	460b      	mov	r3, r1
 800aba8:	18db      	adds	r3, r3, r3
 800abaa:	653b      	str	r3, [r7, #80]	; 0x50
 800abac:	4613      	mov	r3, r2
 800abae:	eb42 0303 	adc.w	r3, r2, r3
 800abb2:	657b      	str	r3, [r7, #84]	; 0x54
 800abb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800abb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abbc:	f7f6 f81e 	bl	8000bfc <__aeabi_uldivmod>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4b61      	ldr	r3, [pc, #388]	; (800ad4c <UART_SetConfig+0x2d4>)
 800abc6:	fba3 2302 	umull	r2, r3, r3, r2
 800abca:	095b      	lsrs	r3, r3, #5
 800abcc:	011c      	lsls	r4, r3, #4
 800abce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800abdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800abe0:	4642      	mov	r2, r8
 800abe2:	464b      	mov	r3, r9
 800abe4:	1891      	adds	r1, r2, r2
 800abe6:	64b9      	str	r1, [r7, #72]	; 0x48
 800abe8:	415b      	adcs	r3, r3
 800abea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800abf0:	4641      	mov	r1, r8
 800abf2:	eb12 0a01 	adds.w	sl, r2, r1
 800abf6:	4649      	mov	r1, r9
 800abf8:	eb43 0b01 	adc.w	fp, r3, r1
 800abfc:	f04f 0200 	mov.w	r2, #0
 800ac00:	f04f 0300 	mov.w	r3, #0
 800ac04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac10:	4692      	mov	sl, r2
 800ac12:	469b      	mov	fp, r3
 800ac14:	4643      	mov	r3, r8
 800ac16:	eb1a 0303 	adds.w	r3, sl, r3
 800ac1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac1e:	464b      	mov	r3, r9
 800ac20:	eb4b 0303 	adc.w	r3, fp, r3
 800ac24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	18db      	adds	r3, r3, r3
 800ac40:	643b      	str	r3, [r7, #64]	; 0x40
 800ac42:	4613      	mov	r3, r2
 800ac44:	eb42 0303 	adc.w	r3, r2, r3
 800ac48:	647b      	str	r3, [r7, #68]	; 0x44
 800ac4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac52:	f7f5 ffd3 	bl	8000bfc <__aeabi_uldivmod>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4b3b      	ldr	r3, [pc, #236]	; (800ad4c <UART_SetConfig+0x2d4>)
 800ac5e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	2264      	movs	r2, #100	; 0x64
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	1acb      	subs	r3, r1, r3
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac72:	4b36      	ldr	r3, [pc, #216]	; (800ad4c <UART_SetConfig+0x2d4>)
 800ac74:	fba3 2302 	umull	r2, r3, r3, r2
 800ac78:	095b      	lsrs	r3, r3, #5
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac80:	441c      	add	r4, r3
 800ac82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ac94:	4642      	mov	r2, r8
 800ac96:	464b      	mov	r3, r9
 800ac98:	1891      	adds	r1, r2, r2
 800ac9a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac9c:	415b      	adcs	r3, r3
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aca4:	4641      	mov	r1, r8
 800aca6:	1851      	adds	r1, r2, r1
 800aca8:	6339      	str	r1, [r7, #48]	; 0x30
 800acaa:	4649      	mov	r1, r9
 800acac:	414b      	adcs	r3, r1
 800acae:	637b      	str	r3, [r7, #52]	; 0x34
 800acb0:	f04f 0200 	mov.w	r2, #0
 800acb4:	f04f 0300 	mov.w	r3, #0
 800acb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800acbc:	4659      	mov	r1, fp
 800acbe:	00cb      	lsls	r3, r1, #3
 800acc0:	4651      	mov	r1, sl
 800acc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acc6:	4651      	mov	r1, sl
 800acc8:	00ca      	lsls	r2, r1, #3
 800acca:	4610      	mov	r0, r2
 800accc:	4619      	mov	r1, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	4642      	mov	r2, r8
 800acd2:	189b      	adds	r3, r3, r2
 800acd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acd8:	464b      	mov	r3, r9
 800acda:	460a      	mov	r2, r1
 800acdc:	eb42 0303 	adc.w	r3, r2, r3
 800ace0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ace4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800acf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800acf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800acf8:	460b      	mov	r3, r1
 800acfa:	18db      	adds	r3, r3, r3
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
 800acfe:	4613      	mov	r3, r2
 800ad00:	eb42 0303 	adc.w	r3, r2, r3
 800ad04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad0e:	f7f5 ff75 	bl	8000bfc <__aeabi_uldivmod>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <UART_SetConfig+0x2d4>)
 800ad18:	fba3 1302 	umull	r1, r3, r3, r2
 800ad1c:	095b      	lsrs	r3, r3, #5
 800ad1e:	2164      	movs	r1, #100	; 0x64
 800ad20:	fb01 f303 	mul.w	r3, r1, r3
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	3332      	adds	r3, #50	; 0x32
 800ad2a:	4a08      	ldr	r2, [pc, #32]	; (800ad4c <UART_SetConfig+0x2d4>)
 800ad2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad30:	095b      	lsrs	r3, r3, #5
 800ad32:	f003 0207 	and.w	r2, r3, #7
 800ad36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4422      	add	r2, r4
 800ad3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad40:	e106      	b.n	800af50 <UART_SetConfig+0x4d8>
 800ad42:	bf00      	nop
 800ad44:	40011000 	.word	0x40011000
 800ad48:	40011400 	.word	0x40011400
 800ad4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad62:	4642      	mov	r2, r8
 800ad64:	464b      	mov	r3, r9
 800ad66:	1891      	adds	r1, r2, r2
 800ad68:	6239      	str	r1, [r7, #32]
 800ad6a:	415b      	adcs	r3, r3
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad72:	4641      	mov	r1, r8
 800ad74:	1854      	adds	r4, r2, r1
 800ad76:	4649      	mov	r1, r9
 800ad78:	eb43 0501 	adc.w	r5, r3, r1
 800ad7c:	f04f 0200 	mov.w	r2, #0
 800ad80:	f04f 0300 	mov.w	r3, #0
 800ad84:	00eb      	lsls	r3, r5, #3
 800ad86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad8a:	00e2      	lsls	r2, r4, #3
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	461d      	mov	r5, r3
 800ad90:	4643      	mov	r3, r8
 800ad92:	18e3      	adds	r3, r4, r3
 800ad94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad98:	464b      	mov	r3, r9
 800ad9a:	eb45 0303 	adc.w	r3, r5, r3
 800ad9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ada2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800adae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800adb2:	f04f 0200 	mov.w	r2, #0
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800adbe:	4629      	mov	r1, r5
 800adc0:	008b      	lsls	r3, r1, #2
 800adc2:	4621      	mov	r1, r4
 800adc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adc8:	4621      	mov	r1, r4
 800adca:	008a      	lsls	r2, r1, #2
 800adcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800add0:	f7f5 ff14 	bl	8000bfc <__aeabi_uldivmod>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4b60      	ldr	r3, [pc, #384]	; (800af5c <UART_SetConfig+0x4e4>)
 800adda:	fba3 2302 	umull	r2, r3, r3, r2
 800adde:	095b      	lsrs	r3, r3, #5
 800ade0:	011c      	lsls	r4, r3, #4
 800ade2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800adec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800adf4:	4642      	mov	r2, r8
 800adf6:	464b      	mov	r3, r9
 800adf8:	1891      	adds	r1, r2, r2
 800adfa:	61b9      	str	r1, [r7, #24]
 800adfc:	415b      	adcs	r3, r3
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae04:	4641      	mov	r1, r8
 800ae06:	1851      	adds	r1, r2, r1
 800ae08:	6139      	str	r1, [r7, #16]
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	414b      	adcs	r3, r1
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	f04f 0200 	mov.w	r2, #0
 800ae14:	f04f 0300 	mov.w	r3, #0
 800ae18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	00cb      	lsls	r3, r1, #3
 800ae20:	4651      	mov	r1, sl
 800ae22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae26:	4651      	mov	r1, sl
 800ae28:	00ca      	lsls	r2, r1, #3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4642      	mov	r2, r8
 800ae32:	189b      	adds	r3, r3, r2
 800ae34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae38:	464b      	mov	r3, r9
 800ae3a:	460a      	mov	r2, r1
 800ae3c:	eb42 0303 	adc.w	r3, r2, r3
 800ae40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	008b      	lsls	r3, r1, #2
 800ae60:	4641      	mov	r1, r8
 800ae62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae66:	4641      	mov	r1, r8
 800ae68:	008a      	lsls	r2, r1, #2
 800ae6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae6e:	f7f5 fec5 	bl	8000bfc <__aeabi_uldivmod>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4611      	mov	r1, r2
 800ae78:	4b38      	ldr	r3, [pc, #224]	; (800af5c <UART_SetConfig+0x4e4>)
 800ae7a:	fba3 2301 	umull	r2, r3, r3, r1
 800ae7e:	095b      	lsrs	r3, r3, #5
 800ae80:	2264      	movs	r2, #100	; 0x64
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	1acb      	subs	r3, r1, r3
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	3332      	adds	r3, #50	; 0x32
 800ae8c:	4a33      	ldr	r2, [pc, #204]	; (800af5c <UART_SetConfig+0x4e4>)
 800ae8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae92:	095b      	lsrs	r3, r3, #5
 800ae94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae98:	441c      	add	r4, r3
 800ae9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae9e:	2200      	movs	r2, #0
 800aea0:	673b      	str	r3, [r7, #112]	; 0x70
 800aea2:	677a      	str	r2, [r7, #116]	; 0x74
 800aea4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aea8:	4642      	mov	r2, r8
 800aeaa:	464b      	mov	r3, r9
 800aeac:	1891      	adds	r1, r2, r2
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	415b      	adcs	r3, r3
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aeb8:	4641      	mov	r1, r8
 800aeba:	1851      	adds	r1, r2, r1
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	4649      	mov	r1, r9
 800aec0:	414b      	adcs	r3, r1
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	f04f 0200 	mov.w	r2, #0
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aed0:	4659      	mov	r1, fp
 800aed2:	00cb      	lsls	r3, r1, #3
 800aed4:	4651      	mov	r1, sl
 800aed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeda:	4651      	mov	r1, sl
 800aedc:	00ca      	lsls	r2, r1, #3
 800aede:	4610      	mov	r0, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	4603      	mov	r3, r0
 800aee4:	4642      	mov	r2, r8
 800aee6:	189b      	adds	r3, r3, r2
 800aee8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeea:	464b      	mov	r3, r9
 800aeec:	460a      	mov	r2, r1
 800aeee:	eb42 0303 	adc.w	r3, r2, r3
 800aef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	663b      	str	r3, [r7, #96]	; 0x60
 800aefe:	667a      	str	r2, [r7, #100]	; 0x64
 800af00:	f04f 0200 	mov.w	r2, #0
 800af04:	f04f 0300 	mov.w	r3, #0
 800af08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af0c:	4649      	mov	r1, r9
 800af0e:	008b      	lsls	r3, r1, #2
 800af10:	4641      	mov	r1, r8
 800af12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af16:	4641      	mov	r1, r8
 800af18:	008a      	lsls	r2, r1, #2
 800af1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af1e:	f7f5 fe6d 	bl	8000bfc <__aeabi_uldivmod>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <UART_SetConfig+0x4e4>)
 800af28:	fba3 1302 	umull	r1, r3, r3, r2
 800af2c:	095b      	lsrs	r3, r3, #5
 800af2e:	2164      	movs	r1, #100	; 0x64
 800af30:	fb01 f303 	mul.w	r3, r1, r3
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	3332      	adds	r3, #50	; 0x32
 800af3a:	4a08      	ldr	r2, [pc, #32]	; (800af5c <UART_SetConfig+0x4e4>)
 800af3c:	fba2 2303 	umull	r2, r3, r2, r3
 800af40:	095b      	lsrs	r3, r3, #5
 800af42:	f003 020f 	and.w	r2, r3, #15
 800af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4422      	add	r2, r4
 800af4e:	609a      	str	r2, [r3, #8]
}
 800af50:	bf00      	nop
 800af52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af56:	46bd      	mov	sp, r7
 800af58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af5c:	51eb851f 	.word	0x51eb851f

0800af60 <__NVIC_SetPriority>:
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	6039      	str	r1, [r7, #0]
 800af6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af70:	2b00      	cmp	r3, #0
 800af72:	db0a      	blt.n	800af8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	b2da      	uxtb	r2, r3
 800af78:	490c      	ldr	r1, [pc, #48]	; (800afac <__NVIC_SetPriority+0x4c>)
 800af7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af7e:	0112      	lsls	r2, r2, #4
 800af80:	b2d2      	uxtb	r2, r2
 800af82:	440b      	add	r3, r1
 800af84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af88:	e00a      	b.n	800afa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	4908      	ldr	r1, [pc, #32]	; (800afb0 <__NVIC_SetPriority+0x50>)
 800af90:	79fb      	ldrb	r3, [r7, #7]
 800af92:	f003 030f 	and.w	r3, r3, #15
 800af96:	3b04      	subs	r3, #4
 800af98:	0112      	lsls	r2, r2, #4
 800af9a:	b2d2      	uxtb	r2, r2
 800af9c:	440b      	add	r3, r1
 800af9e:	761a      	strb	r2, [r3, #24]
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	e000e100 	.word	0xe000e100
 800afb0:	e000ed00 	.word	0xe000ed00

0800afb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <SysTick_Handler+0x1c>)
 800afba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800afbc:	f001 fcfe 	bl	800c9bc <xTaskGetSchedulerState>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d001      	beq.n	800afca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800afc6:	f002 fae7 	bl	800d598 <xPortSysTickHandler>
  }
}
 800afca:	bf00      	nop
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	e000e010 	.word	0xe000e010

0800afd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800afd8:	2100      	movs	r1, #0
 800afda:	f06f 0004 	mvn.w	r0, #4
 800afde:	f7ff ffbf 	bl	800af60 <__NVIC_SetPriority>
#endif
}
 800afe2:	bf00      	nop
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afee:	f3ef 8305 	mrs	r3, IPSR
 800aff2:	603b      	str	r3, [r7, #0]
  return(result);
 800aff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800affa:	f06f 0305 	mvn.w	r3, #5
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e00c      	b.n	800b01c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <osKernelInitialize+0x44>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b00a:	4b08      	ldr	r3, [pc, #32]	; (800b02c <osKernelInitialize+0x44>)
 800b00c:	2201      	movs	r2, #1
 800b00e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b010:	2300      	movs	r3, #0
 800b012:	607b      	str	r3, [r7, #4]
 800b014:	e002      	b.n	800b01c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b016:	f04f 33ff 	mov.w	r3, #4294967295
 800b01a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b01c:	687b      	ldr	r3, [r7, #4]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	200005b0 	.word	0x200005b0

0800b030 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b036:	f3ef 8305 	mrs	r3, IPSR
 800b03a:	603b      	str	r3, [r7, #0]
  return(result);
 800b03c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b042:	f06f 0305 	mvn.w	r3, #5
 800b046:	607b      	str	r3, [r7, #4]
 800b048:	e010      	b.n	800b06c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b04a:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <osKernelStart+0x48>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d109      	bne.n	800b066 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b052:	f7ff ffbf 	bl	800afd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b056:	4b08      	ldr	r3, [pc, #32]	; (800b078 <osKernelStart+0x48>)
 800b058:	2202      	movs	r2, #2
 800b05a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b05c:	f001 f866 	bl	800c12c <vTaskStartScheduler>
      stat = osOK;
 800b060:	2300      	movs	r3, #0
 800b062:	607b      	str	r3, [r7, #4]
 800b064:	e002      	b.n	800b06c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b066:	f04f 33ff 	mov.w	r3, #4294967295
 800b06a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b06c:	687b      	ldr	r3, [r7, #4]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200005b0 	.word	0x200005b0

0800b07c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08e      	sub	sp, #56	; 0x38
 800b080:	af04      	add	r7, sp, #16
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b088:	2300      	movs	r3, #0
 800b08a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b08c:	f3ef 8305 	mrs	r3, IPSR
 800b090:	617b      	str	r3, [r7, #20]
  return(result);
 800b092:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b094:	2b00      	cmp	r3, #0
 800b096:	d17e      	bne.n	800b196 <osThreadNew+0x11a>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d07b      	beq.n	800b196 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b09e:	2380      	movs	r3, #128	; 0x80
 800b0a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b0a2:	2318      	movs	r3, #24
 800b0a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d045      	beq.n	800b142 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <osThreadNew+0x48>
        name = attr->name;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d008      	beq.n	800b0ea <osThreadNew+0x6e>
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	2b38      	cmp	r3, #56	; 0x38
 800b0dc:	d805      	bhi.n	800b0ea <osThreadNew+0x6e>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <osThreadNew+0x72>
        return (NULL);
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e054      	b.n	800b198 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	089b      	lsrs	r3, r3, #2
 800b0fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00e      	beq.n	800b124 <osThreadNew+0xa8>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	2b5b      	cmp	r3, #91	; 0x5b
 800b10c:	d90a      	bls.n	800b124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b112:	2b00      	cmp	r3, #0
 800b114:	d006      	beq.n	800b124 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <osThreadNew+0xa8>
        mem = 1;
 800b11e:	2301      	movs	r3, #1
 800b120:	61bb      	str	r3, [r7, #24]
 800b122:	e010      	b.n	800b146 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10c      	bne.n	800b146 <osThreadNew+0xca>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d108      	bne.n	800b146 <osThreadNew+0xca>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d104      	bne.n	800b146 <osThreadNew+0xca>
          mem = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	e001      	b.n	800b146 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d110      	bne.n	800b16e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b154:	9202      	str	r2, [sp, #8]
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	6a3a      	ldr	r2, [r7, #32]
 800b160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fe0c 	bl	800bd80 <xTaskCreateStatic>
 800b168:	4603      	mov	r3, r0
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	e013      	b.n	800b196 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d110      	bne.n	800b196 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	b29a      	uxth	r2, r3
 800b178:	f107 0310 	add.w	r3, r7, #16
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fe57 	bl	800be3a <xTaskCreate>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d001      	beq.n	800b196 <osThreadNew+0x11a>
            hTask = NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b196:	693b      	ldr	r3, [r7, #16]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3728      	adds	r7, #40	; 0x28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a8:	f3ef 8305 	mrs	r3, IPSR
 800b1ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <osDelay+0x1c>
    stat = osErrorISR;
 800b1b4:	f06f 0305 	mvn.w	r3, #5
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e007      	b.n	800b1cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 ff7c 	bl	800c0c4 <vTaskDelay>
    }
  }

  return (stat);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4a07      	ldr	r2, [pc, #28]	; (800b204 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	4a06      	ldr	r2, [pc, #24]	; (800b208 <vApplicationGetIdleTaskMemory+0x30>)
 800b1ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2280      	movs	r2, #128	; 0x80
 800b1f4:	601a      	str	r2, [r3, #0]
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	200005b4 	.word	0x200005b4
 800b208:	20000610 	.word	0x20000610

0800b20c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4a07      	ldr	r2, [pc, #28]	; (800b238 <vApplicationGetTimerTaskMemory+0x2c>)
 800b21c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4a06      	ldr	r2, [pc, #24]	; (800b23c <vApplicationGetTimerTaskMemory+0x30>)
 800b222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b22a:	601a      	str	r2, [r3, #0]
}
 800b22c:	bf00      	nop
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	20000810 	.word	0x20000810
 800b23c:	2000086c 	.word	0x2000086c

0800b240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f103 0208 	add.w	r2, r3, #8
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f04f 32ff 	mov.w	r2, #4294967295
 800b258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f103 0208 	add.w	r2, r3, #8
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f103 0208 	add.w	r2, r3, #8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b28e:	bf00      	nop
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b29a:	b480      	push	{r7}
 800b29c:	b085      	sub	sp, #20
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f8:	d103      	bne.n	800b302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	e00c      	b.n	800b31c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3308      	adds	r3, #8
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	e002      	b.n	800b310 <vListInsert+0x2e>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d2f6      	bcs.n	800b30a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6892      	ldr	r2, [r2, #8]
 800b36a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	6852      	ldr	r2, [r2, #4]
 800b374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d103      	bne.n	800b388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	1e5a      	subs	r2, r3, #1
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3d2:	f002 f84f 	bl	800d474 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	441a      	add	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b402:	3b01      	subs	r3, #1
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	441a      	add	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	22ff      	movs	r2, #255	; 0xff
 800b416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	22ff      	movs	r2, #255	; 0xff
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d114      	bne.n	800b452 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01a      	beq.n	800b466 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3310      	adds	r3, #16
 800b434:	4618      	mov	r0, r3
 800b436:	f001 f903 	bl	800c640 <xTaskRemoveFromEventList>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d012      	beq.n	800b466 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b440:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <xQueueGenericReset+0xcc>)
 800b442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	e009      	b.n	800b466 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3310      	adds	r3, #16
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff fef2 	bl	800b240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	3324      	adds	r3, #36	; 0x24
 800b460:	4618      	mov	r0, r3
 800b462:	f7ff feed 	bl	800b240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b466:	f002 f835 	bl	800d4d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b46a:	2301      	movs	r3, #1
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	; 0x38
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b49e:	bf00      	nop
 800b4a0:	e7fe      	b.n	800b4a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <xQueueGenericCreateStatic+0x52>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <xQueueGenericCreateStatic+0x56>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <xQueueGenericCreateStatic+0x58>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	623b      	str	r3, [r7, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <xQueueGenericCreateStatic+0x7e>
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <xQueueGenericCreateStatic+0x82>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <xQueueGenericCreateStatic+0x84>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	61fb      	str	r3, [r7, #28]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b516:	2350      	movs	r3, #80	; 0x50
 800b518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b50      	cmp	r3, #80	; 0x50
 800b51e:	d00a      	beq.n	800b536 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	61bb      	str	r3, [r7, #24]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b536:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00d      	beq.n	800b55e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	2201      	movs	r2, #1
 800b546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b54a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	4613      	mov	r3, r2
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	68b9      	ldr	r1, [r7, #8]
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 f805 	bl	800b568 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b560:	4618      	mov	r0, r3
 800b562:	3730      	adds	r7, #48	; 0x30
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d103      	bne.n	800b584 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	e002      	b.n	800b58a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b596:	2101      	movs	r1, #1
 800b598:	69b8      	ldr	r0, [r7, #24]
 800b59a:	f7ff ff05 	bl	800b3a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	78fa      	ldrb	r2, [r7, #3]
 800b5a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08e      	sub	sp, #56	; 0x38
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xQueueGenericSend+0x32>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d103      	bne.n	800b5f0 <xQueueGenericSend+0x40>
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <xQueueGenericSend+0x44>
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e000      	b.n	800b5f6 <xQueueGenericSend+0x46>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10a      	bne.n	800b610 <xQueueGenericSend+0x60>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b60c:	bf00      	nop
 800b60e:	e7fe      	b.n	800b60e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	2b02      	cmp	r3, #2
 800b614:	d103      	bne.n	800b61e <xQueueGenericSend+0x6e>
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d101      	bne.n	800b622 <xQueueGenericSend+0x72>
 800b61e:	2301      	movs	r3, #1
 800b620:	e000      	b.n	800b624 <xQueueGenericSend+0x74>
 800b622:	2300      	movs	r3, #0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <xQueueGenericSend+0x8e>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	623b      	str	r3, [r7, #32]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b63e:	f001 f9bd 	bl	800c9bc <xTaskGetSchedulerState>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d102      	bne.n	800b64e <xQueueGenericSend+0x9e>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <xQueueGenericSend+0xa2>
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <xQueueGenericSend+0xa4>
 800b652:	2300      	movs	r3, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <xQueueGenericSend+0xbe>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	61fb      	str	r3, [r7, #28]
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b66e:	f001 ff01 	bl	800d474 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d302      	bcc.n	800b684 <xQueueGenericSend+0xd4>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b02      	cmp	r3, #2
 800b682:	d129      	bne.n	800b6d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b68a:	f000 fa0b 	bl	800baa4 <prvCopyDataToQueue>
 800b68e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d010      	beq.n	800b6ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	3324      	adds	r3, #36	; 0x24
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 ffcf 	bl	800c640 <xTaskRemoveFromEventList>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d013      	beq.n	800b6d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6a8:	4b3f      	ldr	r3, [pc, #252]	; (800b7a8 <xQueueGenericSend+0x1f8>)
 800b6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	e00a      	b.n	800b6d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d007      	beq.n	800b6d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6c0:	4b39      	ldr	r3, [pc, #228]	; (800b7a8 <xQueueGenericSend+0x1f8>)
 800b6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6d0:	f001 ff00 	bl	800d4d4 <vPortExitCritical>
				return pdPASS;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e063      	b.n	800b7a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6de:	f001 fef9 	bl	800d4d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e05c      	b.n	800b7a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f001 f809 	bl	800c708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6fa:	f001 feeb 	bl	800d4d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6fe:	f000 fd7b 	bl	800c1f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b702:	f001 feb7 	bl	800d474 <vPortEnterCritical>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b70c:	b25b      	sxtb	r3, r3
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d103      	bne.n	800b71c <xQueueGenericSend+0x16c>
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2200      	movs	r2, #0
 800b718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b722:	b25b      	sxtb	r3, r3
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b728:	d103      	bne.n	800b732 <xQueueGenericSend+0x182>
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b732:	f001 fecf 	bl	800d4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b736:	1d3a      	adds	r2, r7, #4
 800b738:	f107 0314 	add.w	r3, r7, #20
 800b73c:	4611      	mov	r1, r2
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fff8 	bl	800c734 <xTaskCheckForTimeOut>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d124      	bne.n	800b794 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b74a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b74c:	f000 faa2 	bl	800bc94 <prvIsQueueFull>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d018      	beq.n	800b788 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	3310      	adds	r3, #16
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 ff1e 	bl	800c5a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b766:	f000 fa2d 	bl	800bbc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b76a:	f000 fd53 	bl	800c214 <xTaskResumeAll>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	f47f af7c 	bne.w	800b66e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b776:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <xQueueGenericSend+0x1f8>)
 800b778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77c:	601a      	str	r2, [r3, #0]
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	e772      	b.n	800b66e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b78a:	f000 fa1b 	bl	800bbc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b78e:	f000 fd41 	bl	800c214 <xTaskResumeAll>
 800b792:	e76c      	b.n	800b66e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b796:	f000 fa15 	bl	800bbc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b79a:	f000 fd3b 	bl	800c214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b79e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3738      	adds	r7, #56	; 0x38
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b090      	sub	sp, #64	; 0x40
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10a      	bne.n	800b7da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <xQueueGenericSendFromISR+0x3c>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <xQueueGenericSendFromISR+0x40>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e000      	b.n	800b7ee <xQueueGenericSendFromISR+0x42>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d103      	bne.n	800b816 <xQueueGenericSendFromISR+0x6a>
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <xQueueGenericSendFromISR+0x6e>
 800b816:	2301      	movs	r3, #1
 800b818:	e000      	b.n	800b81c <xQueueGenericSendFromISR+0x70>
 800b81a:	2300      	movs	r3, #0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10a      	bne.n	800b836 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	623b      	str	r3, [r7, #32]
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b836:	f001 feff 	bl	800d638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b83a:	f3ef 8211 	mrs	r2, BASEPRI
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	61fa      	str	r2, [r7, #28]
 800b850:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b852:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85e:	429a      	cmp	r2, r3
 800b860:	d302      	bcc.n	800b868 <xQueueGenericSendFromISR+0xbc>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d12f      	bne.n	800b8c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b87e:	f000 f911 	bl	800baa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b882:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88a:	d112      	bne.n	800b8b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	d016      	beq.n	800b8c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	3324      	adds	r3, #36	; 0x24
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 fed1 	bl	800c640 <xTaskRemoveFromEventList>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00e      	beq.n	800b8c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]
 800b8b0:	e007      	b.n	800b8c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	b25a      	sxtb	r2, r3
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b8c6:	e001      	b.n	800b8cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3740      	adds	r7, #64	; 0x40
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08c      	sub	sp, #48	; 0x30
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <xQueueReceive+0x30>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	623b      	str	r3, [r7, #32]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d103      	bne.n	800b922 <xQueueReceive+0x3e>
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <xQueueReceive+0x42>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xQueueReceive+0x44>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueReceive+0x5e>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	61fb      	str	r3, [r7, #28]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b942:	f001 f83b 	bl	800c9bc <xTaskGetSchedulerState>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <xQueueReceive+0x6e>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <xQueueReceive+0x72>
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <xQueueReceive+0x74>
 800b956:	2300      	movs	r3, #0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <xQueueReceive+0x8e>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	61bb      	str	r3, [r7, #24]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b972:	f001 fd7f 	bl	800d474 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01f      	beq.n	800b9c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b986:	f000 f8f7 	bl	800bb78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	1e5a      	subs	r2, r3, #1
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	3310      	adds	r3, #16
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fe4e 	bl	800c640 <xTaskRemoveFromEventList>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9aa:	4b3d      	ldr	r3, [pc, #244]	; (800baa0 <xQueueReceive+0x1bc>)
 800b9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9ba:	f001 fd8b 	bl	800d4d4 <vPortExitCritical>
				return pdPASS;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e069      	b.n	800ba96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d103      	bne.n	800b9d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9c8:	f001 fd84 	bl	800d4d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e062      	b.n	800ba96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9d6:	f107 0310 	add.w	r3, r7, #16
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 fe94 	bl	800c708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9e4:	f001 fd76 	bl	800d4d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9e8:	f000 fc06 	bl	800c1f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9ec:	f001 fd42 	bl	800d474 <vPortEnterCritical>
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9f6:	b25b      	sxtb	r3, r3
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d103      	bne.n	800ba06 <xQueueReceive+0x122>
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0c:	b25b      	sxtb	r3, r3
 800ba0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba12:	d103      	bne.n	800ba1c <xQueueReceive+0x138>
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba1c:	f001 fd5a 	bl	800d4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba20:	1d3a      	adds	r2, r7, #4
 800ba22:	f107 0310 	add.w	r3, r7, #16
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 fe83 	bl	800c734 <xTaskCheckForTimeOut>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d123      	bne.n	800ba7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba36:	f000 f917 	bl	800bc68 <prvIsQueueEmpty>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d017      	beq.n	800ba70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	3324      	adds	r3, #36	; 0x24
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fda9 	bl	800c5a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba50:	f000 f8b8 	bl	800bbc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba54:	f000 fbde 	bl	800c214 <xTaskResumeAll>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d189      	bne.n	800b972 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba5e:	4b10      	ldr	r3, [pc, #64]	; (800baa0 <xQueueReceive+0x1bc>)
 800ba60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	e780      	b.n	800b972 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba72:	f000 f8a7 	bl	800bbc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba76:	f000 fbcd 	bl	800c214 <xTaskResumeAll>
 800ba7a:	e77a      	b.n	800b972 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba7e:	f000 f8a1 	bl	800bbc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba82:	f000 fbc7 	bl	800c214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba88:	f000 f8ee 	bl	800bc68 <prvIsQueueEmpty>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f43f af6f 	beq.w	800b972 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3730      	adds	r7, #48	; 0x30
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bab0:	2300      	movs	r3, #0
 800bab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10d      	bne.n	800bade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d14d      	bne.n	800bb66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 ff92 	bl	800c9f8 <xTaskPriorityDisinherit>
 800bad4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	609a      	str	r2, [r3, #8]
 800badc:	e043      	b.n	800bb66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d119      	bne.n	800bb18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6858      	ldr	r0, [r3, #4]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baec:	461a      	mov	r2, r3
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	f002 fa20 	bl	800df34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	441a      	add	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d32b      	bcc.n	800bb66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	605a      	str	r2, [r3, #4]
 800bb16:	e026      	b.n	800bb66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	68d8      	ldr	r0, [r3, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb20:	461a      	mov	r2, r3
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	f002 fa06 	bl	800df34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	425b      	negs	r3, r3
 800bb32:	441a      	add	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d207      	bcs.n	800bb54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	425b      	negs	r3, r3
 800bb4e:	441a      	add	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d105      	bne.n	800bb66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb6e:	697b      	ldr	r3, [r7, #20]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d018      	beq.n	800bbbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	441a      	add	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d303      	bcc.n	800bbac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68d9      	ldr	r1, [r3, #12]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6838      	ldr	r0, [r7, #0]
 800bbb8:	f002 f9bc 	bl	800df34 <memcpy>
	}
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbcc:	f001 fc52 	bl	800d474 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbd8:	e011      	b.n	800bbfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d012      	beq.n	800bc08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3324      	adds	r3, #36	; 0x24
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 fd2a 	bl	800c640 <xTaskRemoveFromEventList>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbf2:	f000 fe01 	bl	800c7f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dce9      	bgt.n	800bbda <prvUnlockQueue+0x16>
 800bc06:	e000      	b.n	800bc0a <prvUnlockQueue+0x46>
					break;
 800bc08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	22ff      	movs	r2, #255	; 0xff
 800bc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc12:	f001 fc5f 	bl	800d4d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc16:	f001 fc2d 	bl	800d474 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc22:	e011      	b.n	800bc48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d012      	beq.n	800bc52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3310      	adds	r3, #16
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fd05 	bl	800c640 <xTaskRemoveFromEventList>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d001      	beq.n	800bc40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc3c:	f000 fddc 	bl	800c7f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dce9      	bgt.n	800bc24 <prvUnlockQueue+0x60>
 800bc50:	e000      	b.n	800bc54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	22ff      	movs	r2, #255	; 0xff
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc5c:	f001 fc3a 	bl	800d4d4 <vPortExitCritical>
}
 800bc60:	bf00      	nop
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc70:	f001 fc00 	bl	800d474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e001      	b.n	800bc86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc86:	f001 fc25 	bl	800d4d4 <vPortExitCritical>

	return xReturn;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc9c:	f001 fbea 	bl	800d474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d102      	bne.n	800bcb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e001      	b.n	800bcb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcb6:	f001 fc0d 	bl	800d4d4 <vPortExitCritical>

	return xReturn;
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e014      	b.n	800bcfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bcd4:	4a0f      	ldr	r2, [pc, #60]	; (800bd14 <vQueueAddToRegistry+0x50>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10b      	bne.n	800bcf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bce0:	490c      	ldr	r1, [pc, #48]	; (800bd14 <vQueueAddToRegistry+0x50>)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcea:	4a0a      	ldr	r2, [pc, #40]	; (800bd14 <vQueueAddToRegistry+0x50>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcf6:	e006      	b.n	800bd06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b07      	cmp	r3, #7
 800bd02:	d9e7      	bls.n	800bcd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20000c6c 	.word	0x20000c6c

0800bd18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd28:	f001 fba4 	bl	800d474 <vPortEnterCritical>
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd38:	d103      	bne.n	800bd42 <vQueueWaitForMessageRestricted+0x2a>
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd48:	b25b      	sxtb	r3, r3
 800bd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4e:	d103      	bne.n	800bd58 <vQueueWaitForMessageRestricted+0x40>
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd58:	f001 fbbc 	bl	800d4d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	3324      	adds	r3, #36	; 0x24
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 fc3b 	bl	800c5e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd72:	6978      	ldr	r0, [r7, #20]
 800bd74:	f7ff ff26 	bl	800bbc4 <prvUnlockQueue>
	}
 800bd78:	bf00      	nop
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	; 0x38
 800bd84:	af04      	add	r7, sp, #16
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	623b      	str	r3, [r7, #32]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <xTaskCreateStatic+0x46>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	61fb      	str	r3, [r7, #28]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bdc6:	235c      	movs	r3, #92	; 0x5c
 800bdc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b5c      	cmp	r3, #92	; 0x5c
 800bdce:	d00a      	beq.n	800bde6 <xTaskCreateStatic+0x66>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	61bb      	str	r3, [r7, #24]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bde6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01e      	beq.n	800be2c <xTaskCreateStatic+0xac>
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d01b      	beq.n	800be2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	2202      	movs	r2, #2
 800be02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be06:	2300      	movs	r3, #0
 800be08:	9303      	str	r3, [sp, #12]
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	9302      	str	r3, [sp, #8]
 800be0e:	f107 0314 	add.w	r3, r7, #20
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 f850 	bl	800bec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be26:	f000 f8dd 	bl	800bfe4 <prvAddNewTaskToReadyList>
 800be2a:	e001      	b.n	800be30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be30:	697b      	ldr	r3, [r7, #20]
	}
 800be32:	4618      	mov	r0, r3
 800be34:	3728      	adds	r7, #40	; 0x28
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b08c      	sub	sp, #48	; 0x30
 800be3e:	af04      	add	r7, sp, #16
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	60b9      	str	r1, [r7, #8]
 800be44:	603b      	str	r3, [r7, #0]
 800be46:	4613      	mov	r3, r2
 800be48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be4a:	88fb      	ldrh	r3, [r7, #6]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 fc32 	bl	800d6b8 <pvPortMalloc>
 800be54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00e      	beq.n	800be7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be5c:	205c      	movs	r0, #92	; 0x5c
 800be5e:	f001 fc2b 	bl	800d6b8 <pvPortMalloc>
 800be62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	631a      	str	r2, [r3, #48]	; 0x30
 800be70:	e005      	b.n	800be7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be72:	6978      	ldr	r0, [r7, #20]
 800be74:	f001 fcec 	bl	800d850 <vPortFree>
 800be78:	e001      	b.n	800be7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d017      	beq.n	800beb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	2300      	movs	r3, #0
 800be90:	9303      	str	r3, [sp, #12]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	9302      	str	r3, [sp, #8]
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	68b9      	ldr	r1, [r7, #8]
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 f80e 	bl	800bec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bea8:	69f8      	ldr	r0, [r7, #28]
 800beaa:	f000 f89b 	bl	800bfe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800beae:	2301      	movs	r3, #1
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	e002      	b.n	800beba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295
 800beb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800beba:	69bb      	ldr	r3, [r7, #24]
	}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3720      	adds	r7, #32
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	461a      	mov	r2, r3
 800bedc:	21a5      	movs	r1, #165	; 0xa5
 800bede:	f001 fff5 	bl	800decc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800beec:	3b01      	subs	r3, #1
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	f023 0307 	bic.w	r3, r3, #7
 800befa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	617b      	str	r3, [r7, #20]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d01f      	beq.n	800bf62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf22:	2300      	movs	r3, #0
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	e012      	b.n	800bf4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	7819      	ldrb	r1, [r3, #0]
 800bf30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	3334      	adds	r3, #52	; 0x34
 800bf38:	460a      	mov	r2, r1
 800bf3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	4413      	add	r3, r2
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	2b0f      	cmp	r3, #15
 800bf52:	d9e9      	bls.n	800bf28 <prvInitialiseNewTask+0x64>
 800bf54:	e000      	b.n	800bf58 <prvInitialiseNewTask+0x94>
			{
				break;
 800bf56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf60:	e003      	b.n	800bf6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	2b37      	cmp	r3, #55	; 0x37
 800bf6e:	d901      	bls.n	800bf74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf70:	2337      	movs	r3, #55	; 0x37
 800bf72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	2200      	movs	r2, #0
 800bf84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff f978 	bl	800b280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	3318      	adds	r3, #24
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff f973 	bl	800b280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	68f9      	ldr	r1, [r7, #12]
 800bfc2:	69b8      	ldr	r0, [r7, #24]
 800bfc4:	f001 f928 	bl	800d218 <pxPortInitialiseStack>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfda:	bf00      	nop
 800bfdc:	3720      	adds	r7, #32
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfec:	f001 fa42 	bl	800d474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bff0:	4b2d      	ldr	r3, [pc, #180]	; (800c0a8 <prvAddNewTaskToReadyList+0xc4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	4a2c      	ldr	r2, [pc, #176]	; (800c0a8 <prvAddNewTaskToReadyList+0xc4>)
 800bff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bffa:	4b2c      	ldr	r3, [pc, #176]	; (800c0ac <prvAddNewTaskToReadyList+0xc8>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d109      	bne.n	800c016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c002:	4a2a      	ldr	r2, [pc, #168]	; (800c0ac <prvAddNewTaskToReadyList+0xc8>)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c008:	4b27      	ldr	r3, [pc, #156]	; (800c0a8 <prvAddNewTaskToReadyList+0xc4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d110      	bne.n	800c032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c010:	f000 fc16 	bl	800c840 <prvInitialiseTaskLists>
 800c014:	e00d      	b.n	800c032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c016:	4b26      	ldr	r3, [pc, #152]	; (800c0b0 <prvAddNewTaskToReadyList+0xcc>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d109      	bne.n	800c032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c01e:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <prvAddNewTaskToReadyList+0xc8>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	429a      	cmp	r2, r3
 800c02a:	d802      	bhi.n	800c032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c02c:	4a1f      	ldr	r2, [pc, #124]	; (800c0ac <prvAddNewTaskToReadyList+0xc8>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c032:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <prvAddNewTaskToReadyList+0xd0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3301      	adds	r3, #1
 800c038:	4a1e      	ldr	r2, [pc, #120]	; (800c0b4 <prvAddNewTaskToReadyList+0xd0>)
 800c03a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c03c:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <prvAddNewTaskToReadyList+0xd0>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c048:	4b1b      	ldr	r3, [pc, #108]	; (800c0b8 <prvAddNewTaskToReadyList+0xd4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d903      	bls.n	800c058 <prvAddNewTaskToReadyList+0x74>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	4a18      	ldr	r2, [pc, #96]	; (800c0b8 <prvAddNewTaskToReadyList+0xd4>)
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <prvAddNewTaskToReadyList+0xd8>)
 800c066:	441a      	add	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4619      	mov	r1, r3
 800c06e:	4610      	mov	r0, r2
 800c070:	f7ff f913 	bl	800b29a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c074:	f001 fa2e 	bl	800d4d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c078:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <prvAddNewTaskToReadyList+0xcc>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00e      	beq.n	800c09e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <prvAddNewTaskToReadyList+0xc8>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d207      	bcs.n	800c09e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <prvAddNewTaskToReadyList+0xdc>)
 800c090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20001180 	.word	0x20001180
 800c0ac:	20000cac 	.word	0x20000cac
 800c0b0:	2000118c 	.word	0x2000118c
 800c0b4:	2000119c 	.word	0x2000119c
 800c0b8:	20001188 	.word	0x20001188
 800c0bc:	20000cb0 	.word	0x20000cb0
 800c0c0:	e000ed04 	.word	0xe000ed04

0800c0c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d017      	beq.n	800c106 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0d6:	4b13      	ldr	r3, [pc, #76]	; (800c124 <vTaskDelay+0x60>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00a      	beq.n	800c0f4 <vTaskDelay+0x30>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60bb      	str	r3, [r7, #8]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0f4:	f000 f880 	bl	800c1f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fcea 	bl	800cad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c100:	f000 f888 	bl	800c214 <xTaskResumeAll>
 800c104:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d107      	bne.n	800c11c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <vTaskDelay+0x64>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c11c:	bf00      	nop
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200011a8 	.word	0x200011a8
 800c128:	e000ed04 	.word	0xe000ed04

0800c12c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08a      	sub	sp, #40	; 0x28
 800c130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c136:	2300      	movs	r3, #0
 800c138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c13a:	463a      	mov	r2, r7
 800c13c:	1d39      	adds	r1, r7, #4
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff f848 	bl	800b1d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	9202      	str	r2, [sp, #8]
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	2300      	movs	r3, #0
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	2300      	movs	r3, #0
 800c158:	460a      	mov	r2, r1
 800c15a:	4921      	ldr	r1, [pc, #132]	; (800c1e0 <vTaskStartScheduler+0xb4>)
 800c15c:	4821      	ldr	r0, [pc, #132]	; (800c1e4 <vTaskStartScheduler+0xb8>)
 800c15e:	f7ff fe0f 	bl	800bd80 <xTaskCreateStatic>
 800c162:	4603      	mov	r3, r0
 800c164:	4a20      	ldr	r2, [pc, #128]	; (800c1e8 <vTaskStartScheduler+0xbc>)
 800c166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c168:	4b1f      	ldr	r3, [pc, #124]	; (800c1e8 <vTaskStartScheduler+0xbc>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d002      	beq.n	800c176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c170:	2301      	movs	r3, #1
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	e001      	b.n	800c17a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c176:	2300      	movs	r3, #0
 800c178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d102      	bne.n	800c186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c180:	f000 fcfc 	bl	800cb7c <xTimerCreateTimerTask>
 800c184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d116      	bne.n	800c1ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	613b      	str	r3, [r7, #16]
}
 800c19e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c1a0:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <vTaskStartScheduler+0xc0>)
 800c1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1a8:	4b11      	ldr	r3, [pc, #68]	; (800c1f0 <vTaskStartScheduler+0xc4>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1ae:	4b11      	ldr	r3, [pc, #68]	; (800c1f4 <vTaskStartScheduler+0xc8>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1b4:	f001 f8bc 	bl	800d330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1b8:	e00e      	b.n	800c1d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c0:	d10a      	bne.n	800c1d8 <vTaskStartScheduler+0xac>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	60fb      	str	r3, [r7, #12]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <vTaskStartScheduler+0xaa>
}
 800c1d8:	bf00      	nop
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	0800e938 	.word	0x0800e938
 800c1e4:	0800c811 	.word	0x0800c811
 800c1e8:	200011a4 	.word	0x200011a4
 800c1ec:	200011a0 	.word	0x200011a0
 800c1f0:	2000118c 	.word	0x2000118c
 800c1f4:	20001184 	.word	0x20001184

0800c1f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1fc:	4b04      	ldr	r3, [pc, #16]	; (800c210 <vTaskSuspendAll+0x18>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3301      	adds	r3, #1
 800c202:	4a03      	ldr	r2, [pc, #12]	; (800c210 <vTaskSuspendAll+0x18>)
 800c204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c206:	bf00      	nop
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	200011a8 	.word	0x200011a8

0800c214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c222:	4b42      	ldr	r3, [pc, #264]	; (800c32c <xTaskResumeAll+0x118>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10a      	bne.n	800c240 <xTaskResumeAll+0x2c>
	__asm volatile
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	603b      	str	r3, [r7, #0]
}
 800c23c:	bf00      	nop
 800c23e:	e7fe      	b.n	800c23e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c240:	f001 f918 	bl	800d474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c244:	4b39      	ldr	r3, [pc, #228]	; (800c32c <xTaskResumeAll+0x118>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3b01      	subs	r3, #1
 800c24a:	4a38      	ldr	r2, [pc, #224]	; (800c32c <xTaskResumeAll+0x118>)
 800c24c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c24e:	4b37      	ldr	r3, [pc, #220]	; (800c32c <xTaskResumeAll+0x118>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d162      	bne.n	800c31c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c256:	4b36      	ldr	r3, [pc, #216]	; (800c330 <xTaskResumeAll+0x11c>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d05e      	beq.n	800c31c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c25e:	e02f      	b.n	800c2c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c260:	4b34      	ldr	r3, [pc, #208]	; (800c334 <xTaskResumeAll+0x120>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3318      	adds	r3, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff f871 	bl	800b354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3304      	adds	r3, #4
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff f86c 	bl	800b354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c280:	4b2d      	ldr	r3, [pc, #180]	; (800c338 <xTaskResumeAll+0x124>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	429a      	cmp	r2, r3
 800c286:	d903      	bls.n	800c290 <xTaskResumeAll+0x7c>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28c:	4a2a      	ldr	r2, [pc, #168]	; (800c338 <xTaskResumeAll+0x124>)
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c294:	4613      	mov	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4a27      	ldr	r2, [pc, #156]	; (800c33c <xTaskResumeAll+0x128>)
 800c29e:	441a      	add	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fe fff7 	bl	800b29a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b0:	4b23      	ldr	r3, [pc, #140]	; (800c340 <xTaskResumeAll+0x12c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d302      	bcc.n	800c2c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c2ba:	4b22      	ldr	r3, [pc, #136]	; (800c344 <xTaskResumeAll+0x130>)
 800c2bc:	2201      	movs	r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2c0:	4b1c      	ldr	r3, [pc, #112]	; (800c334 <xTaskResumeAll+0x120>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1cb      	bne.n	800c260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2ce:	f000 fb55 	bl	800c97c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2d2:	4b1d      	ldr	r3, [pc, #116]	; (800c348 <xTaskResumeAll+0x134>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d010      	beq.n	800c300 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2de:	f000 f847 	bl	800c370 <xTaskIncrementTick>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d002      	beq.n	800c2ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c2e8:	4b16      	ldr	r3, [pc, #88]	; (800c344 <xTaskResumeAll+0x130>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1f1      	bne.n	800c2de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c2fa:	4b13      	ldr	r3, [pc, #76]	; (800c348 <xTaskResumeAll+0x134>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c300:	4b10      	ldr	r3, [pc, #64]	; (800c344 <xTaskResumeAll+0x130>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d009      	beq.n	800c31c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c308:	2301      	movs	r3, #1
 800c30a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <xTaskResumeAll+0x138>)
 800c30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c31c:	f001 f8da 	bl	800d4d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c320:	68bb      	ldr	r3, [r7, #8]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	200011a8 	.word	0x200011a8
 800c330:	20001180 	.word	0x20001180
 800c334:	20001140 	.word	0x20001140
 800c338:	20001188 	.word	0x20001188
 800c33c:	20000cb0 	.word	0x20000cb0
 800c340:	20000cac 	.word	0x20000cac
 800c344:	20001194 	.word	0x20001194
 800c348:	20001190 	.word	0x20001190
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <xTaskGetTickCount+0x1c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c35c:	687b      	ldr	r3, [r7, #4]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	20001184 	.word	0x20001184

0800c370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c37a:	4b4f      	ldr	r3, [pc, #316]	; (800c4b8 <xTaskIncrementTick+0x148>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 808f 	bne.w	800c4a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c384:	4b4d      	ldr	r3, [pc, #308]	; (800c4bc <xTaskIncrementTick+0x14c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c38c:	4a4b      	ldr	r2, [pc, #300]	; (800c4bc <xTaskIncrementTick+0x14c>)
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d120      	bne.n	800c3da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c398:	4b49      	ldr	r3, [pc, #292]	; (800c4c0 <xTaskIncrementTick+0x150>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00a      	beq.n	800c3b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	603b      	str	r3, [r7, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <xTaskIncrementTick+0x46>
 800c3b8:	4b41      	ldr	r3, [pc, #260]	; (800c4c0 <xTaskIncrementTick+0x150>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	4b41      	ldr	r3, [pc, #260]	; (800c4c4 <xTaskIncrementTick+0x154>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a3f      	ldr	r2, [pc, #252]	; (800c4c0 <xTaskIncrementTick+0x150>)
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	4a3f      	ldr	r2, [pc, #252]	; (800c4c4 <xTaskIncrementTick+0x154>)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	4b3e      	ldr	r3, [pc, #248]	; (800c4c8 <xTaskIncrementTick+0x158>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	4a3d      	ldr	r2, [pc, #244]	; (800c4c8 <xTaskIncrementTick+0x158>)
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	f000 fad1 	bl	800c97c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3da:	4b3c      	ldr	r3, [pc, #240]	; (800c4cc <xTaskIncrementTick+0x15c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d349      	bcc.n	800c478 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3e4:	4b36      	ldr	r3, [pc, #216]	; (800c4c0 <xTaskIncrementTick+0x150>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d104      	bne.n	800c3f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ee:	4b37      	ldr	r3, [pc, #220]	; (800c4cc <xTaskIncrementTick+0x15c>)
 800c3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f4:	601a      	str	r2, [r3, #0]
					break;
 800c3f6:	e03f      	b.n	800c478 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f8:	4b31      	ldr	r3, [pc, #196]	; (800c4c0 <xTaskIncrementTick+0x150>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d203      	bcs.n	800c418 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c410:	4a2e      	ldr	r2, [pc, #184]	; (800c4cc <xTaskIncrementTick+0x15c>)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c416:	e02f      	b.n	800c478 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fe ff99 	bl	800b354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c426:	2b00      	cmp	r3, #0
 800c428:	d004      	beq.n	800c434 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	3318      	adds	r3, #24
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe ff90 	bl	800b354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c438:	4b25      	ldr	r3, [pc, #148]	; (800c4d0 <xTaskIncrementTick+0x160>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d903      	bls.n	800c448 <xTaskIncrementTick+0xd8>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <xTaskIncrementTick+0x160>)
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c44c:	4613      	mov	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4a1f      	ldr	r2, [pc, #124]	; (800c4d4 <xTaskIncrementTick+0x164>)
 800c456:	441a      	add	r2, r3
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	3304      	adds	r3, #4
 800c45c:	4619      	mov	r1, r3
 800c45e:	4610      	mov	r0, r2
 800c460:	f7fe ff1b 	bl	800b29a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c468:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <xTaskIncrementTick+0x168>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	429a      	cmp	r2, r3
 800c470:	d3b8      	bcc.n	800c3e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c472:	2301      	movs	r3, #1
 800c474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c476:	e7b5      	b.n	800c3e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c478:	4b17      	ldr	r3, [pc, #92]	; (800c4d8 <xTaskIncrementTick+0x168>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47e:	4915      	ldr	r1, [pc, #84]	; (800c4d4 <xTaskIncrementTick+0x164>)
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d901      	bls.n	800c494 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c494:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <xTaskIncrementTick+0x16c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d007      	beq.n	800c4ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c49c:	2301      	movs	r3, #1
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e004      	b.n	800c4ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <xTaskIncrementTick+0x170>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <xTaskIncrementTick+0x170>)
 800c4aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4ac:	697b      	ldr	r3, [r7, #20]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	200011a8 	.word	0x200011a8
 800c4bc:	20001184 	.word	0x20001184
 800c4c0:	20001138 	.word	0x20001138
 800c4c4:	2000113c 	.word	0x2000113c
 800c4c8:	20001198 	.word	0x20001198
 800c4cc:	200011a0 	.word	0x200011a0
 800c4d0:	20001188 	.word	0x20001188
 800c4d4:	20000cb0 	.word	0x20000cb0
 800c4d8:	20000cac 	.word	0x20000cac
 800c4dc:	20001194 	.word	0x20001194
 800c4e0:	20001190 	.word	0x20001190

0800c4e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4ea:	4b28      	ldr	r3, [pc, #160]	; (800c58c <vTaskSwitchContext+0xa8>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4f2:	4b27      	ldr	r3, [pc, #156]	; (800c590 <vTaskSwitchContext+0xac>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4f8:	e041      	b.n	800c57e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c4fa:	4b25      	ldr	r3, [pc, #148]	; (800c590 <vTaskSwitchContext+0xac>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c500:	4b24      	ldr	r3, [pc, #144]	; (800c594 <vTaskSwitchContext+0xb0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	60fb      	str	r3, [r7, #12]
 800c506:	e010      	b.n	800c52a <vTaskSwitchContext+0x46>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <vTaskSwitchContext+0x40>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <vTaskSwitchContext+0x3e>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3b01      	subs	r3, #1
 800c528:	60fb      	str	r3, [r7, #12]
 800c52a:	491b      	ldr	r1, [pc, #108]	; (800c598 <vTaskSwitchContext+0xb4>)
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	440b      	add	r3, r1
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d0e4      	beq.n	800c508 <vTaskSwitchContext+0x24>
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	4613      	mov	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4a13      	ldr	r2, [pc, #76]	; (800c598 <vTaskSwitchContext+0xb4>)
 800c54a:	4413      	add	r3, r2
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	605a      	str	r2, [r3, #4]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	3308      	adds	r3, #8
 800c560:	429a      	cmp	r2, r3
 800c562:	d104      	bne.n	800c56e <vTaskSwitchContext+0x8a>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	4a09      	ldr	r2, [pc, #36]	; (800c59c <vTaskSwitchContext+0xb8>)
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	4a06      	ldr	r2, [pc, #24]	; (800c594 <vTaskSwitchContext+0xb0>)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6013      	str	r3, [r2, #0]
}
 800c57e:	bf00      	nop
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	200011a8 	.word	0x200011a8
 800c590:	20001194 	.word	0x20001194
 800c594:	20001188 	.word	0x20001188
 800c598:	20000cb0 	.word	0x20000cb0
 800c59c:	20000cac 	.word	0x20000cac

0800c5a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	60fb      	str	r3, [r7, #12]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5c6:	4b07      	ldr	r3, [pc, #28]	; (800c5e4 <vTaskPlaceOnEventList+0x44>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	3318      	adds	r3, #24
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7fe fe87 	bl	800b2e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	6838      	ldr	r0, [r7, #0]
 800c5d8:	f000 fa7c 	bl	800cad4 <prvAddCurrentTaskToDelayedList>
}
 800c5dc:	bf00      	nop
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000cac 	.word	0x20000cac

0800c5e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10a      	bne.n	800c610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	617b      	str	r3, [r7, #20]
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c610:	4b0a      	ldr	r3, [pc, #40]	; (800c63c <vTaskPlaceOnEventListRestricted+0x54>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3318      	adds	r3, #24
 800c616:	4619      	mov	r1, r3
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7fe fe3e 	bl	800b29a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c624:	f04f 33ff 	mov.w	r3, #4294967295
 800c628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	68b8      	ldr	r0, [r7, #8]
 800c62e:	f000 fa51 	bl	800cad4 <prvAddCurrentTaskToDelayedList>
	}
 800c632:	bf00      	nop
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20000cac 	.word	0x20000cac

0800c640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	60fb      	str	r3, [r7, #12]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	3318      	adds	r3, #24
 800c670:	4618      	mov	r0, r3
 800c672:	f7fe fe6f 	bl	800b354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c676:	4b1e      	ldr	r3, [pc, #120]	; (800c6f0 <xTaskRemoveFromEventList+0xb0>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d11d      	bne.n	800c6ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	3304      	adds	r3, #4
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fe66 	bl	800b354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68c:	4b19      	ldr	r3, [pc, #100]	; (800c6f4 <xTaskRemoveFromEventList+0xb4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d903      	bls.n	800c69c <xTaskRemoveFromEventList+0x5c>
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	4a16      	ldr	r2, [pc, #88]	; (800c6f4 <xTaskRemoveFromEventList+0xb4>)
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4a13      	ldr	r2, [pc, #76]	; (800c6f8 <xTaskRemoveFromEventList+0xb8>)
 800c6aa:	441a      	add	r2, r3
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	f7fe fdf1 	bl	800b29a <vListInsertEnd>
 800c6b8:	e005      	b.n	800c6c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	3318      	adds	r3, #24
 800c6be:	4619      	mov	r1, r3
 800c6c0:	480e      	ldr	r0, [pc, #56]	; (800c6fc <xTaskRemoveFromEventList+0xbc>)
 800c6c2:	f7fe fdea 	bl	800b29a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ca:	4b0d      	ldr	r3, [pc, #52]	; (800c700 <xTaskRemoveFromEventList+0xc0>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d905      	bls.n	800c6e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6d8:	4b0a      	ldr	r3, [pc, #40]	; (800c704 <xTaskRemoveFromEventList+0xc4>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	e001      	b.n	800c6e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6e4:	697b      	ldr	r3, [r7, #20]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	200011a8 	.word	0x200011a8
 800c6f4:	20001188 	.word	0x20001188
 800c6f8:	20000cb0 	.word	0x20000cb0
 800c6fc:	20001140 	.word	0x20001140
 800c700:	20000cac 	.word	0x20000cac
 800c704:	20001194 	.word	0x20001194

0800c708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c710:	4b06      	ldr	r3, [pc, #24]	; (800c72c <vTaskInternalSetTimeOutState+0x24>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c718:	4b05      	ldr	r3, [pc, #20]	; (800c730 <vTaskInternalSetTimeOutState+0x28>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	605a      	str	r2, [r3, #4]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20001198 	.word	0x20001198
 800c730:	20001184 	.word	0x20001184

0800c734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10a      	bne.n	800c75a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	613b      	str	r3, [r7, #16]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c776:	f000 fe7d 	bl	800d474 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c77a:	4b1d      	ldr	r3, [pc, #116]	; (800c7f0 <xTaskCheckForTimeOut+0xbc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	69ba      	ldr	r2, [r7, #24]
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c792:	d102      	bne.n	800c79a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]
 800c798:	e023      	b.n	800c7e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	4b15      	ldr	r3, [pc, #84]	; (800c7f4 <xTaskCheckForTimeOut+0xc0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d007      	beq.n	800c7b6 <xTaskCheckForTimeOut+0x82>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	69ba      	ldr	r2, [r7, #24]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d302      	bcc.n	800c7b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	61fb      	str	r3, [r7, #28]
 800c7b4:	e015      	b.n	800c7e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d20b      	bcs.n	800c7d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ff9b 	bl	800c708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	e004      	b.n	800c7e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7e2:	f000 fe77 	bl	800d4d4 <vPortExitCritical>

	return xReturn;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3720      	adds	r7, #32
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20001184 	.word	0x20001184
 800c7f4:	20001198 	.word	0x20001198

0800c7f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c7fc:	4b03      	ldr	r3, [pc, #12]	; (800c80c <vTaskMissedYield+0x14>)
 800c7fe:	2201      	movs	r2, #1
 800c800:	601a      	str	r2, [r3, #0]
}
 800c802:	bf00      	nop
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	20001194 	.word	0x20001194

0800c810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c818:	f000 f852 	bl	800c8c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c81c:	4b06      	ldr	r3, [pc, #24]	; (800c838 <prvIdleTask+0x28>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d9f9      	bls.n	800c818 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c824:	4b05      	ldr	r3, [pc, #20]	; (800c83c <prvIdleTask+0x2c>)
 800c826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c834:	e7f0      	b.n	800c818 <prvIdleTask+0x8>
 800c836:	bf00      	nop
 800c838:	20000cb0 	.word	0x20000cb0
 800c83c:	e000ed04 	.word	0xe000ed04

0800c840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c846:	2300      	movs	r3, #0
 800c848:	607b      	str	r3, [r7, #4]
 800c84a:	e00c      	b.n	800c866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4613      	mov	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4a12      	ldr	r2, [pc, #72]	; (800c8a0 <prvInitialiseTaskLists+0x60>)
 800c858:	4413      	add	r3, r2
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fcf0 	bl	800b240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3301      	adds	r3, #1
 800c864:	607b      	str	r3, [r7, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b37      	cmp	r3, #55	; 0x37
 800c86a:	d9ef      	bls.n	800c84c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c86c:	480d      	ldr	r0, [pc, #52]	; (800c8a4 <prvInitialiseTaskLists+0x64>)
 800c86e:	f7fe fce7 	bl	800b240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c872:	480d      	ldr	r0, [pc, #52]	; (800c8a8 <prvInitialiseTaskLists+0x68>)
 800c874:	f7fe fce4 	bl	800b240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c878:	480c      	ldr	r0, [pc, #48]	; (800c8ac <prvInitialiseTaskLists+0x6c>)
 800c87a:	f7fe fce1 	bl	800b240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c87e:	480c      	ldr	r0, [pc, #48]	; (800c8b0 <prvInitialiseTaskLists+0x70>)
 800c880:	f7fe fcde 	bl	800b240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c884:	480b      	ldr	r0, [pc, #44]	; (800c8b4 <prvInitialiseTaskLists+0x74>)
 800c886:	f7fe fcdb 	bl	800b240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c88a:	4b0b      	ldr	r3, [pc, #44]	; (800c8b8 <prvInitialiseTaskLists+0x78>)
 800c88c:	4a05      	ldr	r2, [pc, #20]	; (800c8a4 <prvInitialiseTaskLists+0x64>)
 800c88e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c890:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <prvInitialiseTaskLists+0x7c>)
 800c892:	4a05      	ldr	r2, [pc, #20]	; (800c8a8 <prvInitialiseTaskLists+0x68>)
 800c894:	601a      	str	r2, [r3, #0]
}
 800c896:	bf00      	nop
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000cb0 	.word	0x20000cb0
 800c8a4:	20001110 	.word	0x20001110
 800c8a8:	20001124 	.word	0x20001124
 800c8ac:	20001140 	.word	0x20001140
 800c8b0:	20001154 	.word	0x20001154
 800c8b4:	2000116c 	.word	0x2000116c
 800c8b8:	20001138 	.word	0x20001138
 800c8bc:	2000113c 	.word	0x2000113c

0800c8c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8c6:	e019      	b.n	800c8fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8c8:	f000 fdd4 	bl	800d474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8cc:	4b10      	ldr	r3, [pc, #64]	; (800c910 <prvCheckTasksWaitingTermination+0x50>)
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fe fd3b 	bl	800b354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8de:	4b0d      	ldr	r3, [pc, #52]	; (800c914 <prvCheckTasksWaitingTermination+0x54>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	4a0b      	ldr	r2, [pc, #44]	; (800c914 <prvCheckTasksWaitingTermination+0x54>)
 800c8e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8e8:	4b0b      	ldr	r3, [pc, #44]	; (800c918 <prvCheckTasksWaitingTermination+0x58>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	4a0a      	ldr	r2, [pc, #40]	; (800c918 <prvCheckTasksWaitingTermination+0x58>)
 800c8f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8f2:	f000 fdef 	bl	800d4d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f810 	bl	800c91c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8fc:	4b06      	ldr	r3, [pc, #24]	; (800c918 <prvCheckTasksWaitingTermination+0x58>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1e1      	bne.n	800c8c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20001154 	.word	0x20001154
 800c914:	20001180 	.word	0x20001180
 800c918:	20001168 	.word	0x20001168

0800c91c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d108      	bne.n	800c940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c932:	4618      	mov	r0, r3
 800c934:	f000 ff8c 	bl	800d850 <vPortFree>
				vPortFree( pxTCB );
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 ff89 	bl	800d850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c93e:	e018      	b.n	800c972 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c946:	2b01      	cmp	r3, #1
 800c948:	d103      	bne.n	800c952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 ff80 	bl	800d850 <vPortFree>
	}
 800c950:	e00f      	b.n	800c972 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d00a      	beq.n	800c972 <prvDeleteTCB+0x56>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	60fb      	str	r3, [r7, #12]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <prvDeleteTCB+0x54>
	}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c982:	4b0c      	ldr	r3, [pc, #48]	; (800c9b4 <prvResetNextTaskUnblockTime+0x38>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c98c:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295
 800c992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c994:	e008      	b.n	800c9a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c996:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <prvResetNextTaskUnblockTime+0x38>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	4a04      	ldr	r2, [pc, #16]	; (800c9b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c9a6:	6013      	str	r3, [r2, #0]
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	20001138 	.word	0x20001138
 800c9b8:	200011a0 	.word	0x200011a0

0800c9bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9c2:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <xTaskGetSchedulerState+0x34>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d102      	bne.n	800c9d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	e008      	b.n	800c9e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9d0:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <xTaskGetSchedulerState+0x38>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d102      	bne.n	800c9de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9d8:	2302      	movs	r3, #2
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	e001      	b.n	800c9e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9e2:	687b      	ldr	r3, [r7, #4]
	}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	2000118c 	.word	0x2000118c
 800c9f4:	200011a8 	.word	0x200011a8

0800c9f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca04:	2300      	movs	r3, #0
 800ca06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d056      	beq.n	800cabc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca0e:	4b2e      	ldr	r3, [pc, #184]	; (800cac8 <xTaskPriorityDisinherit+0xd0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d00a      	beq.n	800ca2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	60fb      	str	r3, [r7, #12]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	60bb      	str	r3, [r7, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca50:	1e5a      	subs	r2, r3, #1
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d02c      	beq.n	800cabc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d128      	bne.n	800cabc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fc70 	bl	800b354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca8c:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <xTaskPriorityDisinherit+0xd4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d903      	bls.n	800ca9c <xTaskPriorityDisinherit+0xa4>
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca98:	4a0c      	ldr	r2, [pc, #48]	; (800cacc <xTaskPriorityDisinherit+0xd4>)
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa0:	4613      	mov	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4a09      	ldr	r2, [pc, #36]	; (800cad0 <xTaskPriorityDisinherit+0xd8>)
 800caaa:	441a      	add	r2, r3
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	3304      	adds	r3, #4
 800cab0:	4619      	mov	r1, r3
 800cab2:	4610      	mov	r0, r2
 800cab4:	f7fe fbf1 	bl	800b29a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cab8:	2301      	movs	r3, #1
 800caba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cabc:	697b      	ldr	r3, [r7, #20]
	}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000cac 	.word	0x20000cac
 800cacc:	20001188 	.word	0x20001188
 800cad0:	20000cb0 	.word	0x20000cb0

0800cad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cade:	4b21      	ldr	r3, [pc, #132]	; (800cb64 <prvAddCurrentTaskToDelayedList+0x90>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cae4:	4b20      	ldr	r3, [pc, #128]	; (800cb68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3304      	adds	r3, #4
 800caea:	4618      	mov	r0, r3
 800caec:	f7fe fc32 	bl	800b354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf6:	d10a      	bne.n	800cb0e <prvAddCurrentTaskToDelayedList+0x3a>
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d007      	beq.n	800cb0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cafe:	4b1a      	ldr	r3, [pc, #104]	; (800cb68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3304      	adds	r3, #4
 800cb04:	4619      	mov	r1, r3
 800cb06:	4819      	ldr	r0, [pc, #100]	; (800cb6c <prvAddCurrentTaskToDelayedList+0x98>)
 800cb08:	f7fe fbc7 	bl	800b29a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb0c:	e026      	b.n	800cb5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4413      	add	r3, r2
 800cb14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d209      	bcs.n	800cb3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb26:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4b0f      	ldr	r3, [pc, #60]	; (800cb68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	4619      	mov	r1, r3
 800cb32:	4610      	mov	r0, r2
 800cb34:	f7fe fbd5 	bl	800b2e2 <vListInsert>
}
 800cb38:	e010      	b.n	800cb5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb3a:	4b0e      	ldr	r3, [pc, #56]	; (800cb74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3304      	adds	r3, #4
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f7fe fbcb 	bl	800b2e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d202      	bcs.n	800cb5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb56:	4a08      	ldr	r2, [pc, #32]	; (800cb78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	6013      	str	r3, [r2, #0]
}
 800cb5c:	bf00      	nop
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20001184 	.word	0x20001184
 800cb68:	20000cac 	.word	0x20000cac
 800cb6c:	2000116c 	.word	0x2000116c
 800cb70:	2000113c 	.word	0x2000113c
 800cb74:	20001138 	.word	0x20001138
 800cb78:	200011a0 	.word	0x200011a0

0800cb7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	; 0x28
 800cb80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb86:	f000 fb07 	bl	800d198 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb8a:	4b1c      	ldr	r3, [pc, #112]	; (800cbfc <xTimerCreateTimerTask+0x80>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d021      	beq.n	800cbd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb9a:	1d3a      	adds	r2, r7, #4
 800cb9c:	f107 0108 	add.w	r1, r7, #8
 800cba0:	f107 030c 	add.w	r3, r7, #12
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fe fb31 	bl	800b20c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	9202      	str	r2, [sp, #8]
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	460a      	mov	r2, r1
 800cbbc:	4910      	ldr	r1, [pc, #64]	; (800cc00 <xTimerCreateTimerTask+0x84>)
 800cbbe:	4811      	ldr	r0, [pc, #68]	; (800cc04 <xTimerCreateTimerTask+0x88>)
 800cbc0:	f7ff f8de 	bl	800bd80 <xTaskCreateStatic>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	4a10      	ldr	r2, [pc, #64]	; (800cc08 <xTimerCreateTimerTask+0x8c>)
 800cbc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbca:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <xTimerCreateTimerTask+0x8c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d001      	beq.n	800cbd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10a      	bne.n	800cbf2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	613b      	str	r3, [r7, #16]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cbf2:	697b      	ldr	r3, [r7, #20]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	200011dc 	.word	0x200011dc
 800cc00:	0800e940 	.word	0x0800e940
 800cc04:	0800cd41 	.word	0x0800cd41
 800cc08:	200011e0 	.word	0x200011e0

0800cc0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	; 0x28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	623b      	str	r3, [r7, #32]
}
 800cc36:	bf00      	nop
 800cc38:	e7fe      	b.n	800cc38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc3a:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <xTimerGenericCommand+0x98>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d02a      	beq.n	800cc98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b05      	cmp	r3, #5
 800cc52:	dc18      	bgt.n	800cc86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc54:	f7ff feb2 	bl	800c9bc <xTaskGetSchedulerState>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d109      	bne.n	800cc72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc5e:	4b11      	ldr	r3, [pc, #68]	; (800cca4 <xTimerGenericCommand+0x98>)
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f107 0110 	add.w	r1, r7, #16
 800cc66:	2300      	movs	r3, #0
 800cc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc6a:	f7fe fca1 	bl	800b5b0 <xQueueGenericSend>
 800cc6e:	6278      	str	r0, [r7, #36]	; 0x24
 800cc70:	e012      	b.n	800cc98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc72:	4b0c      	ldr	r3, [pc, #48]	; (800cca4 <xTimerGenericCommand+0x98>)
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	f107 0110 	add.w	r1, r7, #16
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f7fe fc97 	bl	800b5b0 <xQueueGenericSend>
 800cc82:	6278      	str	r0, [r7, #36]	; 0x24
 800cc84:	e008      	b.n	800cc98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc86:	4b07      	ldr	r3, [pc, #28]	; (800cca4 <xTimerGenericCommand+0x98>)
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	f107 0110 	add.w	r1, r7, #16
 800cc8e:	2300      	movs	r3, #0
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	f7fe fd8b 	bl	800b7ac <xQueueGenericSendFromISR>
 800cc96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3728      	adds	r7, #40	; 0x28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	200011dc 	.word	0x200011dc

0800cca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb2:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <prvProcessExpiredTimer+0x94>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fb47 	bl	800b354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cccc:	f003 0304 	and.w	r3, r3, #4
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d022      	beq.n	800cd1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	699a      	ldr	r2, [r3, #24]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	18d1      	adds	r1, r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	6978      	ldr	r0, [r7, #20]
 800cce2:	f000 f8d1 	bl	800ce88 <prvInsertTimerInActiveList>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d01f      	beq.n	800cd2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccec:	2300      	movs	r3, #0
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	6978      	ldr	r0, [r7, #20]
 800ccf8:	f7ff ff88 	bl	800cc0c <xTimerGenericCommand>
 800ccfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d113      	bne.n	800cd2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	60fb      	str	r3, [r7, #12]
}
 800cd16:	bf00      	nop
 800cd18:	e7fe      	b.n	800cd18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd20:	f023 0301 	bic.w	r3, r3, #1
 800cd24:	b2da      	uxtb	r2, r3
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	6a1b      	ldr	r3, [r3, #32]
 800cd30:	6978      	ldr	r0, [r7, #20]
 800cd32:	4798      	blx	r3
}
 800cd34:	bf00      	nop
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	200011d4 	.word	0x200011d4

0800cd40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd48:	f107 0308 	add.w	r3, r7, #8
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f857 	bl	800ce00 <prvGetNextExpireTime>
 800cd52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	4619      	mov	r1, r3
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 f803 	bl	800cd64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd5e:	f000 f8d5 	bl	800cf0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd62:	e7f1      	b.n	800cd48 <prvTimerTask+0x8>

0800cd64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd6e:	f7ff fa43 	bl	800c1f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 f866 	bl	800ce48 <prvSampleTimeNow>
 800cd7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d130      	bne.n	800cde6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <prvProcessTimerOrBlockTask+0x3c>
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d806      	bhi.n	800cda0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd92:	f7ff fa3f 	bl	800c214 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff85 	bl	800cca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd9e:	e024      	b.n	800cdea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d008      	beq.n	800cdb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cda6:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <prvProcessTimerOrBlockTask+0x90>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <prvProcessTimerOrBlockTask+0x50>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <prvProcessTimerOrBlockTask+0x52>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <prvProcessTimerOrBlockTask+0x94>)
 800cdba:	6818      	ldr	r0, [r3, #0]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	f7fe ffa7 	bl	800bd18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdca:	f7ff fa23 	bl	800c214 <xTaskResumeAll>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10a      	bne.n	800cdea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdd4:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <prvProcessTimerOrBlockTask+0x98>)
 800cdd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	f3bf 8f6f 	isb	sy
}
 800cde4:	e001      	b.n	800cdea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cde6:	f7ff fa15 	bl	800c214 <xTaskResumeAll>
}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	200011d8 	.word	0x200011d8
 800cdf8:	200011dc 	.word	0x200011dc
 800cdfc:	e000ed04 	.word	0xe000ed04

0800ce00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce08:	4b0e      	ldr	r3, [pc, #56]	; (800ce44 <prvGetNextExpireTime+0x44>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <prvGetNextExpireTime+0x16>
 800ce12:	2201      	movs	r2, #1
 800ce14:	e000      	b.n	800ce18 <prvGetNextExpireTime+0x18>
 800ce16:	2200      	movs	r2, #0
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d105      	bne.n	800ce30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce24:	4b07      	ldr	r3, [pc, #28]	; (800ce44 <prvGetNextExpireTime+0x44>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	60fb      	str	r3, [r7, #12]
 800ce2e:	e001      	b.n	800ce34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce30:	2300      	movs	r3, #0
 800ce32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce34:	68fb      	ldr	r3, [r7, #12]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	200011d4 	.word	0x200011d4

0800ce48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce50:	f7ff fa7e 	bl	800c350 <xTaskGetTickCount>
 800ce54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <prvSampleTimeNow+0x3c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d205      	bcs.n	800ce6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce60:	f000 f936 	bl	800d0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	e002      	b.n	800ce72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce72:	4a04      	ldr	r2, [pc, #16]	; (800ce84 <prvSampleTimeNow+0x3c>)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce78:	68fb      	ldr	r3, [r7, #12]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200011e4 	.word	0x200011e4

0800ce88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce96:	2300      	movs	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d812      	bhi.n	800ced4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	1ad2      	subs	r2, r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d302      	bcc.n	800cec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e01b      	b.n	800cefa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cec2:	4b10      	ldr	r3, [pc, #64]	; (800cf04 <prvInsertTimerInActiveList+0x7c>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fe fa08 	bl	800b2e2 <vListInsert>
 800ced2:	e012      	b.n	800cefa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d206      	bcs.n	800ceea <prvInsertTimerInActiveList+0x62>
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d302      	bcc.n	800ceea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cee4:	2301      	movs	r3, #1
 800cee6:	617b      	str	r3, [r7, #20]
 800cee8:	e007      	b.n	800cefa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <prvInsertTimerInActiveList+0x80>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3304      	adds	r3, #4
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7fe f9f4 	bl	800b2e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cefa:	697b      	ldr	r3, [r7, #20]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	200011d8 	.word	0x200011d8
 800cf08:	200011d4 	.word	0x200011d4

0800cf0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08e      	sub	sp, #56	; 0x38
 800cf10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf12:	e0ca      	b.n	800d0aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	da18      	bge.n	800cf4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf1a:	1d3b      	adds	r3, r7, #4
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10a      	bne.n	800cf3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	61fb      	str	r3, [r7, #28]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf42:	6850      	ldr	r0, [r2, #4]
 800cf44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf46:	6892      	ldr	r2, [r2, #8]
 800cf48:	4611      	mov	r1, r2
 800cf4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f2c0 80ab 	blt.w	800d0aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	695b      	ldr	r3, [r3, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d004      	beq.n	800cf6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	3304      	adds	r3, #4
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe f9f5 	bl	800b354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff ff6b 	bl	800ce48 <prvSampleTimeNow>
 800cf72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b09      	cmp	r3, #9
 800cf78:	f200 8096 	bhi.w	800d0a8 <prvProcessReceivedCommands+0x19c>
 800cf7c:	a201      	add	r2, pc, #4	; (adr r2, 800cf84 <prvProcessReceivedCommands+0x78>)
 800cf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf82:	bf00      	nop
 800cf84:	0800cfad 	.word	0x0800cfad
 800cf88:	0800cfad 	.word	0x0800cfad
 800cf8c:	0800cfad 	.word	0x0800cfad
 800cf90:	0800d021 	.word	0x0800d021
 800cf94:	0800d035 	.word	0x0800d035
 800cf98:	0800d07f 	.word	0x0800d07f
 800cf9c:	0800cfad 	.word	0x0800cfad
 800cfa0:	0800cfad 	.word	0x0800cfad
 800cfa4:	0800d021 	.word	0x0800d021
 800cfa8:	0800d035 	.word	0x0800d035
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfb2:	f043 0301 	orr.w	r3, r3, #1
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	18d1      	adds	r1, r2, r3
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfcc:	f7ff ff5c 	bl	800ce88 <prvInsertTimerInActiveList>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d069      	beq.n	800d0aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d05e      	beq.n	800d0aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	441a      	add	r2, r3
 800cff4:	2300      	movs	r3, #0
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	2300      	movs	r3, #0
 800cffa:	2100      	movs	r1, #0
 800cffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cffe:	f7ff fe05 	bl	800cc0c <xTimerGenericCommand>
 800d002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d14f      	bne.n	800d0aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00e:	f383 8811 	msr	BASEPRI, r3
 800d012:	f3bf 8f6f 	isb	sy
 800d016:	f3bf 8f4f 	dsb	sy
 800d01a:	61bb      	str	r3, [r7, #24]
}
 800d01c:	bf00      	nop
 800d01e:	e7fe      	b.n	800d01e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d026:	f023 0301 	bic.w	r3, r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d032:	e03a      	b.n	800d0aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d03a:	f043 0301 	orr.w	r3, r3, #1
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10a      	bne.n	800d06a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	617b      	str	r3, [r7, #20]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	699a      	ldr	r2, [r3, #24]
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	18d1      	adds	r1, r2, r3
 800d072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d078:	f7ff ff06 	bl	800ce88 <prvInsertTimerInActiveList>
					break;
 800d07c:	e015      	b.n	800d0aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d103      	bne.n	800d094 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d08c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d08e:	f000 fbdf 	bl	800d850 <vPortFree>
 800d092:	e00a      	b.n	800d0aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d09a:	f023 0301 	bic.w	r3, r3, #1
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0a6:	e000      	b.n	800d0aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0aa:	4b08      	ldr	r3, [pc, #32]	; (800d0cc <prvProcessReceivedCommands+0x1c0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	1d39      	adds	r1, r7, #4
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe fc16 	bl	800b8e4 <xQueueReceive>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f47f af2a 	bne.w	800cf14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d0c0:	bf00      	nop
 800d0c2:	bf00      	nop
 800d0c4:	3730      	adds	r7, #48	; 0x30
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	200011dc 	.word	0x200011dc

0800d0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b088      	sub	sp, #32
 800d0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0d6:	e048      	b.n	800d16a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0d8:	4b2d      	ldr	r3, [pc, #180]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e2:	4b2b      	ldr	r3, [pc, #172]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe f92f 	bl	800b354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d104:	f003 0304 	and.w	r3, r3, #4
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d02e      	beq.n	800d16a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	699b      	ldr	r3, [r3, #24]
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	4413      	add	r3, r2
 800d114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d90e      	bls.n	800d13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d12a:	4b19      	ldr	r3, [pc, #100]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3304      	adds	r3, #4
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fe f8d4 	bl	800b2e2 <vListInsert>
 800d13a:	e016      	b.n	800d16a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d13c:	2300      	movs	r3, #0
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	2300      	movs	r3, #0
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	2100      	movs	r1, #0
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f7ff fd60 	bl	800cc0c <xTimerGenericCommand>
 800d14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	603b      	str	r3, [r7, #0]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d16a:	4b09      	ldr	r3, [pc, #36]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1b1      	bne.n	800d0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d174:	4b06      	ldr	r3, [pc, #24]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d17a:	4b06      	ldr	r3, [pc, #24]	; (800d194 <prvSwitchTimerLists+0xc4>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4a04      	ldr	r2, [pc, #16]	; (800d190 <prvSwitchTimerLists+0xc0>)
 800d180:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d182:	4a04      	ldr	r2, [pc, #16]	; (800d194 <prvSwitchTimerLists+0xc4>)
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	6013      	str	r3, [r2, #0]
}
 800d188:	bf00      	nop
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	200011d4 	.word	0x200011d4
 800d194:	200011d8 	.word	0x200011d8

0800d198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d19e:	f000 f969 	bl	800d474 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <prvCheckForValidListAndQueue+0x60>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d120      	bne.n	800d1ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d1aa:	4814      	ldr	r0, [pc, #80]	; (800d1fc <prvCheckForValidListAndQueue+0x64>)
 800d1ac:	f7fe f848 	bl	800b240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1b0:	4813      	ldr	r0, [pc, #76]	; (800d200 <prvCheckForValidListAndQueue+0x68>)
 800d1b2:	f7fe f845 	bl	800b240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1b6:	4b13      	ldr	r3, [pc, #76]	; (800d204 <prvCheckForValidListAndQueue+0x6c>)
 800d1b8:	4a10      	ldr	r2, [pc, #64]	; (800d1fc <prvCheckForValidListAndQueue+0x64>)
 800d1ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1bc:	4b12      	ldr	r3, [pc, #72]	; (800d208 <prvCheckForValidListAndQueue+0x70>)
 800d1be:	4a10      	ldr	r2, [pc, #64]	; (800d200 <prvCheckForValidListAndQueue+0x68>)
 800d1c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	4b11      	ldr	r3, [pc, #68]	; (800d20c <prvCheckForValidListAndQueue+0x74>)
 800d1c8:	4a11      	ldr	r2, [pc, #68]	; (800d210 <prvCheckForValidListAndQueue+0x78>)
 800d1ca:	2110      	movs	r1, #16
 800d1cc:	200a      	movs	r0, #10
 800d1ce:	f7fe f953 	bl	800b478 <xQueueGenericCreateStatic>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4a08      	ldr	r2, [pc, #32]	; (800d1f8 <prvCheckForValidListAndQueue+0x60>)
 800d1d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1d8:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <prvCheckForValidListAndQueue+0x60>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d005      	beq.n	800d1ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <prvCheckForValidListAndQueue+0x60>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	490b      	ldr	r1, [pc, #44]	; (800d214 <prvCheckForValidListAndQueue+0x7c>)
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fd6c 	bl	800bcc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1ec:	f000 f972 	bl	800d4d4 <vPortExitCritical>
}
 800d1f0:	bf00      	nop
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	200011dc 	.word	0x200011dc
 800d1fc:	200011ac 	.word	0x200011ac
 800d200:	200011c0 	.word	0x200011c0
 800d204:	200011d4 	.word	0x200011d4
 800d208:	200011d8 	.word	0x200011d8
 800d20c:	20001288 	.word	0x20001288
 800d210:	200011e8 	.word	0x200011e8
 800d214:	0800e948 	.word	0x0800e948

0800d218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3b04      	subs	r3, #4
 800d228:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3b04      	subs	r3, #4
 800d236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	f023 0201 	bic.w	r2, r3, #1
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3b04      	subs	r3, #4
 800d246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d248:	4a0c      	ldr	r2, [pc, #48]	; (800d27c <pxPortInitialiseStack+0x64>)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3b14      	subs	r3, #20
 800d252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3b04      	subs	r3, #4
 800d25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f06f 0202 	mvn.w	r2, #2
 800d266:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	3b20      	subs	r3, #32
 800d26c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d26e:	68fb      	ldr	r3, [r7, #12]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	0800d281 	.word	0x0800d281

0800d280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d28a:	4b12      	ldr	r3, [pc, #72]	; (800d2d4 <prvTaskExitError+0x54>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d00a      	beq.n	800d2aa <prvTaskExitError+0x2a>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	60fb      	str	r3, [r7, #12]
}
 800d2a6:	bf00      	nop
 800d2a8:	e7fe      	b.n	800d2a8 <prvTaskExitError+0x28>
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	60bb      	str	r3, [r7, #8]
}
 800d2bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2be:	bf00      	nop
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d0fc      	beq.n	800d2c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2c6:	bf00      	nop
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	20000018 	.word	0x20000018
	...

0800d2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2e0:	4b07      	ldr	r3, [pc, #28]	; (800d300 <pxCurrentTCBConst2>)
 800d2e2:	6819      	ldr	r1, [r3, #0]
 800d2e4:	6808      	ldr	r0, [r1, #0]
 800d2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ea:	f380 8809 	msr	PSP, r0
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f04f 0000 	mov.w	r0, #0
 800d2f6:	f380 8811 	msr	BASEPRI, r0
 800d2fa:	4770      	bx	lr
 800d2fc:	f3af 8000 	nop.w

0800d300 <pxCurrentTCBConst2>:
 800d300:	20000cac 	.word	0x20000cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d304:	bf00      	nop
 800d306:	bf00      	nop

0800d308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d308:	4808      	ldr	r0, [pc, #32]	; (800d32c <prvPortStartFirstTask+0x24>)
 800d30a:	6800      	ldr	r0, [r0, #0]
 800d30c:	6800      	ldr	r0, [r0, #0]
 800d30e:	f380 8808 	msr	MSP, r0
 800d312:	f04f 0000 	mov.w	r0, #0
 800d316:	f380 8814 	msr	CONTROL, r0
 800d31a:	b662      	cpsie	i
 800d31c:	b661      	cpsie	f
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	df00      	svc	0
 800d328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d32a:	bf00      	nop
 800d32c:	e000ed08 	.word	0xe000ed08

0800d330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d336:	4b46      	ldr	r3, [pc, #280]	; (800d450 <xPortStartScheduler+0x120>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a46      	ldr	r2, [pc, #280]	; (800d454 <xPortStartScheduler+0x124>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d10a      	bne.n	800d356 <xPortStartScheduler+0x26>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	613b      	str	r3, [r7, #16]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d356:	4b3e      	ldr	r3, [pc, #248]	; (800d450 <xPortStartScheduler+0x120>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a3f      	ldr	r2, [pc, #252]	; (800d458 <xPortStartScheduler+0x128>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d10a      	bne.n	800d376 <xPortStartScheduler+0x46>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60fb      	str	r3, [r7, #12]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d376:	4b39      	ldr	r3, [pc, #228]	; (800d45c <xPortStartScheduler+0x12c>)
 800d378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	22ff      	movs	r2, #255	; 0xff
 800d386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	b2db      	uxtb	r3, r3
 800d394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	4b31      	ldr	r3, [pc, #196]	; (800d460 <xPortStartScheduler+0x130>)
 800d39c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d39e:	4b31      	ldr	r3, [pc, #196]	; (800d464 <xPortStartScheduler+0x134>)
 800d3a0:	2207      	movs	r2, #7
 800d3a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3a4:	e009      	b.n	800d3ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d3a6:	4b2f      	ldr	r3, [pc, #188]	; (800d464 <xPortStartScheduler+0x134>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	4a2d      	ldr	r2, [pc, #180]	; (800d464 <xPortStartScheduler+0x134>)
 800d3ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3b0:	78fb      	ldrb	r3, [r7, #3]
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3c2:	2b80      	cmp	r3, #128	; 0x80
 800d3c4:	d0ef      	beq.n	800d3a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3c6:	4b27      	ldr	r3, [pc, #156]	; (800d464 <xPortStartScheduler+0x134>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f1c3 0307 	rsb	r3, r3, #7
 800d3ce:	2b04      	cmp	r3, #4
 800d3d0:	d00a      	beq.n	800d3e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	60bb      	str	r3, [r7, #8]
}
 800d3e4:	bf00      	nop
 800d3e6:	e7fe      	b.n	800d3e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3e8:	4b1e      	ldr	r3, [pc, #120]	; (800d464 <xPortStartScheduler+0x134>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	021b      	lsls	r3, r3, #8
 800d3ee:	4a1d      	ldr	r2, [pc, #116]	; (800d464 <xPortStartScheduler+0x134>)
 800d3f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3f2:	4b1c      	ldr	r3, [pc, #112]	; (800d464 <xPortStartScheduler+0x134>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3fa:	4a1a      	ldr	r2, [pc, #104]	; (800d464 <xPortStartScheduler+0x134>)
 800d3fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	b2da      	uxtb	r2, r3
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d406:	4b18      	ldr	r3, [pc, #96]	; (800d468 <xPortStartScheduler+0x138>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a17      	ldr	r2, [pc, #92]	; (800d468 <xPortStartScheduler+0x138>)
 800d40c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d412:	4b15      	ldr	r3, [pc, #84]	; (800d468 <xPortStartScheduler+0x138>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a14      	ldr	r2, [pc, #80]	; (800d468 <xPortStartScheduler+0x138>)
 800d418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d41c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d41e:	f000 f8dd 	bl	800d5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d422:	4b12      	ldr	r3, [pc, #72]	; (800d46c <xPortStartScheduler+0x13c>)
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d428:	f000 f8fc 	bl	800d624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d42c:	4b10      	ldr	r3, [pc, #64]	; (800d470 <xPortStartScheduler+0x140>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a0f      	ldr	r2, [pc, #60]	; (800d470 <xPortStartScheduler+0x140>)
 800d432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d438:	f7ff ff66 	bl	800d308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d43c:	f7ff f852 	bl	800c4e4 <vTaskSwitchContext>
	prvTaskExitError();
 800d440:	f7ff ff1e 	bl	800d280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	e000ed00 	.word	0xe000ed00
 800d454:	410fc271 	.word	0x410fc271
 800d458:	410fc270 	.word	0x410fc270
 800d45c:	e000e400 	.word	0xe000e400
 800d460:	200012d8 	.word	0x200012d8
 800d464:	200012dc 	.word	0x200012dc
 800d468:	e000ed20 	.word	0xe000ed20
 800d46c:	20000018 	.word	0x20000018
 800d470:	e000ef34 	.word	0xe000ef34

0800d474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	607b      	str	r3, [r7, #4]
}
 800d48c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d48e:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <vPortEnterCritical+0x58>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3301      	adds	r3, #1
 800d494:	4a0d      	ldr	r2, [pc, #52]	; (800d4cc <vPortEnterCritical+0x58>)
 800d496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d498:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <vPortEnterCritical+0x58>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d10f      	bne.n	800d4c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <vPortEnterCritical+0x5c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00a      	beq.n	800d4c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	603b      	str	r3, [r7, #0]
}
 800d4bc:	bf00      	nop
 800d4be:	e7fe      	b.n	800d4be <vPortEnterCritical+0x4a>
	}
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20000018 	.word	0x20000018
 800d4d0:	e000ed04 	.word	0xe000ed04

0800d4d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <vPortExitCritical+0x50>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10a      	bne.n	800d4f8 <vPortExitCritical+0x24>
	__asm volatile
 800d4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	607b      	str	r3, [r7, #4]
}
 800d4f4:	bf00      	nop
 800d4f6:	e7fe      	b.n	800d4f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <vPortExitCritical+0x50>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	4a09      	ldr	r2, [pc, #36]	; (800d524 <vPortExitCritical+0x50>)
 800d500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d502:	4b08      	ldr	r3, [pc, #32]	; (800d524 <vPortExitCritical+0x50>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d105      	bne.n	800d516 <vPortExitCritical+0x42>
 800d50a:	2300      	movs	r3, #0
 800d50c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	f383 8811 	msr	BASEPRI, r3
}
 800d514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d516:	bf00      	nop
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20000018 	.word	0x20000018
	...

0800d530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d530:	f3ef 8009 	mrs	r0, PSP
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	4b15      	ldr	r3, [pc, #84]	; (800d590 <pxCurrentTCBConst>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	f01e 0f10 	tst.w	lr, #16
 800d540:	bf08      	it	eq
 800d542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	6010      	str	r0, [r2, #0]
 800d54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d554:	f380 8811 	msr	BASEPRI, r0
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f7fe ffc0 	bl	800c4e4 <vTaskSwitchContext>
 800d564:	f04f 0000 	mov.w	r0, #0
 800d568:	f380 8811 	msr	BASEPRI, r0
 800d56c:	bc09      	pop	{r0, r3}
 800d56e:	6819      	ldr	r1, [r3, #0]
 800d570:	6808      	ldr	r0, [r1, #0]
 800d572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d576:	f01e 0f10 	tst.w	lr, #16
 800d57a:	bf08      	it	eq
 800d57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d580:	f380 8809 	msr	PSP, r0
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	f3af 8000 	nop.w

0800d590 <pxCurrentTCBConst>:
 800d590:	20000cac 	.word	0x20000cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop

0800d598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	607b      	str	r3, [r7, #4]
}
 800d5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5b2:	f7fe fedd 	bl	800c370 <xTaskIncrementTick>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5bc:	4b06      	ldr	r3, [pc, #24]	; (800d5d8 <xPortSysTickHandler+0x40>)
 800d5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	f383 8811 	msr	BASEPRI, r3
}
 800d5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	e000ed04 	.word	0xe000ed04

0800d5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5e0:	4b0b      	ldr	r3, [pc, #44]	; (800d610 <vPortSetupTimerInterrupt+0x34>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <vPortSetupTimerInterrupt+0x38>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <vPortSetupTimerInterrupt+0x3c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a0a      	ldr	r2, [pc, #40]	; (800d61c <vPortSetupTimerInterrupt+0x40>)
 800d5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5f6:	099b      	lsrs	r3, r3, #6
 800d5f8:	4a09      	ldr	r2, [pc, #36]	; (800d620 <vPortSetupTimerInterrupt+0x44>)
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5fe:	4b04      	ldr	r3, [pc, #16]	; (800d610 <vPortSetupTimerInterrupt+0x34>)
 800d600:	2207      	movs	r2, #7
 800d602:	601a      	str	r2, [r3, #0]
}
 800d604:	bf00      	nop
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	e000e010 	.word	0xe000e010
 800d614:	e000e018 	.word	0xe000e018
 800d618:	2000000c 	.word	0x2000000c
 800d61c:	10624dd3 	.word	0x10624dd3
 800d620:	e000e014 	.word	0xe000e014

0800d624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d634 <vPortEnableVFP+0x10>
 800d628:	6801      	ldr	r1, [r0, #0]
 800d62a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d62e:	6001      	str	r1, [r0, #0]
 800d630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d632:	bf00      	nop
 800d634:	e000ed88 	.word	0xe000ed88

0800d638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d63e:	f3ef 8305 	mrs	r3, IPSR
 800d642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b0f      	cmp	r3, #15
 800d648:	d914      	bls.n	800d674 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d64a:	4a17      	ldr	r2, [pc, #92]	; (800d6a8 <vPortValidateInterruptPriority+0x70>)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4413      	add	r3, r2
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d654:	4b15      	ldr	r3, [pc, #84]	; (800d6ac <vPortValidateInterruptPriority+0x74>)
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	7afa      	ldrb	r2, [r7, #11]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d20a      	bcs.n	800d674 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	607b      	str	r3, [r7, #4]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d674:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <vPortValidateInterruptPriority+0x78>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d67c:	4b0d      	ldr	r3, [pc, #52]	; (800d6b4 <vPortValidateInterruptPriority+0x7c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	429a      	cmp	r2, r3
 800d682:	d90a      	bls.n	800d69a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	603b      	str	r3, [r7, #0]
}
 800d696:	bf00      	nop
 800d698:	e7fe      	b.n	800d698 <vPortValidateInterruptPriority+0x60>
	}
 800d69a:	bf00      	nop
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	e000e3f0 	.word	0xe000e3f0
 800d6ac:	200012d8 	.word	0x200012d8
 800d6b0:	e000ed0c 	.word	0xe000ed0c
 800d6b4:	200012dc 	.word	0x200012dc

0800d6b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6c4:	f7fe fd98 	bl	800c1f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6c8:	4b5b      	ldr	r3, [pc, #364]	; (800d838 <pvPortMalloc+0x180>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6d0:	f000 f920 	bl	800d914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6d4:	4b59      	ldr	r3, [pc, #356]	; (800d83c <pvPortMalloc+0x184>)
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f040 8093 	bne.w	800d808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d01d      	beq.n	800d724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6e8:	2208      	movs	r2, #8
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f003 0307 	and.w	r3, r3, #7
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d014      	beq.n	800d724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f023 0307 	bic.w	r3, r3, #7
 800d700:	3308      	adds	r3, #8
 800d702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00a      	beq.n	800d724 <pvPortMalloc+0x6c>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	617b      	str	r3, [r7, #20]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d06e      	beq.n	800d808 <pvPortMalloc+0x150>
 800d72a:	4b45      	ldr	r3, [pc, #276]	; (800d840 <pvPortMalloc+0x188>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	429a      	cmp	r2, r3
 800d732:	d869      	bhi.n	800d808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d734:	4b43      	ldr	r3, [pc, #268]	; (800d844 <pvPortMalloc+0x18c>)
 800d736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d738:	4b42      	ldr	r3, [pc, #264]	; (800d844 <pvPortMalloc+0x18c>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d73e:	e004      	b.n	800d74a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d903      	bls.n	800d75c <pvPortMalloc+0xa4>
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1f1      	bne.n	800d740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d75c:	4b36      	ldr	r3, [pc, #216]	; (800d838 <pvPortMalloc+0x180>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d762:	429a      	cmp	r2, r3
 800d764:	d050      	beq.n	800d808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2208      	movs	r2, #8
 800d76c:	4413      	add	r3, r2
 800d76e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	2308      	movs	r3, #8
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	429a      	cmp	r2, r3
 800d786:	d91f      	bls.n	800d7c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	f003 0307 	and.w	r3, r3, #7
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <pvPortMalloc+0xf8>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	613b      	str	r3, [r7, #16]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	685a      	ldr	r2, [r3, #4]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7c2:	69b8      	ldr	r0, [r7, #24]
 800d7c4:	f000 f908 	bl	800d9d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7c8:	4b1d      	ldr	r3, [pc, #116]	; (800d840 <pvPortMalloc+0x188>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	4a1b      	ldr	r2, [pc, #108]	; (800d840 <pvPortMalloc+0x188>)
 800d7d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7d6:	4b1a      	ldr	r3, [pc, #104]	; (800d840 <pvPortMalloc+0x188>)
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	4b1b      	ldr	r3, [pc, #108]	; (800d848 <pvPortMalloc+0x190>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d203      	bcs.n	800d7ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7e2:	4b17      	ldr	r3, [pc, #92]	; (800d840 <pvPortMalloc+0x188>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a18      	ldr	r2, [pc, #96]	; (800d848 <pvPortMalloc+0x190>)
 800d7e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	4b13      	ldr	r3, [pc, #76]	; (800d83c <pvPortMalloc+0x184>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	431a      	orrs	r2, r3
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <pvPortMalloc+0x194>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3301      	adds	r3, #1
 800d804:	4a11      	ldr	r2, [pc, #68]	; (800d84c <pvPortMalloc+0x194>)
 800d806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d808:	f7fe fd04 	bl	800c214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	f003 0307 	and.w	r3, r3, #7
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00a      	beq.n	800d82c <pvPortMalloc+0x174>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	60fb      	str	r3, [r7, #12]
}
 800d828:	bf00      	nop
 800d82a:	e7fe      	b.n	800d82a <pvPortMalloc+0x172>
	return pvReturn;
 800d82c:	69fb      	ldr	r3, [r7, #28]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3728      	adds	r7, #40	; 0x28
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20004ee8 	.word	0x20004ee8
 800d83c:	20004efc 	.word	0x20004efc
 800d840:	20004eec 	.word	0x20004eec
 800d844:	20004ee0 	.word	0x20004ee0
 800d848:	20004ef0 	.word	0x20004ef0
 800d84c:	20004ef4 	.word	0x20004ef4

0800d850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d04d      	beq.n	800d8fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d862:	2308      	movs	r3, #8
 800d864:	425b      	negs	r3, r3
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	4413      	add	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	4b24      	ldr	r3, [pc, #144]	; (800d908 <vPortFree+0xb8>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4013      	ands	r3, r2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <vPortFree+0x44>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60fb      	str	r3, [r7, #12]
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00a      	beq.n	800d8b2 <vPortFree+0x62>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	60bb      	str	r3, [r7, #8]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	4b14      	ldr	r3, [pc, #80]	; (800d908 <vPortFree+0xb8>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d01e      	beq.n	800d8fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11a      	bne.n	800d8fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <vPortFree+0xb8>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	43db      	mvns	r3, r3
 800d8d2:	401a      	ands	r2, r3
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8d8:	f7fe fc8e 	bl	800c1f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	685a      	ldr	r2, [r3, #4]
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <vPortFree+0xbc>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	4a09      	ldr	r2, [pc, #36]	; (800d90c <vPortFree+0xbc>)
 800d8e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ea:	6938      	ldr	r0, [r7, #16]
 800d8ec:	f000 f874 	bl	800d9d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8f0:	4b07      	ldr	r3, [pc, #28]	; (800d910 <vPortFree+0xc0>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	4a06      	ldr	r2, [pc, #24]	; (800d910 <vPortFree+0xc0>)
 800d8f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8fa:	f7fe fc8b 	bl	800c214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8fe:	bf00      	nop
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20004efc 	.word	0x20004efc
 800d90c:	20004eec 	.word	0x20004eec
 800d910:	20004ef8 	.word	0x20004ef8

0800d914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d91a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d91e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d920:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <prvHeapInit+0xac>)
 800d922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f003 0307 	and.w	r3, r3, #7
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00c      	beq.n	800d948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3307      	adds	r3, #7
 800d932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d93c:	68ba      	ldr	r2, [r7, #8]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	4a1f      	ldr	r2, [pc, #124]	; (800d9c0 <prvHeapInit+0xac>)
 800d944:	4413      	add	r3, r2
 800d946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d94c:	4a1d      	ldr	r2, [pc, #116]	; (800d9c4 <prvHeapInit+0xb0>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d952:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <prvHeapInit+0xb0>)
 800d954:	2200      	movs	r2, #0
 800d956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	4413      	add	r3, r2
 800d95e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d960:	2208      	movs	r2, #8
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1a9b      	subs	r3, r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 0307 	bic.w	r3, r3, #7
 800d96e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4a15      	ldr	r2, [pc, #84]	; (800d9c8 <prvHeapInit+0xb4>)
 800d974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d976:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <prvHeapInit+0xb4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2200      	movs	r2, #0
 800d97c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d97e:	4b12      	ldr	r3, [pc, #72]	; (800d9c8 <prvHeapInit+0xb4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d994:	4b0c      	ldr	r3, [pc, #48]	; (800d9c8 <prvHeapInit+0xb4>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	4a0a      	ldr	r2, [pc, #40]	; (800d9cc <prvHeapInit+0xb8>)
 800d9a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4a09      	ldr	r2, [pc, #36]	; (800d9d0 <prvHeapInit+0xbc>)
 800d9aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9ac:	4b09      	ldr	r3, [pc, #36]	; (800d9d4 <prvHeapInit+0xc0>)
 800d9ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9b2:	601a      	str	r2, [r3, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	200012e0 	.word	0x200012e0
 800d9c4:	20004ee0 	.word	0x20004ee0
 800d9c8:	20004ee8 	.word	0x20004ee8
 800d9cc:	20004ef0 	.word	0x20004ef0
 800d9d0:	20004eec 	.word	0x20004eec
 800d9d4:	20004efc 	.word	0x20004efc

0800d9d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9e0:	4b28      	ldr	r3, [pc, #160]	; (800da84 <prvInsertBlockIntoFreeList+0xac>)
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e002      	b.n	800d9ec <prvInsertBlockIntoFreeList+0x14>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d8f7      	bhi.n	800d9e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	4413      	add	r3, r2
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	429a      	cmp	r2, r3
 800da06:	d108      	bne.n	800da1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	441a      	add	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	441a      	add	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d118      	bne.n	800da60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	4b15      	ldr	r3, [pc, #84]	; (800da88 <prvInsertBlockIntoFreeList+0xb0>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d00d      	beq.n	800da56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	441a      	add	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	e008      	b.n	800da68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da56:	4b0c      	ldr	r3, [pc, #48]	; (800da88 <prvInsertBlockIntoFreeList+0xb0>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	e003      	b.n	800da68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d002      	beq.n	800da76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da76:	bf00      	nop
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20004ee0 	.word	0x20004ee0
 800da88:	20004ee8 	.word	0x20004ee8

0800da8c <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af04      	add	r7, sp, #16
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	460b      	mov	r3, r1
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	011b      	lsls	r3, r3, #4
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800daa8:	7afb      	ldrb	r3, [r7, #11]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d101      	bne.n	800dab2 <_ICM20948_SelectUserBank+0x26>
 800daae:	2368      	movs	r3, #104	; 0x68
 800dab0:	e000      	b.n	800dab4 <_ICM20948_SelectUserBank+0x28>
 800dab2:	2369      	movs	r3, #105	; 0x69
 800dab4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800dab6:	7dbb      	ldrb	r3, [r7, #22]
 800dab8:	b29b      	uxth	r3, r3
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	b299      	uxth	r1, r3
 800dabe:	230a      	movs	r3, #10
 800dac0:	9302      	str	r3, [sp, #8]
 800dac2:	2301      	movs	r3, #1
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	f107 0315 	add.w	r3, r7, #21
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	2301      	movs	r3, #1
 800dace:	227f      	movs	r2, #127	; 0x7f
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f7f9 f8fd 	bl	8006cd0 <HAL_I2C_Mem_Write>
 800dad6:	4603      	mov	r3, r0
 800dad8:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800dada:	7dfb      	ldrb	r3, [r7, #23]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af04      	add	r7, sp, #16
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	4608      	mov	r0, r1
 800daee:	4611      	mov	r1, r2
 800daf0:	461a      	mov	r2, r3
 800daf2:	4603      	mov	r3, r0
 800daf4:	70fb      	strb	r3, [r7, #3]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70bb      	strb	r3, [r7, #2]
 800dafa:	4613      	mov	r3, r2
 800dafc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <_ICM20948_WriteByte+0x28>
 800db08:	2368      	movs	r3, #104	; 0x68
 800db0a:	e000      	b.n	800db0e <_ICM20948_WriteByte+0x2a>
 800db0c:	2369      	movs	r3, #105	; 0x69
 800db0e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	b29b      	uxth	r3, r3
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	b299      	uxth	r1, r3
 800db18:	78bb      	ldrb	r3, [r7, #2]
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	230a      	movs	r3, #10
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	2301      	movs	r3, #1
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	1c7b      	adds	r3, r7, #1
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	2301      	movs	r3, #1
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7f9 f8d0 	bl	8006cd0 <HAL_I2C_Mem_Write>
 800db30:	4603      	mov	r3, r0
 800db32:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800db34:	7bfb      	ldrb	r3, [r7, #15]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	460b      	mov	r3, r1
 800db48:	70fb      	strb	r3, [r7, #3]
 800db4a:	4613      	mov	r3, r2
 800db4c:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800db52:	78fb      	ldrb	r3, [r7, #3]
 800db54:	2200      	movs	r2, #0
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff ff97 	bl	800da8c <_ICM20948_SelectUserBank>
 800db5e:	4603      	mov	r3, r0
 800db60:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800db62:	78f9      	ldrb	r1, [r7, #3]
 800db64:	2380      	movs	r3, #128	; 0x80
 800db66:	2206      	movs	r2, #6
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ffbb 	bl	800dae4 <_ICM20948_WriteByte>
 800db6e:	4603      	mov	r3, r0
 800db70:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800db72:	20c8      	movs	r0, #200	; 0xc8
 800db74:	f7f7 fd64 	bl	8005640 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800db78:	78f9      	ldrb	r1, [r7, #3]
 800db7a:	2301      	movs	r3, #1
 800db7c:	2206      	movs	r2, #6
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff ffb0 	bl	800dae4 <_ICM20948_WriteByte>
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800db88:	78f9      	ldrb	r1, [r7, #3]
 800db8a:	2338      	movs	r3, #56	; 0x38
 800db8c:	2207      	movs	r2, #7
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff ffa8 	bl	800dae4 <_ICM20948_WriteByte>
 800db94:	4603      	mov	r3, r0
 800db96:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800db98:	78fb      	ldrb	r3, [r7, #3]
 800db9a:	2202      	movs	r2, #2
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff ff74 	bl	800da8c <_ICM20948_SelectUserBank>
 800dba4:	4603      	mov	r3, r0
 800dba6:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800dba8:	78bb      	ldrb	r3, [r7, #2]
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	b25b      	sxtb	r3, r3
 800dbae:	f043 0319 	orr.w	r3, r3, #25
 800dbb2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	78f9      	ldrb	r1, [r7, #3]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff92 	bl	800dae4 <_ICM20948_WriteByte>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800dbc4:	78f9      	ldrb	r1, [r7, #3]
 800dbc6:	2304      	movs	r3, #4
 800dbc8:	2200      	movs	r2, #0
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff ff8a 	bl	800dae4 <_ICM20948_WriteByte>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	4619      	mov	r1, r3
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7ff ff56 	bl	800da8c <_ICM20948_SelectUserBank>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800dbe4:	78f9      	ldrb	r1, [r7, #3]
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	220f      	movs	r2, #15
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff ff7a 	bl	800dae4 <_ICM20948_WriteByte>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800dbf4:	bf00      	nop
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800dc02:	2300      	movs	r3, #0
 800dc04:	71fb      	strb	r3, [r7, #7]
 800dc06:	e026      	b.n	800dc56 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800dc08:	79fb      	ldrb	r3, [r7, #7]
 800dc0a:	3b50      	subs	r3, #80	; 0x50
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 f82b 	bl	800dc6c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800dc16:	2100      	movs	r1, #0
 800dc18:	2000      	movs	r0, #0
 800dc1a:	f000 f827 	bl	800dc6c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800dc1e:	2100      	movs	r1, #0
 800dc20:	2010      	movs	r0, #16
 800dc22:	f000 f823 	bl	800dc6c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800dc26:	2300      	movs	r3, #0
 800dc28:	71bb      	strb	r3, [r7, #6]
 800dc2a:	e00d      	b.n	800dc48 <OLED_Refresh_Gram+0x4c>
 800dc2c:	79ba      	ldrb	r2, [r7, #6]
 800dc2e:	79fb      	ldrb	r3, [r7, #7]
 800dc30:	490d      	ldr	r1, [pc, #52]	; (800dc68 <OLED_Refresh_Gram+0x6c>)
 800dc32:	00d2      	lsls	r2, r2, #3
 800dc34:	440a      	add	r2, r1
 800dc36:	4413      	add	r3, r2
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2101      	movs	r1, #1
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f000 f815 	bl	800dc6c <OLED_WR_Byte>
 800dc42:	79bb      	ldrb	r3, [r7, #6]
 800dc44:	3301      	adds	r3, #1
 800dc46:	71bb      	strb	r3, [r7, #6]
 800dc48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	daed      	bge.n	800dc2c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800dc50:	79fb      	ldrb	r3, [r7, #7]
 800dc52:	3301      	adds	r3, #1
 800dc54:	71fb      	strb	r3, [r7, #7]
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	2b07      	cmp	r3, #7
 800dc5a:	d9d5      	bls.n	800dc08 <OLED_Refresh_Gram+0xc>
	}   
}
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20004f00 	.word	0x20004f00

0800dc6c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	460a      	mov	r2, r1
 800dc76:	71fb      	strb	r3, [r7, #7]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800dc7c:	79bb      	ldrb	r3, [r7, #6]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d006      	beq.n	800dc90 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800dc82:	2201      	movs	r2, #1
 800dc84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc88:	481c      	ldr	r0, [pc, #112]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dc8a:	f7f8 fec3 	bl	8006a14 <HAL_GPIO_WritePin>
 800dc8e:	e005      	b.n	800dc9c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800dc90:	2200      	movs	r2, #0
 800dc92:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc96:	4819      	ldr	r0, [pc, #100]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dc98:	f7f8 febc 	bl	8006a14 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
 800dca0:	e01e      	b.n	800dce0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800dca2:	2200      	movs	r2, #0
 800dca4:	2120      	movs	r1, #32
 800dca6:	4815      	ldr	r0, [pc, #84]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dca8:	f7f8 feb4 	bl	8006a14 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800dcac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	da05      	bge.n	800dcc0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	2140      	movs	r1, #64	; 0x40
 800dcb8:	4810      	ldr	r0, [pc, #64]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dcba:	f7f8 feab 	bl	8006a14 <HAL_GPIO_WritePin>
 800dcbe:	e004      	b.n	800dcca <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2140      	movs	r1, #64	; 0x40
 800dcc4:	480d      	ldr	r0, [pc, #52]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dcc6:	f7f8 fea5 	bl	8006a14 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800dcca:	2201      	movs	r2, #1
 800dccc:	2120      	movs	r1, #32
 800dcce:	480b      	ldr	r0, [pc, #44]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dcd0:	f7f8 fea0 	bl	8006a14 <HAL_GPIO_WritePin>
		dat<<=1;   
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	73fb      	strb	r3, [r7, #15]
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	2b07      	cmp	r3, #7
 800dce4:	d9dd      	bls.n	800dca2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800dce6:	2201      	movs	r2, #1
 800dce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcec:	4803      	ldr	r0, [pc, #12]	; (800dcfc <OLED_WR_Byte+0x90>)
 800dcee:	f7f8 fe91 	bl	8006a14 <HAL_GPIO_WritePin>
} 
 800dcf2:	bf00      	nop
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	40021000 	.word	0x40021000

0800dd00 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800dd06:	2300      	movs	r3, #0
 800dd08:	71fb      	strb	r3, [r7, #7]
 800dd0a:	e014      	b.n	800dd36 <OLED_Clear+0x36>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	71bb      	strb	r3, [r7, #6]
 800dd10:	e00a      	b.n	800dd28 <OLED_Clear+0x28>
 800dd12:	79ba      	ldrb	r2, [r7, #6]
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	490c      	ldr	r1, [pc, #48]	; (800dd48 <OLED_Clear+0x48>)
 800dd18:	00d2      	lsls	r2, r2, #3
 800dd1a:	440a      	add	r2, r1
 800dd1c:	4413      	add	r3, r2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	701a      	strb	r2, [r3, #0]
 800dd22:	79bb      	ldrb	r3, [r7, #6]
 800dd24:	3301      	adds	r3, #1
 800dd26:	71bb      	strb	r3, [r7, #6]
 800dd28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	daf0      	bge.n	800dd12 <OLED_Clear+0x12>
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	3301      	adds	r3, #1
 800dd34:	71fb      	strb	r3, [r7, #7]
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b07      	cmp	r3, #7
 800dd3a:	d9e7      	bls.n	800dd0c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800dd3c:	f7ff ff5e 	bl	800dbfc <OLED_Refresh_Gram>
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20004f00 	.word	0x20004f00

0800dd4c <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800dd50:	f7f9 fe3a 	bl	80079c8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800dd54:	4b41      	ldr	r3, [pc, #260]	; (800de5c <OLED_Init+0x110>)
 800dd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd58:	4a40      	ldr	r2, [pc, #256]	; (800de5c <OLED_Init+0x110>)
 800dd5a:	f023 0301 	bic.w	r3, r3, #1
 800dd5e:	6713      	str	r3, [r2, #112]	; 0x70
 800dd60:	4b3e      	ldr	r3, [pc, #248]	; (800de5c <OLED_Init+0x110>)
 800dd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd64:	4a3d      	ldr	r2, [pc, #244]	; (800de5c <OLED_Init+0x110>)
 800dd66:	f023 0304 	bic.w	r3, r3, #4
 800dd6a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800dd6c:	f7f9 fe40 	bl	80079f0 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800dd70:	2200      	movs	r2, #0
 800dd72:	2180      	movs	r1, #128	; 0x80
 800dd74:	483a      	ldr	r0, [pc, #232]	; (800de60 <OLED_Init+0x114>)
 800dd76:	f7f8 fe4d 	bl	8006a14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800dd7a:	2064      	movs	r0, #100	; 0x64
 800dd7c:	f7f7 fc60 	bl	8005640 <HAL_Delay>
	OLED_RST_Set();
 800dd80:	2201      	movs	r2, #1
 800dd82:	2180      	movs	r1, #128	; 0x80
 800dd84:	4836      	ldr	r0, [pc, #216]	; (800de60 <OLED_Init+0x114>)
 800dd86:	f7f8 fe45 	bl	8006a14 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	20ae      	movs	r0, #174	; 0xae
 800dd8e:	f7ff ff6d 	bl	800dc6c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800dd92:	2100      	movs	r1, #0
 800dd94:	20d5      	movs	r0, #213	; 0xd5
 800dd96:	f7ff ff69 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	2050      	movs	r0, #80	; 0x50
 800dd9e:	f7ff ff65 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800dda2:	2100      	movs	r1, #0
 800dda4:	20a8      	movs	r0, #168	; 0xa8
 800dda6:	f7ff ff61 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800ddaa:	2100      	movs	r1, #0
 800ddac:	203f      	movs	r0, #63	; 0x3f
 800ddae:	f7ff ff5d 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	20d3      	movs	r0, #211	; 0xd3
 800ddb6:	f7ff ff59 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ddba:	2100      	movs	r1, #0
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	f7ff ff55 	bl	800dc6c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	2040      	movs	r0, #64	; 0x40
 800ddc6:	f7ff ff51 	bl	800dc6c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ddca:	2100      	movs	r1, #0
 800ddcc:	208d      	movs	r0, #141	; 0x8d
 800ddce:	f7ff ff4d 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	2014      	movs	r0, #20
 800ddd6:	f7ff ff49 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ddda:	2100      	movs	r1, #0
 800dddc:	2020      	movs	r0, #32
 800ddde:	f7ff ff45 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800dde2:	2100      	movs	r1, #0
 800dde4:	2002      	movs	r0, #2
 800dde6:	f7ff ff41 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ddea:	2100      	movs	r1, #0
 800ddec:	20a1      	movs	r0, #161	; 0xa1
 800ddee:	f7ff ff3d 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	20c0      	movs	r0, #192	; 0xc0
 800ddf6:	f7ff ff39 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	20da      	movs	r0, #218	; 0xda
 800ddfe:	f7ff ff35 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800de02:	2100      	movs	r1, #0
 800de04:	2012      	movs	r0, #18
 800de06:	f7ff ff31 	bl	800dc6c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800de0a:	2100      	movs	r1, #0
 800de0c:	2081      	movs	r0, #129	; 0x81
 800de0e:	f7ff ff2d 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800de12:	2100      	movs	r1, #0
 800de14:	20ef      	movs	r0, #239	; 0xef
 800de16:	f7ff ff29 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800de1a:	2100      	movs	r1, #0
 800de1c:	20d9      	movs	r0, #217	; 0xd9
 800de1e:	f7ff ff25 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800de22:	2100      	movs	r1, #0
 800de24:	20f1      	movs	r0, #241	; 0xf1
 800de26:	f7ff ff21 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800de2a:	2100      	movs	r1, #0
 800de2c:	20db      	movs	r0, #219	; 0xdb
 800de2e:	f7ff ff1d 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800de32:	2100      	movs	r1, #0
 800de34:	2030      	movs	r0, #48	; 0x30
 800de36:	f7ff ff19 	bl	800dc6c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800de3a:	2100      	movs	r1, #0
 800de3c:	20a4      	movs	r0, #164	; 0xa4
 800de3e:	f7ff ff15 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800de42:	2100      	movs	r1, #0
 800de44:	20a6      	movs	r0, #166	; 0xa6
 800de46:	f7ff ff11 	bl	800dc6c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800de4a:	2100      	movs	r1, #0
 800de4c:	20af      	movs	r0, #175	; 0xaf
 800de4e:	f7ff ff0d 	bl	800dc6c <OLED_WR_Byte>
	OLED_Clear(); 
 800de52:	f7ff ff55 	bl	800dd00 <OLED_Clear>
 800de56:	bf00      	nop
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	40023800 	.word	0x40023800
 800de60:	40021000 	.word	0x40021000

0800de64 <sniprintf>:
 800de64:	b40c      	push	{r2, r3}
 800de66:	b530      	push	{r4, r5, lr}
 800de68:	4b17      	ldr	r3, [pc, #92]	; (800dec8 <sniprintf+0x64>)
 800de6a:	1e0c      	subs	r4, r1, #0
 800de6c:	681d      	ldr	r5, [r3, #0]
 800de6e:	b09d      	sub	sp, #116	; 0x74
 800de70:	da08      	bge.n	800de84 <sniprintf+0x20>
 800de72:	238b      	movs	r3, #139	; 0x8b
 800de74:	602b      	str	r3, [r5, #0]
 800de76:	f04f 30ff 	mov.w	r0, #4294967295
 800de7a:	b01d      	add	sp, #116	; 0x74
 800de7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de80:	b002      	add	sp, #8
 800de82:	4770      	bx	lr
 800de84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800de88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800de8c:	bf14      	ite	ne
 800de8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de92:	4623      	moveq	r3, r4
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	9307      	str	r3, [sp, #28]
 800de98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	9006      	str	r0, [sp, #24]
 800dea0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dea4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dea6:	ab21      	add	r3, sp, #132	; 0x84
 800dea8:	a902      	add	r1, sp, #8
 800deaa:	4628      	mov	r0, r5
 800deac:	9301      	str	r3, [sp, #4]
 800deae:	f000 f9a1 	bl	800e1f4 <_svfiprintf_r>
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	bfbc      	itt	lt
 800deb6:	238b      	movlt	r3, #139	; 0x8b
 800deb8:	602b      	strlt	r3, [r5, #0]
 800deba:	2c00      	cmp	r4, #0
 800debc:	d0dd      	beq.n	800de7a <sniprintf+0x16>
 800debe:	9b02      	ldr	r3, [sp, #8]
 800dec0:	2200      	movs	r2, #0
 800dec2:	701a      	strb	r2, [r3, #0]
 800dec4:	e7d9      	b.n	800de7a <sniprintf+0x16>
 800dec6:	bf00      	nop
 800dec8:	20000068 	.word	0x20000068

0800decc <memset>:
 800decc:	4402      	add	r2, r0
 800dece:	4603      	mov	r3, r0
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d100      	bne.n	800ded6 <memset+0xa>
 800ded4:	4770      	bx	lr
 800ded6:	f803 1b01 	strb.w	r1, [r3], #1
 800deda:	e7f9      	b.n	800ded0 <memset+0x4>

0800dedc <__errno>:
 800dedc:	4b01      	ldr	r3, [pc, #4]	; (800dee4 <__errno+0x8>)
 800dede:	6818      	ldr	r0, [r3, #0]
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	20000068 	.word	0x20000068

0800dee8 <__libc_init_array>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	4d0d      	ldr	r5, [pc, #52]	; (800df20 <__libc_init_array+0x38>)
 800deec:	4c0d      	ldr	r4, [pc, #52]	; (800df24 <__libc_init_array+0x3c>)
 800deee:	1b64      	subs	r4, r4, r5
 800def0:	10a4      	asrs	r4, r4, #2
 800def2:	2600      	movs	r6, #0
 800def4:	42a6      	cmp	r6, r4
 800def6:	d109      	bne.n	800df0c <__libc_init_array+0x24>
 800def8:	4d0b      	ldr	r5, [pc, #44]	; (800df28 <__libc_init_array+0x40>)
 800defa:	4c0c      	ldr	r4, [pc, #48]	; (800df2c <__libc_init_array+0x44>)
 800defc:	f000 fc6a 	bl	800e7d4 <_init>
 800df00:	1b64      	subs	r4, r4, r5
 800df02:	10a4      	asrs	r4, r4, #2
 800df04:	2600      	movs	r6, #0
 800df06:	42a6      	cmp	r6, r4
 800df08:	d105      	bne.n	800df16 <__libc_init_array+0x2e>
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df10:	4798      	blx	r3
 800df12:	3601      	adds	r6, #1
 800df14:	e7ee      	b.n	800def4 <__libc_init_array+0xc>
 800df16:	f855 3b04 	ldr.w	r3, [r5], #4
 800df1a:	4798      	blx	r3
 800df1c:	3601      	adds	r6, #1
 800df1e:	e7f2      	b.n	800df06 <__libc_init_array+0x1e>
 800df20:	0800e9f4 	.word	0x0800e9f4
 800df24:	0800e9f4 	.word	0x0800e9f4
 800df28:	0800e9f4 	.word	0x0800e9f4
 800df2c:	0800e9f8 	.word	0x0800e9f8

0800df30 <__retarget_lock_acquire_recursive>:
 800df30:	4770      	bx	lr

0800df32 <__retarget_lock_release_recursive>:
 800df32:	4770      	bx	lr

0800df34 <memcpy>:
 800df34:	440a      	add	r2, r1
 800df36:	4291      	cmp	r1, r2
 800df38:	f100 33ff 	add.w	r3, r0, #4294967295
 800df3c:	d100      	bne.n	800df40 <memcpy+0xc>
 800df3e:	4770      	bx	lr
 800df40:	b510      	push	{r4, lr}
 800df42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df4a:	4291      	cmp	r1, r2
 800df4c:	d1f9      	bne.n	800df42 <memcpy+0xe>
 800df4e:	bd10      	pop	{r4, pc}

0800df50 <_free_r>:
 800df50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df52:	2900      	cmp	r1, #0
 800df54:	d044      	beq.n	800dfe0 <_free_r+0x90>
 800df56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df5a:	9001      	str	r0, [sp, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f1a1 0404 	sub.w	r4, r1, #4
 800df62:	bfb8      	it	lt
 800df64:	18e4      	addlt	r4, r4, r3
 800df66:	f000 f8df 	bl	800e128 <__malloc_lock>
 800df6a:	4a1e      	ldr	r2, [pc, #120]	; (800dfe4 <_free_r+0x94>)
 800df6c:	9801      	ldr	r0, [sp, #4]
 800df6e:	6813      	ldr	r3, [r2, #0]
 800df70:	b933      	cbnz	r3, 800df80 <_free_r+0x30>
 800df72:	6063      	str	r3, [r4, #4]
 800df74:	6014      	str	r4, [r2, #0]
 800df76:	b003      	add	sp, #12
 800df78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df7c:	f000 b8da 	b.w	800e134 <__malloc_unlock>
 800df80:	42a3      	cmp	r3, r4
 800df82:	d908      	bls.n	800df96 <_free_r+0x46>
 800df84:	6825      	ldr	r5, [r4, #0]
 800df86:	1961      	adds	r1, r4, r5
 800df88:	428b      	cmp	r3, r1
 800df8a:	bf01      	itttt	eq
 800df8c:	6819      	ldreq	r1, [r3, #0]
 800df8e:	685b      	ldreq	r3, [r3, #4]
 800df90:	1949      	addeq	r1, r1, r5
 800df92:	6021      	streq	r1, [r4, #0]
 800df94:	e7ed      	b.n	800df72 <_free_r+0x22>
 800df96:	461a      	mov	r2, r3
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	b10b      	cbz	r3, 800dfa0 <_free_r+0x50>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d9fa      	bls.n	800df96 <_free_r+0x46>
 800dfa0:	6811      	ldr	r1, [r2, #0]
 800dfa2:	1855      	adds	r5, r2, r1
 800dfa4:	42a5      	cmp	r5, r4
 800dfa6:	d10b      	bne.n	800dfc0 <_free_r+0x70>
 800dfa8:	6824      	ldr	r4, [r4, #0]
 800dfaa:	4421      	add	r1, r4
 800dfac:	1854      	adds	r4, r2, r1
 800dfae:	42a3      	cmp	r3, r4
 800dfb0:	6011      	str	r1, [r2, #0]
 800dfb2:	d1e0      	bne.n	800df76 <_free_r+0x26>
 800dfb4:	681c      	ldr	r4, [r3, #0]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	6053      	str	r3, [r2, #4]
 800dfba:	440c      	add	r4, r1
 800dfbc:	6014      	str	r4, [r2, #0]
 800dfbe:	e7da      	b.n	800df76 <_free_r+0x26>
 800dfc0:	d902      	bls.n	800dfc8 <_free_r+0x78>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	6003      	str	r3, [r0, #0]
 800dfc6:	e7d6      	b.n	800df76 <_free_r+0x26>
 800dfc8:	6825      	ldr	r5, [r4, #0]
 800dfca:	1961      	adds	r1, r4, r5
 800dfcc:	428b      	cmp	r3, r1
 800dfce:	bf04      	itt	eq
 800dfd0:	6819      	ldreq	r1, [r3, #0]
 800dfd2:	685b      	ldreq	r3, [r3, #4]
 800dfd4:	6063      	str	r3, [r4, #4]
 800dfd6:	bf04      	itt	eq
 800dfd8:	1949      	addeq	r1, r1, r5
 800dfda:	6021      	streq	r1, [r4, #0]
 800dfdc:	6054      	str	r4, [r2, #4]
 800dfde:	e7ca      	b.n	800df76 <_free_r+0x26>
 800dfe0:	b003      	add	sp, #12
 800dfe2:	bd30      	pop	{r4, r5, pc}
 800dfe4:	20005440 	.word	0x20005440

0800dfe8 <sbrk_aligned>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	4e0e      	ldr	r6, [pc, #56]	; (800e024 <sbrk_aligned+0x3c>)
 800dfec:	460c      	mov	r4, r1
 800dfee:	6831      	ldr	r1, [r6, #0]
 800dff0:	4605      	mov	r5, r0
 800dff2:	b911      	cbnz	r1, 800dffa <sbrk_aligned+0x12>
 800dff4:	f000 fba6 	bl	800e744 <_sbrk_r>
 800dff8:	6030      	str	r0, [r6, #0]
 800dffa:	4621      	mov	r1, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	f000 fba1 	bl	800e744 <_sbrk_r>
 800e002:	1c43      	adds	r3, r0, #1
 800e004:	d00a      	beq.n	800e01c <sbrk_aligned+0x34>
 800e006:	1cc4      	adds	r4, r0, #3
 800e008:	f024 0403 	bic.w	r4, r4, #3
 800e00c:	42a0      	cmp	r0, r4
 800e00e:	d007      	beq.n	800e020 <sbrk_aligned+0x38>
 800e010:	1a21      	subs	r1, r4, r0
 800e012:	4628      	mov	r0, r5
 800e014:	f000 fb96 	bl	800e744 <_sbrk_r>
 800e018:	3001      	adds	r0, #1
 800e01a:	d101      	bne.n	800e020 <sbrk_aligned+0x38>
 800e01c:	f04f 34ff 	mov.w	r4, #4294967295
 800e020:	4620      	mov	r0, r4
 800e022:	bd70      	pop	{r4, r5, r6, pc}
 800e024:	20005444 	.word	0x20005444

0800e028 <_malloc_r>:
 800e028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e02c:	1ccd      	adds	r5, r1, #3
 800e02e:	f025 0503 	bic.w	r5, r5, #3
 800e032:	3508      	adds	r5, #8
 800e034:	2d0c      	cmp	r5, #12
 800e036:	bf38      	it	cc
 800e038:	250c      	movcc	r5, #12
 800e03a:	2d00      	cmp	r5, #0
 800e03c:	4607      	mov	r7, r0
 800e03e:	db01      	blt.n	800e044 <_malloc_r+0x1c>
 800e040:	42a9      	cmp	r1, r5
 800e042:	d905      	bls.n	800e050 <_malloc_r+0x28>
 800e044:	230c      	movs	r3, #12
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	2600      	movs	r6, #0
 800e04a:	4630      	mov	r0, r6
 800e04c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e124 <_malloc_r+0xfc>
 800e054:	f000 f868 	bl	800e128 <__malloc_lock>
 800e058:	f8d8 3000 	ldr.w	r3, [r8]
 800e05c:	461c      	mov	r4, r3
 800e05e:	bb5c      	cbnz	r4, 800e0b8 <_malloc_r+0x90>
 800e060:	4629      	mov	r1, r5
 800e062:	4638      	mov	r0, r7
 800e064:	f7ff ffc0 	bl	800dfe8 <sbrk_aligned>
 800e068:	1c43      	adds	r3, r0, #1
 800e06a:	4604      	mov	r4, r0
 800e06c:	d155      	bne.n	800e11a <_malloc_r+0xf2>
 800e06e:	f8d8 4000 	ldr.w	r4, [r8]
 800e072:	4626      	mov	r6, r4
 800e074:	2e00      	cmp	r6, #0
 800e076:	d145      	bne.n	800e104 <_malloc_r+0xdc>
 800e078:	2c00      	cmp	r4, #0
 800e07a:	d048      	beq.n	800e10e <_malloc_r+0xe6>
 800e07c:	6823      	ldr	r3, [r4, #0]
 800e07e:	4631      	mov	r1, r6
 800e080:	4638      	mov	r0, r7
 800e082:	eb04 0903 	add.w	r9, r4, r3
 800e086:	f000 fb5d 	bl	800e744 <_sbrk_r>
 800e08a:	4581      	cmp	r9, r0
 800e08c:	d13f      	bne.n	800e10e <_malloc_r+0xe6>
 800e08e:	6821      	ldr	r1, [r4, #0]
 800e090:	1a6d      	subs	r5, r5, r1
 800e092:	4629      	mov	r1, r5
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff ffa7 	bl	800dfe8 <sbrk_aligned>
 800e09a:	3001      	adds	r0, #1
 800e09c:	d037      	beq.n	800e10e <_malloc_r+0xe6>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	442b      	add	r3, r5
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d038      	beq.n	800e11e <_malloc_r+0xf6>
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	42a2      	cmp	r2, r4
 800e0b0:	d12b      	bne.n	800e10a <_malloc_r+0xe2>
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	605a      	str	r2, [r3, #4]
 800e0b6:	e00f      	b.n	800e0d8 <_malloc_r+0xb0>
 800e0b8:	6822      	ldr	r2, [r4, #0]
 800e0ba:	1b52      	subs	r2, r2, r5
 800e0bc:	d41f      	bmi.n	800e0fe <_malloc_r+0xd6>
 800e0be:	2a0b      	cmp	r2, #11
 800e0c0:	d917      	bls.n	800e0f2 <_malloc_r+0xca>
 800e0c2:	1961      	adds	r1, r4, r5
 800e0c4:	42a3      	cmp	r3, r4
 800e0c6:	6025      	str	r5, [r4, #0]
 800e0c8:	bf18      	it	ne
 800e0ca:	6059      	strne	r1, [r3, #4]
 800e0cc:	6863      	ldr	r3, [r4, #4]
 800e0ce:	bf08      	it	eq
 800e0d0:	f8c8 1000 	streq.w	r1, [r8]
 800e0d4:	5162      	str	r2, [r4, r5]
 800e0d6:	604b      	str	r3, [r1, #4]
 800e0d8:	4638      	mov	r0, r7
 800e0da:	f104 060b 	add.w	r6, r4, #11
 800e0de:	f000 f829 	bl	800e134 <__malloc_unlock>
 800e0e2:	f026 0607 	bic.w	r6, r6, #7
 800e0e6:	1d23      	adds	r3, r4, #4
 800e0e8:	1af2      	subs	r2, r6, r3
 800e0ea:	d0ae      	beq.n	800e04a <_malloc_r+0x22>
 800e0ec:	1b9b      	subs	r3, r3, r6
 800e0ee:	50a3      	str	r3, [r4, r2]
 800e0f0:	e7ab      	b.n	800e04a <_malloc_r+0x22>
 800e0f2:	42a3      	cmp	r3, r4
 800e0f4:	6862      	ldr	r2, [r4, #4]
 800e0f6:	d1dd      	bne.n	800e0b4 <_malloc_r+0x8c>
 800e0f8:	f8c8 2000 	str.w	r2, [r8]
 800e0fc:	e7ec      	b.n	800e0d8 <_malloc_r+0xb0>
 800e0fe:	4623      	mov	r3, r4
 800e100:	6864      	ldr	r4, [r4, #4]
 800e102:	e7ac      	b.n	800e05e <_malloc_r+0x36>
 800e104:	4634      	mov	r4, r6
 800e106:	6876      	ldr	r6, [r6, #4]
 800e108:	e7b4      	b.n	800e074 <_malloc_r+0x4c>
 800e10a:	4613      	mov	r3, r2
 800e10c:	e7cc      	b.n	800e0a8 <_malloc_r+0x80>
 800e10e:	230c      	movs	r3, #12
 800e110:	603b      	str	r3, [r7, #0]
 800e112:	4638      	mov	r0, r7
 800e114:	f000 f80e 	bl	800e134 <__malloc_unlock>
 800e118:	e797      	b.n	800e04a <_malloc_r+0x22>
 800e11a:	6025      	str	r5, [r4, #0]
 800e11c:	e7dc      	b.n	800e0d8 <_malloc_r+0xb0>
 800e11e:	605b      	str	r3, [r3, #4]
 800e120:	deff      	udf	#255	; 0xff
 800e122:	bf00      	nop
 800e124:	20005440 	.word	0x20005440

0800e128 <__malloc_lock>:
 800e128:	4801      	ldr	r0, [pc, #4]	; (800e130 <__malloc_lock+0x8>)
 800e12a:	f7ff bf01 	b.w	800df30 <__retarget_lock_acquire_recursive>
 800e12e:	bf00      	nop
 800e130:	2000543c 	.word	0x2000543c

0800e134 <__malloc_unlock>:
 800e134:	4801      	ldr	r0, [pc, #4]	; (800e13c <__malloc_unlock+0x8>)
 800e136:	f7ff befc 	b.w	800df32 <__retarget_lock_release_recursive>
 800e13a:	bf00      	nop
 800e13c:	2000543c 	.word	0x2000543c

0800e140 <__ssputs_r>:
 800e140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e144:	688e      	ldr	r6, [r1, #8]
 800e146:	461f      	mov	r7, r3
 800e148:	42be      	cmp	r6, r7
 800e14a:	680b      	ldr	r3, [r1, #0]
 800e14c:	4682      	mov	sl, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	4690      	mov	r8, r2
 800e152:	d82c      	bhi.n	800e1ae <__ssputs_r+0x6e>
 800e154:	898a      	ldrh	r2, [r1, #12]
 800e156:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e15a:	d026      	beq.n	800e1aa <__ssputs_r+0x6a>
 800e15c:	6965      	ldr	r5, [r4, #20]
 800e15e:	6909      	ldr	r1, [r1, #16]
 800e160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e164:	eba3 0901 	sub.w	r9, r3, r1
 800e168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e16c:	1c7b      	adds	r3, r7, #1
 800e16e:	444b      	add	r3, r9
 800e170:	106d      	asrs	r5, r5, #1
 800e172:	429d      	cmp	r5, r3
 800e174:	bf38      	it	cc
 800e176:	461d      	movcc	r5, r3
 800e178:	0553      	lsls	r3, r2, #21
 800e17a:	d527      	bpl.n	800e1cc <__ssputs_r+0x8c>
 800e17c:	4629      	mov	r1, r5
 800e17e:	f7ff ff53 	bl	800e028 <_malloc_r>
 800e182:	4606      	mov	r6, r0
 800e184:	b360      	cbz	r0, 800e1e0 <__ssputs_r+0xa0>
 800e186:	6921      	ldr	r1, [r4, #16]
 800e188:	464a      	mov	r2, r9
 800e18a:	f7ff fed3 	bl	800df34 <memcpy>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e198:	81a3      	strh	r3, [r4, #12]
 800e19a:	6126      	str	r6, [r4, #16]
 800e19c:	6165      	str	r5, [r4, #20]
 800e19e:	444e      	add	r6, r9
 800e1a0:	eba5 0509 	sub.w	r5, r5, r9
 800e1a4:	6026      	str	r6, [r4, #0]
 800e1a6:	60a5      	str	r5, [r4, #8]
 800e1a8:	463e      	mov	r6, r7
 800e1aa:	42be      	cmp	r6, r7
 800e1ac:	d900      	bls.n	800e1b0 <__ssputs_r+0x70>
 800e1ae:	463e      	mov	r6, r7
 800e1b0:	6820      	ldr	r0, [r4, #0]
 800e1b2:	4632      	mov	r2, r6
 800e1b4:	4641      	mov	r1, r8
 800e1b6:	f000 faab 	bl	800e710 <memmove>
 800e1ba:	68a3      	ldr	r3, [r4, #8]
 800e1bc:	1b9b      	subs	r3, r3, r6
 800e1be:	60a3      	str	r3, [r4, #8]
 800e1c0:	6823      	ldr	r3, [r4, #0]
 800e1c2:	4433      	add	r3, r6
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	f000 fac9 	bl	800e764 <_realloc_r>
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d1e0      	bne.n	800e19a <__ssputs_r+0x5a>
 800e1d8:	6921      	ldr	r1, [r4, #16]
 800e1da:	4650      	mov	r0, sl
 800e1dc:	f7ff feb8 	bl	800df50 <_free_r>
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	f8ca 3000 	str.w	r3, [sl]
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ec:	81a3      	strh	r3, [r4, #12]
 800e1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f2:	e7e9      	b.n	800e1c8 <__ssputs_r+0x88>

0800e1f4 <_svfiprintf_r>:
 800e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f8:	4698      	mov	r8, r3
 800e1fa:	898b      	ldrh	r3, [r1, #12]
 800e1fc:	061b      	lsls	r3, r3, #24
 800e1fe:	b09d      	sub	sp, #116	; 0x74
 800e200:	4607      	mov	r7, r0
 800e202:	460d      	mov	r5, r1
 800e204:	4614      	mov	r4, r2
 800e206:	d50e      	bpl.n	800e226 <_svfiprintf_r+0x32>
 800e208:	690b      	ldr	r3, [r1, #16]
 800e20a:	b963      	cbnz	r3, 800e226 <_svfiprintf_r+0x32>
 800e20c:	2140      	movs	r1, #64	; 0x40
 800e20e:	f7ff ff0b 	bl	800e028 <_malloc_r>
 800e212:	6028      	str	r0, [r5, #0]
 800e214:	6128      	str	r0, [r5, #16]
 800e216:	b920      	cbnz	r0, 800e222 <_svfiprintf_r+0x2e>
 800e218:	230c      	movs	r3, #12
 800e21a:	603b      	str	r3, [r7, #0]
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295
 800e220:	e0d0      	b.n	800e3c4 <_svfiprintf_r+0x1d0>
 800e222:	2340      	movs	r3, #64	; 0x40
 800e224:	616b      	str	r3, [r5, #20]
 800e226:	2300      	movs	r3, #0
 800e228:	9309      	str	r3, [sp, #36]	; 0x24
 800e22a:	2320      	movs	r3, #32
 800e22c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e230:	f8cd 800c 	str.w	r8, [sp, #12]
 800e234:	2330      	movs	r3, #48	; 0x30
 800e236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e3dc <_svfiprintf_r+0x1e8>
 800e23a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e23e:	f04f 0901 	mov.w	r9, #1
 800e242:	4623      	mov	r3, r4
 800e244:	469a      	mov	sl, r3
 800e246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e24a:	b10a      	cbz	r2, 800e250 <_svfiprintf_r+0x5c>
 800e24c:	2a25      	cmp	r2, #37	; 0x25
 800e24e:	d1f9      	bne.n	800e244 <_svfiprintf_r+0x50>
 800e250:	ebba 0b04 	subs.w	fp, sl, r4
 800e254:	d00b      	beq.n	800e26e <_svfiprintf_r+0x7a>
 800e256:	465b      	mov	r3, fp
 800e258:	4622      	mov	r2, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	4638      	mov	r0, r7
 800e25e:	f7ff ff6f 	bl	800e140 <__ssputs_r>
 800e262:	3001      	adds	r0, #1
 800e264:	f000 80a9 	beq.w	800e3ba <_svfiprintf_r+0x1c6>
 800e268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e26a:	445a      	add	r2, fp
 800e26c:	9209      	str	r2, [sp, #36]	; 0x24
 800e26e:	f89a 3000 	ldrb.w	r3, [sl]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80a1 	beq.w	800e3ba <_svfiprintf_r+0x1c6>
 800e278:	2300      	movs	r3, #0
 800e27a:	f04f 32ff 	mov.w	r2, #4294967295
 800e27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e282:	f10a 0a01 	add.w	sl, sl, #1
 800e286:	9304      	str	r3, [sp, #16]
 800e288:	9307      	str	r3, [sp, #28]
 800e28a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e28e:	931a      	str	r3, [sp, #104]	; 0x68
 800e290:	4654      	mov	r4, sl
 800e292:	2205      	movs	r2, #5
 800e294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e298:	4850      	ldr	r0, [pc, #320]	; (800e3dc <_svfiprintf_r+0x1e8>)
 800e29a:	f7f1 ff99 	bl	80001d0 <memchr>
 800e29e:	9a04      	ldr	r2, [sp, #16]
 800e2a0:	b9d8      	cbnz	r0, 800e2da <_svfiprintf_r+0xe6>
 800e2a2:	06d0      	lsls	r0, r2, #27
 800e2a4:	bf44      	itt	mi
 800e2a6:	2320      	movmi	r3, #32
 800e2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ac:	0711      	lsls	r1, r2, #28
 800e2ae:	bf44      	itt	mi
 800e2b0:	232b      	movmi	r3, #43	; 0x2b
 800e2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e2bc:	d015      	beq.n	800e2ea <_svfiprintf_r+0xf6>
 800e2be:	9a07      	ldr	r2, [sp, #28]
 800e2c0:	4654      	mov	r4, sl
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	f04f 0c0a 	mov.w	ip, #10
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ce:	3b30      	subs	r3, #48	; 0x30
 800e2d0:	2b09      	cmp	r3, #9
 800e2d2:	d94d      	bls.n	800e370 <_svfiprintf_r+0x17c>
 800e2d4:	b1b0      	cbz	r0, 800e304 <_svfiprintf_r+0x110>
 800e2d6:	9207      	str	r2, [sp, #28]
 800e2d8:	e014      	b.n	800e304 <_svfiprintf_r+0x110>
 800e2da:	eba0 0308 	sub.w	r3, r0, r8
 800e2de:	fa09 f303 	lsl.w	r3, r9, r3
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	9304      	str	r3, [sp, #16]
 800e2e6:	46a2      	mov	sl, r4
 800e2e8:	e7d2      	b.n	800e290 <_svfiprintf_r+0x9c>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	1d19      	adds	r1, r3, #4
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	9103      	str	r1, [sp, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	bfbb      	ittet	lt
 800e2f6:	425b      	neglt	r3, r3
 800e2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800e2fc:	9307      	strge	r3, [sp, #28]
 800e2fe:	9307      	strlt	r3, [sp, #28]
 800e300:	bfb8      	it	lt
 800e302:	9204      	strlt	r2, [sp, #16]
 800e304:	7823      	ldrb	r3, [r4, #0]
 800e306:	2b2e      	cmp	r3, #46	; 0x2e
 800e308:	d10c      	bne.n	800e324 <_svfiprintf_r+0x130>
 800e30a:	7863      	ldrb	r3, [r4, #1]
 800e30c:	2b2a      	cmp	r3, #42	; 0x2a
 800e30e:	d134      	bne.n	800e37a <_svfiprintf_r+0x186>
 800e310:	9b03      	ldr	r3, [sp, #12]
 800e312:	1d1a      	adds	r2, r3, #4
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	9203      	str	r2, [sp, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	bfb8      	it	lt
 800e31c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e320:	3402      	adds	r4, #2
 800e322:	9305      	str	r3, [sp, #20]
 800e324:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e3ec <_svfiprintf_r+0x1f8>
 800e328:	7821      	ldrb	r1, [r4, #0]
 800e32a:	2203      	movs	r2, #3
 800e32c:	4650      	mov	r0, sl
 800e32e:	f7f1 ff4f 	bl	80001d0 <memchr>
 800e332:	b138      	cbz	r0, 800e344 <_svfiprintf_r+0x150>
 800e334:	9b04      	ldr	r3, [sp, #16]
 800e336:	eba0 000a 	sub.w	r0, r0, sl
 800e33a:	2240      	movs	r2, #64	; 0x40
 800e33c:	4082      	lsls	r2, r0
 800e33e:	4313      	orrs	r3, r2
 800e340:	3401      	adds	r4, #1
 800e342:	9304      	str	r3, [sp, #16]
 800e344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e348:	4825      	ldr	r0, [pc, #148]	; (800e3e0 <_svfiprintf_r+0x1ec>)
 800e34a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e34e:	2206      	movs	r2, #6
 800e350:	f7f1 ff3e 	bl	80001d0 <memchr>
 800e354:	2800      	cmp	r0, #0
 800e356:	d038      	beq.n	800e3ca <_svfiprintf_r+0x1d6>
 800e358:	4b22      	ldr	r3, [pc, #136]	; (800e3e4 <_svfiprintf_r+0x1f0>)
 800e35a:	bb1b      	cbnz	r3, 800e3a4 <_svfiprintf_r+0x1b0>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	3307      	adds	r3, #7
 800e360:	f023 0307 	bic.w	r3, r3, #7
 800e364:	3308      	adds	r3, #8
 800e366:	9303      	str	r3, [sp, #12]
 800e368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e36a:	4433      	add	r3, r6
 800e36c:	9309      	str	r3, [sp, #36]	; 0x24
 800e36e:	e768      	b.n	800e242 <_svfiprintf_r+0x4e>
 800e370:	fb0c 3202 	mla	r2, ip, r2, r3
 800e374:	460c      	mov	r4, r1
 800e376:	2001      	movs	r0, #1
 800e378:	e7a6      	b.n	800e2c8 <_svfiprintf_r+0xd4>
 800e37a:	2300      	movs	r3, #0
 800e37c:	3401      	adds	r4, #1
 800e37e:	9305      	str	r3, [sp, #20]
 800e380:	4619      	mov	r1, r3
 800e382:	f04f 0c0a 	mov.w	ip, #10
 800e386:	4620      	mov	r0, r4
 800e388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38c:	3a30      	subs	r2, #48	; 0x30
 800e38e:	2a09      	cmp	r2, #9
 800e390:	d903      	bls.n	800e39a <_svfiprintf_r+0x1a6>
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0c6      	beq.n	800e324 <_svfiprintf_r+0x130>
 800e396:	9105      	str	r1, [sp, #20]
 800e398:	e7c4      	b.n	800e324 <_svfiprintf_r+0x130>
 800e39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e39e:	4604      	mov	r4, r0
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e7f0      	b.n	800e386 <_svfiprintf_r+0x192>
 800e3a4:	ab03      	add	r3, sp, #12
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	462a      	mov	r2, r5
 800e3aa:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <_svfiprintf_r+0x1f4>)
 800e3ac:	a904      	add	r1, sp, #16
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f3af 8000 	nop.w
 800e3b4:	1c42      	adds	r2, r0, #1
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	d1d6      	bne.n	800e368 <_svfiprintf_r+0x174>
 800e3ba:	89ab      	ldrh	r3, [r5, #12]
 800e3bc:	065b      	lsls	r3, r3, #25
 800e3be:	f53f af2d 	bmi.w	800e21c <_svfiprintf_r+0x28>
 800e3c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3c4:	b01d      	add	sp, #116	; 0x74
 800e3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ca:	ab03      	add	r3, sp, #12
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <_svfiprintf_r+0x1f4>)
 800e3d2:	a904      	add	r1, sp, #16
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f000 f879 	bl	800e4cc <_printf_i>
 800e3da:	e7eb      	b.n	800e3b4 <_svfiprintf_r+0x1c0>
 800e3dc:	0800e9b8 	.word	0x0800e9b8
 800e3e0:	0800e9c2 	.word	0x0800e9c2
 800e3e4:	00000000 	.word	0x00000000
 800e3e8:	0800e141 	.word	0x0800e141
 800e3ec:	0800e9be 	.word	0x0800e9be

0800e3f0 <_printf_common>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	4699      	mov	r9, r3
 800e3f8:	688a      	ldr	r2, [r1, #8]
 800e3fa:	690b      	ldr	r3, [r1, #16]
 800e3fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e400:	4293      	cmp	r3, r2
 800e402:	bfb8      	it	lt
 800e404:	4613      	movlt	r3, r2
 800e406:	6033      	str	r3, [r6, #0]
 800e408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e40c:	4607      	mov	r7, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b10a      	cbz	r2, 800e416 <_printf_common+0x26>
 800e412:	3301      	adds	r3, #1
 800e414:	6033      	str	r3, [r6, #0]
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	0699      	lsls	r1, r3, #26
 800e41a:	bf42      	ittt	mi
 800e41c:	6833      	ldrmi	r3, [r6, #0]
 800e41e:	3302      	addmi	r3, #2
 800e420:	6033      	strmi	r3, [r6, #0]
 800e422:	6825      	ldr	r5, [r4, #0]
 800e424:	f015 0506 	ands.w	r5, r5, #6
 800e428:	d106      	bne.n	800e438 <_printf_common+0x48>
 800e42a:	f104 0a19 	add.w	sl, r4, #25
 800e42e:	68e3      	ldr	r3, [r4, #12]
 800e430:	6832      	ldr	r2, [r6, #0]
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	42ab      	cmp	r3, r5
 800e436:	dc26      	bgt.n	800e486 <_printf_common+0x96>
 800e438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e43c:	1e13      	subs	r3, r2, #0
 800e43e:	6822      	ldr	r2, [r4, #0]
 800e440:	bf18      	it	ne
 800e442:	2301      	movne	r3, #1
 800e444:	0692      	lsls	r2, r2, #26
 800e446:	d42b      	bmi.n	800e4a0 <_printf_common+0xb0>
 800e448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e44c:	4649      	mov	r1, r9
 800e44e:	4638      	mov	r0, r7
 800e450:	47c0      	blx	r8
 800e452:	3001      	adds	r0, #1
 800e454:	d01e      	beq.n	800e494 <_printf_common+0xa4>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	6922      	ldr	r2, [r4, #16]
 800e45a:	f003 0306 	and.w	r3, r3, #6
 800e45e:	2b04      	cmp	r3, #4
 800e460:	bf02      	ittt	eq
 800e462:	68e5      	ldreq	r5, [r4, #12]
 800e464:	6833      	ldreq	r3, [r6, #0]
 800e466:	1aed      	subeq	r5, r5, r3
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	bf0c      	ite	eq
 800e46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e470:	2500      	movne	r5, #0
 800e472:	4293      	cmp	r3, r2
 800e474:	bfc4      	itt	gt
 800e476:	1a9b      	subgt	r3, r3, r2
 800e478:	18ed      	addgt	r5, r5, r3
 800e47a:	2600      	movs	r6, #0
 800e47c:	341a      	adds	r4, #26
 800e47e:	42b5      	cmp	r5, r6
 800e480:	d11a      	bne.n	800e4b8 <_printf_common+0xc8>
 800e482:	2000      	movs	r0, #0
 800e484:	e008      	b.n	800e498 <_printf_common+0xa8>
 800e486:	2301      	movs	r3, #1
 800e488:	4652      	mov	r2, sl
 800e48a:	4649      	mov	r1, r9
 800e48c:	4638      	mov	r0, r7
 800e48e:	47c0      	blx	r8
 800e490:	3001      	adds	r0, #1
 800e492:	d103      	bne.n	800e49c <_printf_common+0xac>
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49c:	3501      	adds	r5, #1
 800e49e:	e7c6      	b.n	800e42e <_printf_common+0x3e>
 800e4a0:	18e1      	adds	r1, r4, r3
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	2030      	movs	r0, #48	; 0x30
 800e4a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4aa:	4422      	add	r2, r4
 800e4ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	e7c7      	b.n	800e448 <_printf_common+0x58>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4649      	mov	r1, r9
 800e4be:	4638      	mov	r0, r7
 800e4c0:	47c0      	blx	r8
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	d0e6      	beq.n	800e494 <_printf_common+0xa4>
 800e4c6:	3601      	adds	r6, #1
 800e4c8:	e7d9      	b.n	800e47e <_printf_common+0x8e>
	...

0800e4cc <_printf_i>:
 800e4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	7e0f      	ldrb	r7, [r1, #24]
 800e4d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4d4:	2f78      	cmp	r7, #120	; 0x78
 800e4d6:	4691      	mov	r9, r2
 800e4d8:	4680      	mov	r8, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	469a      	mov	sl, r3
 800e4de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4e2:	d807      	bhi.n	800e4f4 <_printf_i+0x28>
 800e4e4:	2f62      	cmp	r7, #98	; 0x62
 800e4e6:	d80a      	bhi.n	800e4fe <_printf_i+0x32>
 800e4e8:	2f00      	cmp	r7, #0
 800e4ea:	f000 80d4 	beq.w	800e696 <_printf_i+0x1ca>
 800e4ee:	2f58      	cmp	r7, #88	; 0x58
 800e4f0:	f000 80c0 	beq.w	800e674 <_printf_i+0x1a8>
 800e4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4fc:	e03a      	b.n	800e574 <_printf_i+0xa8>
 800e4fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e502:	2b15      	cmp	r3, #21
 800e504:	d8f6      	bhi.n	800e4f4 <_printf_i+0x28>
 800e506:	a101      	add	r1, pc, #4	; (adr r1, 800e50c <_printf_i+0x40>)
 800e508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e50c:	0800e565 	.word	0x0800e565
 800e510:	0800e579 	.word	0x0800e579
 800e514:	0800e4f5 	.word	0x0800e4f5
 800e518:	0800e4f5 	.word	0x0800e4f5
 800e51c:	0800e4f5 	.word	0x0800e4f5
 800e520:	0800e4f5 	.word	0x0800e4f5
 800e524:	0800e579 	.word	0x0800e579
 800e528:	0800e4f5 	.word	0x0800e4f5
 800e52c:	0800e4f5 	.word	0x0800e4f5
 800e530:	0800e4f5 	.word	0x0800e4f5
 800e534:	0800e4f5 	.word	0x0800e4f5
 800e538:	0800e67d 	.word	0x0800e67d
 800e53c:	0800e5a5 	.word	0x0800e5a5
 800e540:	0800e637 	.word	0x0800e637
 800e544:	0800e4f5 	.word	0x0800e4f5
 800e548:	0800e4f5 	.word	0x0800e4f5
 800e54c:	0800e69f 	.word	0x0800e69f
 800e550:	0800e4f5 	.word	0x0800e4f5
 800e554:	0800e5a5 	.word	0x0800e5a5
 800e558:	0800e4f5 	.word	0x0800e4f5
 800e55c:	0800e4f5 	.word	0x0800e4f5
 800e560:	0800e63f 	.word	0x0800e63f
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	1d1a      	adds	r2, r3, #4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	602a      	str	r2, [r5, #0]
 800e56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e574:	2301      	movs	r3, #1
 800e576:	e09f      	b.n	800e6b8 <_printf_i+0x1ec>
 800e578:	6820      	ldr	r0, [r4, #0]
 800e57a:	682b      	ldr	r3, [r5, #0]
 800e57c:	0607      	lsls	r7, r0, #24
 800e57e:	f103 0104 	add.w	r1, r3, #4
 800e582:	6029      	str	r1, [r5, #0]
 800e584:	d501      	bpl.n	800e58a <_printf_i+0xbe>
 800e586:	681e      	ldr	r6, [r3, #0]
 800e588:	e003      	b.n	800e592 <_printf_i+0xc6>
 800e58a:	0646      	lsls	r6, r0, #25
 800e58c:	d5fb      	bpl.n	800e586 <_printf_i+0xba>
 800e58e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e592:	2e00      	cmp	r6, #0
 800e594:	da03      	bge.n	800e59e <_printf_i+0xd2>
 800e596:	232d      	movs	r3, #45	; 0x2d
 800e598:	4276      	negs	r6, r6
 800e59a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e59e:	485a      	ldr	r0, [pc, #360]	; (800e708 <_printf_i+0x23c>)
 800e5a0:	230a      	movs	r3, #10
 800e5a2:	e012      	b.n	800e5ca <_printf_i+0xfe>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	6820      	ldr	r0, [r4, #0]
 800e5a8:	1d19      	adds	r1, r3, #4
 800e5aa:	6029      	str	r1, [r5, #0]
 800e5ac:	0605      	lsls	r5, r0, #24
 800e5ae:	d501      	bpl.n	800e5b4 <_printf_i+0xe8>
 800e5b0:	681e      	ldr	r6, [r3, #0]
 800e5b2:	e002      	b.n	800e5ba <_printf_i+0xee>
 800e5b4:	0641      	lsls	r1, r0, #25
 800e5b6:	d5fb      	bpl.n	800e5b0 <_printf_i+0xe4>
 800e5b8:	881e      	ldrh	r6, [r3, #0]
 800e5ba:	4853      	ldr	r0, [pc, #332]	; (800e708 <_printf_i+0x23c>)
 800e5bc:	2f6f      	cmp	r7, #111	; 0x6f
 800e5be:	bf0c      	ite	eq
 800e5c0:	2308      	moveq	r3, #8
 800e5c2:	230a      	movne	r3, #10
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5ca:	6865      	ldr	r5, [r4, #4]
 800e5cc:	60a5      	str	r5, [r4, #8]
 800e5ce:	2d00      	cmp	r5, #0
 800e5d0:	bfa2      	ittt	ge
 800e5d2:	6821      	ldrge	r1, [r4, #0]
 800e5d4:	f021 0104 	bicge.w	r1, r1, #4
 800e5d8:	6021      	strge	r1, [r4, #0]
 800e5da:	b90e      	cbnz	r6, 800e5e0 <_printf_i+0x114>
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	d04b      	beq.n	800e678 <_printf_i+0x1ac>
 800e5e0:	4615      	mov	r5, r2
 800e5e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5e6:	fb03 6711 	mls	r7, r3, r1, r6
 800e5ea:	5dc7      	ldrb	r7, [r0, r7]
 800e5ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5f0:	4637      	mov	r7, r6
 800e5f2:	42bb      	cmp	r3, r7
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	d9f4      	bls.n	800e5e2 <_printf_i+0x116>
 800e5f8:	2b08      	cmp	r3, #8
 800e5fa:	d10b      	bne.n	800e614 <_printf_i+0x148>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	07de      	lsls	r6, r3, #31
 800e600:	d508      	bpl.n	800e614 <_printf_i+0x148>
 800e602:	6923      	ldr	r3, [r4, #16]
 800e604:	6861      	ldr	r1, [r4, #4]
 800e606:	4299      	cmp	r1, r3
 800e608:	bfde      	ittt	le
 800e60a:	2330      	movle	r3, #48	; 0x30
 800e60c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e610:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e614:	1b52      	subs	r2, r2, r5
 800e616:	6122      	str	r2, [r4, #16]
 800e618:	f8cd a000 	str.w	sl, [sp]
 800e61c:	464b      	mov	r3, r9
 800e61e:	aa03      	add	r2, sp, #12
 800e620:	4621      	mov	r1, r4
 800e622:	4640      	mov	r0, r8
 800e624:	f7ff fee4 	bl	800e3f0 <_printf_common>
 800e628:	3001      	adds	r0, #1
 800e62a:	d14a      	bne.n	800e6c2 <_printf_i+0x1f6>
 800e62c:	f04f 30ff 	mov.w	r0, #4294967295
 800e630:	b004      	add	sp, #16
 800e632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	f043 0320 	orr.w	r3, r3, #32
 800e63c:	6023      	str	r3, [r4, #0]
 800e63e:	4833      	ldr	r0, [pc, #204]	; (800e70c <_printf_i+0x240>)
 800e640:	2778      	movs	r7, #120	; 0x78
 800e642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	6829      	ldr	r1, [r5, #0]
 800e64a:	061f      	lsls	r7, r3, #24
 800e64c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e650:	d402      	bmi.n	800e658 <_printf_i+0x18c>
 800e652:	065f      	lsls	r7, r3, #25
 800e654:	bf48      	it	mi
 800e656:	b2b6      	uxthmi	r6, r6
 800e658:	07df      	lsls	r7, r3, #31
 800e65a:	bf48      	it	mi
 800e65c:	f043 0320 	orrmi.w	r3, r3, #32
 800e660:	6029      	str	r1, [r5, #0]
 800e662:	bf48      	it	mi
 800e664:	6023      	strmi	r3, [r4, #0]
 800e666:	b91e      	cbnz	r6, 800e670 <_printf_i+0x1a4>
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	f023 0320 	bic.w	r3, r3, #32
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	2310      	movs	r3, #16
 800e672:	e7a7      	b.n	800e5c4 <_printf_i+0xf8>
 800e674:	4824      	ldr	r0, [pc, #144]	; (800e708 <_printf_i+0x23c>)
 800e676:	e7e4      	b.n	800e642 <_printf_i+0x176>
 800e678:	4615      	mov	r5, r2
 800e67a:	e7bd      	b.n	800e5f8 <_printf_i+0x12c>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	6826      	ldr	r6, [r4, #0]
 800e680:	6961      	ldr	r1, [r4, #20]
 800e682:	1d18      	adds	r0, r3, #4
 800e684:	6028      	str	r0, [r5, #0]
 800e686:	0635      	lsls	r5, r6, #24
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	d501      	bpl.n	800e690 <_printf_i+0x1c4>
 800e68c:	6019      	str	r1, [r3, #0]
 800e68e:	e002      	b.n	800e696 <_printf_i+0x1ca>
 800e690:	0670      	lsls	r0, r6, #25
 800e692:	d5fb      	bpl.n	800e68c <_printf_i+0x1c0>
 800e694:	8019      	strh	r1, [r3, #0]
 800e696:	2300      	movs	r3, #0
 800e698:	6123      	str	r3, [r4, #16]
 800e69a:	4615      	mov	r5, r2
 800e69c:	e7bc      	b.n	800e618 <_printf_i+0x14c>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	1d1a      	adds	r2, r3, #4
 800e6a2:	602a      	str	r2, [r5, #0]
 800e6a4:	681d      	ldr	r5, [r3, #0]
 800e6a6:	6862      	ldr	r2, [r4, #4]
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f7f1 fd90 	bl	80001d0 <memchr>
 800e6b0:	b108      	cbz	r0, 800e6b6 <_printf_i+0x1ea>
 800e6b2:	1b40      	subs	r0, r0, r5
 800e6b4:	6060      	str	r0, [r4, #4]
 800e6b6:	6863      	ldr	r3, [r4, #4]
 800e6b8:	6123      	str	r3, [r4, #16]
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c0:	e7aa      	b.n	800e618 <_printf_i+0x14c>
 800e6c2:	6923      	ldr	r3, [r4, #16]
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	47d0      	blx	sl
 800e6cc:	3001      	adds	r0, #1
 800e6ce:	d0ad      	beq.n	800e62c <_printf_i+0x160>
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	079b      	lsls	r3, r3, #30
 800e6d4:	d413      	bmi.n	800e6fe <_printf_i+0x232>
 800e6d6:	68e0      	ldr	r0, [r4, #12]
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	4298      	cmp	r0, r3
 800e6dc:	bfb8      	it	lt
 800e6de:	4618      	movlt	r0, r3
 800e6e0:	e7a6      	b.n	800e630 <_printf_i+0x164>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	4632      	mov	r2, r6
 800e6e6:	4649      	mov	r1, r9
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	47d0      	blx	sl
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d09d      	beq.n	800e62c <_printf_i+0x160>
 800e6f0:	3501      	adds	r5, #1
 800e6f2:	68e3      	ldr	r3, [r4, #12]
 800e6f4:	9903      	ldr	r1, [sp, #12]
 800e6f6:	1a5b      	subs	r3, r3, r1
 800e6f8:	42ab      	cmp	r3, r5
 800e6fa:	dcf2      	bgt.n	800e6e2 <_printf_i+0x216>
 800e6fc:	e7eb      	b.n	800e6d6 <_printf_i+0x20a>
 800e6fe:	2500      	movs	r5, #0
 800e700:	f104 0619 	add.w	r6, r4, #25
 800e704:	e7f5      	b.n	800e6f2 <_printf_i+0x226>
 800e706:	bf00      	nop
 800e708:	0800e9c9 	.word	0x0800e9c9
 800e70c:	0800e9da 	.word	0x0800e9da

0800e710 <memmove>:
 800e710:	4288      	cmp	r0, r1
 800e712:	b510      	push	{r4, lr}
 800e714:	eb01 0402 	add.w	r4, r1, r2
 800e718:	d902      	bls.n	800e720 <memmove+0x10>
 800e71a:	4284      	cmp	r4, r0
 800e71c:	4623      	mov	r3, r4
 800e71e:	d807      	bhi.n	800e730 <memmove+0x20>
 800e720:	1e43      	subs	r3, r0, #1
 800e722:	42a1      	cmp	r1, r4
 800e724:	d008      	beq.n	800e738 <memmove+0x28>
 800e726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e72e:	e7f8      	b.n	800e722 <memmove+0x12>
 800e730:	4402      	add	r2, r0
 800e732:	4601      	mov	r1, r0
 800e734:	428a      	cmp	r2, r1
 800e736:	d100      	bne.n	800e73a <memmove+0x2a>
 800e738:	bd10      	pop	{r4, pc}
 800e73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e742:	e7f7      	b.n	800e734 <memmove+0x24>

0800e744 <_sbrk_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d06      	ldr	r5, [pc, #24]	; (800e760 <_sbrk_r+0x1c>)
 800e748:	2300      	movs	r3, #0
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	602b      	str	r3, [r5, #0]
 800e750:	f7f6 fec2 	bl	80054d8 <_sbrk>
 800e754:	1c43      	adds	r3, r0, #1
 800e756:	d102      	bne.n	800e75e <_sbrk_r+0x1a>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	b103      	cbz	r3, 800e75e <_sbrk_r+0x1a>
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	20005438 	.word	0x20005438

0800e764 <_realloc_r>:
 800e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e768:	4680      	mov	r8, r0
 800e76a:	4614      	mov	r4, r2
 800e76c:	460e      	mov	r6, r1
 800e76e:	b921      	cbnz	r1, 800e77a <_realloc_r+0x16>
 800e770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	4611      	mov	r1, r2
 800e776:	f7ff bc57 	b.w	800e028 <_malloc_r>
 800e77a:	b92a      	cbnz	r2, 800e788 <_realloc_r+0x24>
 800e77c:	f7ff fbe8 	bl	800df50 <_free_r>
 800e780:	4625      	mov	r5, r4
 800e782:	4628      	mov	r0, r5
 800e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e788:	f000 f81b 	bl	800e7c2 <_malloc_usable_size_r>
 800e78c:	4284      	cmp	r4, r0
 800e78e:	4607      	mov	r7, r0
 800e790:	d802      	bhi.n	800e798 <_realloc_r+0x34>
 800e792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e796:	d812      	bhi.n	800e7be <_realloc_r+0x5a>
 800e798:	4621      	mov	r1, r4
 800e79a:	4640      	mov	r0, r8
 800e79c:	f7ff fc44 	bl	800e028 <_malloc_r>
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d0ed      	beq.n	800e782 <_realloc_r+0x1e>
 800e7a6:	42bc      	cmp	r4, r7
 800e7a8:	4622      	mov	r2, r4
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	bf28      	it	cs
 800e7ae:	463a      	movcs	r2, r7
 800e7b0:	f7ff fbc0 	bl	800df34 <memcpy>
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4640      	mov	r0, r8
 800e7b8:	f7ff fbca 	bl	800df50 <_free_r>
 800e7bc:	e7e1      	b.n	800e782 <_realloc_r+0x1e>
 800e7be:	4635      	mov	r5, r6
 800e7c0:	e7df      	b.n	800e782 <_realloc_r+0x1e>

0800e7c2 <_malloc_usable_size_r>:
 800e7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7c6:	1f18      	subs	r0, r3, #4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bfbc      	itt	lt
 800e7cc:	580b      	ldrlt	r3, [r1, r0]
 800e7ce:	18c0      	addlt	r0, r0, r3
 800e7d0:	4770      	bx	lr
	...

0800e7d4 <_init>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr

0800e7e0 <_fini>:
 800e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e2:	bf00      	nop
 800e7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e6:	bc08      	pop	{r3}
 800e7e8:	469e      	mov	lr, r3
 800e7ea:	4770      	bx	lr
